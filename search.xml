<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>design pattern</title>
      <link href="/Blog/2020/08/20/design-pattern/"/>
      <url>/Blog/2020/08/20/design-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>软件工程中，设计模式是对软件设计中普遍存在的各种问题所提出的解决方案。</p><p>编写代码，需要解决耦合性、内聚性、可维护性、可扩展性、重用性、灵活性的问题。</p><p>低耦合：该是哪个模块的错误就在哪个模块报错</p><p>高内聚：</p><p>代码重用性：相同功能的代码，不用多次编写</p><p>可读性：编程规范性，便于其他程序员的阅读和理解</p><p>可扩展性：需要增加新的功能时成本低</p><p>可靠性：增加新的功能后，对原来的功能没有影响</p><h3 id="七大设计原则核心思想"><a href="#七大设计原则核心思想" class="headerlink" title="七大设计原则核心思想"></a>七大设计原则核心思想</h3><ol><li>单一职责</li><li>接口隔离</li><li>依赖倒转</li><li>里式替换</li><li>开闭原则ocp</li><li>迪米特法则</li><li>合成复用原则</li></ol><h4 id="单一职责-single-responsibility"><a href="#单一职责-single-responsibility" class="headerlink" title="单一职责 single responsibility"></a>单一职责 single responsibility</h4><p>一个类只负责一项职责，降低类的复杂度。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResp</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1</span>        Vehicle vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"摩托车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2</span>        RoadVehicle roadVehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoadVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roadVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"摩托车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roadVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AirVehicle airVehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AirVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airVehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3</span>        Vehicle3 vehicle3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle3<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle3<span class="token punctuation">.</span><span class="token function">runWater</span><span class="token punctuation">(</span><span class="token string">"轮船"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle3<span class="token punctuation">.</span><span class="token function">runAir</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方案 1 的分析</span><span class="token comment" spellcheck="true">// 在方式1的run方法中，违反了单一职责原则(海陆空都管)</span><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle <span class="token operator">+</span> <span class="token string">" 在公路上运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方案 2 的分析</span><span class="token comment" spellcheck="true">// 遵守单一职责原则，但是这样做的改动很大，即将类分解，同时修改客户端</span><span class="token keyword">class</span> <span class="token class-name">RoadVehicle</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle <span class="token operator">+</span> <span class="token string">"公路运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AirVehicle</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle <span class="token operator">+</span> <span class="token string">"天空运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方案 3 的分析</span><span class="token comment" spellcheck="true">// 在方法级别上，仍然是遵守单一职责</span><span class="token keyword">class</span> <span class="token class-name">Vehicle3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle <span class="token operator">+</span> <span class="token string">" 在公路上运行...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runAir</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle <span class="token operator">+</span> <span class="token string">" 在天空上运行...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runWater</span><span class="token punctuation">(</span>String vehicle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle <span class="token operator">+</span> <span class="token string">" 在水中行...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="接口隔离原则-Interface-Segregation-Principle"><a href="#接口隔离原则-Interface-Segregation-Principle" class="headerlink" title="接口隔离原则 Interface Segregation Principle"></a>接口隔离原则 Interface Segregation Principle</h4><p>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Segregation1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Interface1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了 operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了 operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了 operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了  operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了  operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A 类通过接口Interface1依赖(使用) B 类，但是只会用到 1,2,3 方法</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend2</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend3</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//C 类通过接口Interface1依赖(使用) D 类，但是只会用到 1,4,5 方法</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend4</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend5</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>修改后的代码，将接口拆分。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Segregation1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用一把</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">depend1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A 类通过接口去依赖 B 类</span>        a<span class="token punctuation">.</span><span class="token function">depend2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">depend3</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">depend1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C 类通过接口去依赖(使用)D 类</span>        c<span class="token punctuation">.</span><span class="token function">depend4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">depend5</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接 口 1</span><span class="token keyword">interface</span> <span class="token class-name">Interface1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接 口 2</span><span class="token keyword">interface</span> <span class="token class-name">Interface2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接 口 3</span><span class="token keyword">interface</span> <span class="token class-name">Interface3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">,</span> Interface2 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了 operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">,</span> Interface3 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了  operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了  operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了 operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// A 类通过接口 Interface1,Interface2 依赖(使用) B 类，但是只会用到 1,2,3 方法</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend2</span><span class="token punctuation">(</span>Interface2 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend3</span><span class="token punctuation">(</span>Interface2 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// C  类通过接口 Interface1,Interface3  依赖(使用) D 类，但是只会用到 1,4,5 方法</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span>Interface1 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend4</span><span class="token punctuation">(</span>Interface3 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         i<span class="token punctuation">.</span><span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend5</span><span class="token punctuation">(</span>Interface3 i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="依赖倒转原则-Dependence-Inversion-Principle"><a href="#依赖倒转原则-Dependence-Inversion-Principle" class="headerlink" title="依赖倒转原则 Dependence Inversion Principle"></a>依赖倒转原则 Dependence Inversion Principle</h4><p>高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节。中心思想是面向接口编程。使用接口的目的是制定好规范。</p><p>依赖传递三种方式：通过接口传递，通过构造方法，通过setter方式传递。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependencyInversion</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Email</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"电子邮件信息: hello,world"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//完成 Person 接收消息的功能</span><span class="token comment" spellcheck="true">//方式 1 分析</span><span class="token comment" spellcheck="true">//1. 简单，比较容易想到</span><span class="token comment" spellcheck="true">//2. 如果我们获取的对象是 微信，短信等等，则新增类，同时 Person 也要增加相应的接收方法</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>Email email<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解决思路：引入一个抽象的接口 IReceiver, 表示接收者, 这样 Person 类与接口 IReceiver 发生依赖。因为 Email, WeiXin 等等属于接收的范围，他们各自实现 IReceiver 接口就 ok,  这样我们就符合依赖倒转原则。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependencyInversion</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端无需改变</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeiXin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">interface</span> <span class="token class-name">IReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Email</span> <span class="token keyword">implements</span> <span class="token class-name">IReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"电子邮件信息: hello,world"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加微信</span><span class="token keyword">class</span> <span class="token class-name">WeiXin</span> <span class="token keyword">implements</span> <span class="token class-name">IReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"微信信息: hello,ok"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式 2</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里我们是对接口的依赖</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>IReceiver receiver <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h4><ol><li><p>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</p></li><li><p>继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低， 增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障</p></li></ol><p>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法。原来的父类和子类都继承一个更通俗的基类。如果需要发生关系，可以采用聚合、组合。</p><h4 id="开闭原则-Open-Closed-Principle"><a href="#开闭原则-Open-Closed-Principle" class="headerlink" title="开闭原则 Open Closed Principle"></a>开闭原则 Open Closed Principle</h4><p>一个软件实体应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节。当软件需要变化时，尽量通过扩展软件实体的行为来实现，而不是通过修改。</p><h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>也叫最少知道原则。一个对象应该对其他对象保持最少的了解。类和类关系越密切，耦合度越大。</p><p>直接的朋友：耦合的方式包括依赖、关联、组合、聚合等。出现了成员变量，方法参数，方法返回值中的类是直接的朋友。出现在局部变量中的类不是直接的朋友。</p><h4 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h4><p>尽量使用合成、聚合的方式，而不是使用继承。</p><h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><img src="04design_uml.jpg"><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>在类中用到了对方。</p><h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><p>实际上就是继承，依赖关系的特例。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>实现了接口。</p><h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p>依赖关系的特例。具有导航性，即双向或单向关系。有单向一对一关系，双向一对一关系。</p><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>整体与部分可以分开，是关联关系的特例。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Mouse mouse<span class="token punctuation">;</span>    Private Monitor monitor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMouse</span><span class="token punctuation">(</span>Mouse m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        mouse <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonitor</span><span class="token punctuation">(</span>Monitor m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        monitor <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>整体与部分不能分开，是关联关系的特例。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Mouse mouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//鼠标和 computer 不能分离</span>    <span class="token keyword">private</span> Moniter moniter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Moniter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示器和 Computer 不能分离</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMouse</span><span class="token punctuation">(</span>Mouse mouse<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoniter</span><span class="token punctuation">(</span>Moniter moniter<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>moniter <span class="token operator">=</span> moniter<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>整个软件系统中一个类只能有一个对象，节省了系统资源。</p><p>java.lang.Runtime是经典的案例。</p><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>构造器私有化（防止new），在类的内部创建对象，对外暴露一个静态公共对象。</p><p><strong>优点</strong></p><ol><li>类装载的时候完成实例化，避免了线程同步问题</li></ol><p><strong>缺点</strong></p><ol><li>如果从始至终没有使用过，可能造成内存浪费</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 写法1</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法2</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p><strong>优点</strong></p><ol><li>懒加载</li></ol><p><strong>缺点</strong></p><ol><li>使用静态内部类无法传参</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程不安全</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程安全，效率较低</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 双重检查</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stance <span class="token operator">==</span> null<span class="token punctuation">)</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态内部类</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SingletonInstance<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>借助jdk1.5中添加的枚举来实现单例模式。</p><p><strong>优点</strong></p><ol><li>防止反序列化重新创建新的对象</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Singleton<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    INSTANCE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>定义了一个创建对象的类，用它来封装实例化对象的行为。</p><p>在<code>java.util.Calendar</code>中<code>createCalendar()</code>有使用。</p><p><strong>意义</strong></p><p>放到一个类中统一管理和维护，达到和主项目的解耦。</p><p><strong>依赖抽象原则</strong></p><ol><li>创建对象实例，不要直接new，把这个动作放在一个工厂的方法中作为返回值</li><li>不要继承具体类，继承抽象类或者实现接口</li><li>不要覆盖基类中已经实现的方法</li></ol><p><strong>优点</strong></p><ol><li>提高扩展性和维护性。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更加 orderType 返回对应的 Pizza 对象</span>    <span class="token keyword">public</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用简单工厂模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" 希腊披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">" 奶酪披萨 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pizza<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个简单工厂对象</span>    SimpleFactory simpleFactory<span class="token punctuation">;</span>     Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OrderPizza</span><span class="token punctuation">(</span>SimpleFactory simpleFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token function">setFactory</span><span class="token punctuation">(</span>simpleFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span>SimpleFactory simpleFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用户输入的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory <span class="token operator">=</span> simpleFactory<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置简单工厂对象</span>        <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出 pizza</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pizza <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//订购成功</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 订购披萨失败 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个抽象方法，createPizza(),  让各个工厂子类自己实现</span>    <span class="token keyword">abstract</span> Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>        String orderType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  订购披萨的类型</span>        <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//抽象方法，由工厂子类完成</span>            pizza <span class="token operator">=</span> <span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//输出 pizza 制作过程</span>            pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还可以创建其他的OrderPizza，实现方法类似</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    Pizza <span class="token function">createPizza</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Pizza pizza <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类。将简单工厂模式和工厂方法模式进行整合。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>实现clone的java类需要实现Cloneable接口。用原型实例指定创建对象的种类，通过拷贝这些原型，创建新的对象。</p><p>在Spring框架中创建bean有使用。</p><p>数据类型是引用数据类型的，浅拷贝进行引用传递，而不是值拷贝。</p><p><strong>优点</strong></p><ol><li>创建新对象比较复杂时，使用原型模式提高效率</li><li>能够动态获取对象运行时的状态</li></ol><p><strong>缺点</strong></p><ol><li>需要为每一个类配备一个克隆办法，对已有的类进行改造时需要修改其源代码，违背了ocp原则</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address <span class="token operator">=</span> <span class="token string">"蒙古羊"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Sheep friend<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认是浅拷贝</span>    <span class="token keyword">public</span> <span class="token function">Sheep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Sheep sheep <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sheep <span class="token operator">=</span> <span class="token punctuation">(</span>Sheep<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sheep<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>深拷贝可以通过序列化和重写clone方法实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepProtoType</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> Cloneable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//String 属 性</span>    <span class="token keyword">public</span> DeepCloneableTarget deepCloneableTarget<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引用类型</span>    <span class="token keyword">public</span> <span class="token function">DeepProtoType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//深拷贝 - 方式 1  使用 clone 方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object deep <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里完成对基本数据类型(属性)和 String 的克隆</span>        deep <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对引用类型的属性，进行单独处理</span>        DeepProtoType deepProtoType <span class="token operator">=</span> <span class="token punctuation">(</span>DeepProtoType<span class="token punctuation">)</span>deep<span class="token punctuation">;</span>        deepProtoType<span class="token punctuation">.</span>deepCloneableTarget <span class="token operator">=</span> <span class="token punctuation">(</span>DeepCloneableTarget<span class="token punctuation">)</span> deepCloneableTarget<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deepProtoType<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//深拷贝 - 方式 2 通过对象的序列化实现 (推荐) </span>    <span class="token keyword">public</span> Object <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ByteArrayOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>         ObjectOutputStream oos <span class="token operator">=</span> null<span class="token punctuation">;</span>         ByteArrayInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>         ObjectInputStream ois <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//序列化</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前这个对象以对象流的方式输出</span>            <span class="token comment" spellcheck="true">//反序列化</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            DeepProtoType copyObj <span class="token operator">=</span> <span class="token punctuation">(</span>DeepProtoType<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> copyObj<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>也叫生成器模式。将复杂对象的建造过程抽象出来，是这个过程的不同实现方法可以构造出不同表现的对象。</p><p>在StringBuilder中使用了建造者模式。Appendable接口定义了多个append方法(抽象方法)，即Appendable是抽象建造者。AbstractStringBuilder已经是建造者，只是不能实例化。StringBuilder既充当了指挥者，也充当了具体的建造者。</p><p>product：具体的产品对象</p><p>builder：创建一个product对象的各个部件指定的接口或抽象类</p><p>concrete builder：实现接口，装配各个部件</p><p>director：构建一个使用builder接口的对象。创建一个复杂的对象。</p><p><strong>优点</strong></p><ol><li>客户端不需要知道产品内部细节</li><li>可以精细控制产品创建过程</li><li>不需要改变类库代码，符合ocp原则</li></ol><p><strong>缺点</strong></p><ol><li>产品内部变化过于复杂，不适合使用</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//盖普通房子</span>        CommonHouse commonHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//准备创建房子的指挥者</span>        HouseDirector houseDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span>commonHouse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成盖房子，返回产品(普通房子)</span>        House house <span class="token operator">=</span> houseDirector<span class="token punctuation">.</span><span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//盖高楼</span>        HighBuilding highBuilding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighBuilding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重置建造者</span>        houseDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span>highBuilding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成盖房子，返回产品(高楼) </span>        houseDirector<span class="token punctuation">.</span><span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHouse</span> <span class="token keyword">extends</span> <span class="token class-name">HouseBuilder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子打地基 5 米 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子砌墙 10cm "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 普通房子屋顶 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 产 品 ->Product </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String baise<span class="token punctuation">;</span>     <span class="token keyword">private</span> String wall<span class="token punctuation">;</span>     <span class="token keyword">private</span> String roofed<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 省略getter &amp; setter</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 抽象的建造者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HouseBuilder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将建造的流程写好, 抽象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//建造房子好， 将产品(房子) 返回</span>    <span class="token keyword">public</span> House <span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseDirector</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    HouseBuilder houseBuilder <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器传入 houseBuilder</span>    <span class="token keyword">public</span> <span class="token function">HouseDirector</span><span class="token punctuation">(</span>HouseBuilder houseBuilder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>houseBuilder <span class="token operator">=</span> houseBuilder<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如何处理建造房子的流程，交给指挥者 </span>    <span class="token keyword">public</span> House <span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         houseBuilder<span class="token punctuation">.</span><span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         houseBuilder<span class="token punctuation">.</span><span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> houseBuilder<span class="token punctuation">.</span><span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>将某个类的接口转换成客户端期望的另一个接口表示，增强兼容性。三种命名是根据src以怎么样的形式给到Adapter来命名的。</p><p>在SpringMVC框架中HandlerAdapter有应用。</p><p><strong>优点</strong></p><ol><li>客户端不知道被适配者，是解耦的</li></ol><h4 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h4><p>继承src类，实现dst类接口。</p><p><strong>缺点</strong></p><ol><li>Java 是单继承机制，所以类适配器继承 src 类要求 dst 必须是接口，有一定局限性</li><li>src 类的方法在 Adapter 中都会暴露出来，增加了使用的成本</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//被适配的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220V</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出 220V 的电压</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> src <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压="</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适配接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5V</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适配器类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Voltage220V</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> srcV <span class="token operator">=</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dstV <span class="token operator">=</span> srcV <span class="token operator">/</span> <span class="token number">44</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转成 5v </span>        <span class="token keyword">return</span> dstV<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h4><p>对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合替代继承， 所以它解决了类适配器必须继承 src 的局限性问题，也不再要求 dst必须是接口。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适配器类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Voltage220V voltage220V<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关联关系-聚合</span>    <span class="token comment" spellcheck="true">//通过构造器，传入一个 Voltage220V 实例</span>    <span class="token keyword">public</span> <span class="token function">VoltageAdapter</span><span class="token punctuation">(</span>Voltage220V voltage220v<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voltage220V <span class="token operator">=</span> voltage220v<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> voltage220V<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> src <span class="token operator">=</span> voltage220V<span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取 220V 电压</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用对象适配器，进行适配~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             dst <span class="token operator">=</span> src <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配完成，输出的电压为="</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dst<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="接口适配器模式"><a href="#接口适配器模式" class="headerlink" title="接口适配器模式"></a>接口适配器模式</h4><p>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现(空方法)，那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求。</p><p>在Android中的属性动画ValueAnimator类可以通过addListener方法添加监听器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface4</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbsAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Interface4</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AbsAdapter absAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbsAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//只覆盖需要使用的接口方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用了 m1 的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        absAdapter<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>将实现和抽象放在两个不同的类层次中，使这两个层次可以独立改变。基于类的最小设计原则。</p><p><img src="05design_bridge.jpg" alt="05design_bridge"></p><ol><li><p>Client 类：桥接模式的调用者</p></li><li><p>抽象类(Abstraction) :维护了 Implementor / 即它的实现类 ConcreteImplementorA.., 二者是聚合关系, Abstraction充当桥接类</p></li><li><p>RefinedAbstraction : 是 Abstraction 抽象类的子类</p></li><li><p>Implementor : 行为实现类的接口</p></li><li><p>ConcreteImplementorA /B ：行为的具体实现类</p></li><li><p>从 UML 图：这里的抽象类和接口是聚合的关系，其实调用和被调用关系</p></li></ol><p>在JDBC中的Driver接口中有使用。MySQL, Oracle等的driver。</p><p><strong>优点</strong></p><ol><li>减少子类个数，降低系统管理和维护成本（解决类爆炸问题）</li></ol><p><strong>缺点</strong></p><ol><li>需要能够识别出系统中两个独立变化的维度，应用场景受限</li></ol><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>动态的将新功能附加到对象上。体现了ocp。</p><p>在Java的IO结构中FilterInputStream有使用。</p><img src="06_deco.jpg"><p><strong>优点</strong></p><ol><li>减少子类个数，降低系统管理和维护成本（解决类爆炸问题）</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span>    <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeBar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 装饰者模式下的订单：2 份巧克力+一份牛奶的 LongBlack</span>        <span class="token comment" spellcheck="true">// 1.  点一份 LongBlack</span>        Drink order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"费用 1="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"描述="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. order 加入一份牛奶</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 费用 ="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 描述 = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. order 加入一份巧克力</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶  加入一份巧克力    费 用 ="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 加入一份巧克力 描述 = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. order 加入一份巧克力</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶  加入 2 份巧克力    费 用 ="</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order 加入一份牛奶 加入 2 份巧克力 描述 = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Drink order2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeCaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡    费 用 ="</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡 描述 = "</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order2               <span class="token operator">=</span>                <span class="token keyword">new</span>                <span class="token class-name">Milk</span><span class="token punctuation">(</span>order2<span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡  加入一份牛奶    费 用 ="</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order2 无因咖啡 加入一份牛奶 描述 = "</span> <span class="token operator">+</span> order2<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> Drink obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//组合 </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// getPrice 自己价格</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token comment" spellcheck="true">// obj.getDes() 输出被装饰者的信息</span>    <span class="token keyword">return</span> des <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" &amp;&amp; "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> String des<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 描 述</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> des<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDes</span><span class="token punctuation">(</span>String des<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算费用的抽象方法，子类来实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 意大利咖啡 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">6.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LongBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" longblack "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">5.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShortBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ShortBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" shortblack "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体的 Decorator， 这里就是调味品</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chocolate</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Chocolate</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 巧克力 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">3.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调味品 的价格</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Milk</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 牛 奶 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Soy</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Soy</span><span class="token punctuation">(</span>Drink obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">" 豆浆    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>也叫部分整体模式。创建了对象组的树形结构，将对象组合成树状结构以表示整体到部分的层次关系。</p><p>component可以是个类，也可以是个接口。composite是中间节点。leaf是叶子节点。</p><p>在HashMap中使用了组合模式，静态内部类Node是leaf，HashMap是composite，Map是component。</p><p><strong>优点</strong></p><ol><li>用户对单个对象和组合对象的访问具有一致性</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从大到小创建对象 学校</span>        OrganizationComponent university <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token string">"清华大学"</span><span class="token punctuation">,</span> <span class="token string">" 中国顶级大学 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 学院</span>        OrganizationComponent computerCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">College</span><span class="token punctuation">(</span><span class="token string">"计 算机学院"</span><span class="token punctuation">,</span> <span class="token string">"计算机学院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         OrganizationComponent infoEngineercollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">College</span><span class="token punctuation">(</span><span class="token string">"信息工程学院"</span><span class="token punctuation">,</span> <span class="token string">"信息工程学院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建各个学院下面的系(专业)</span>        computerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"软件工程"</span><span class="token punctuation">,</span> <span class="token string">"软件工程不错 "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         computerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">,</span> <span class="token string">"网络工程不错 "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">,</span> <span class="token string">"计算机科学与技术是老牌的专业 "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        infoEngineercollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"通信工程"</span><span class="token punctuation">,</span> <span class="token string">"通信工程不好学"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         infoEngineercollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"信息工程"</span><span class="token punctuation">,</span> <span class="token string">"信息工程好学"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将学院加入到 学校</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computerCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>                 university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>infoEngineercollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         infoEngineercollege<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrganizationComponent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 名 字</span>    <span class="token keyword">private</span> String des<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 说 明</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认实现</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//默认实现</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">OrganizationComponent</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                                                       <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法 print,  做成抽象的,  子类都需要实现</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//University 就是 Composite, 可以管理 College</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">University</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>OrganizationComponent<span class="token operator">></span> organizationComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>OrganizationComponent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">University</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重 写 add @Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>OrganizationComponent oc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>oc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重 写 remove @Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// print 方法，就是输出 University  包含的学院</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历 organizationComponents</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>OrganizationComponent oc<span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             oc<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">College</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//List 中 存放的 Department</span>    List<span class="token operator">&lt;</span>OrganizationComponent<span class="token operator">></span> organizationComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>OrganizationComponent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">College</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重 写 add @Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    将来实际业务中，Colleage和University的add不一定完全一样</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重 写 remove @Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>OrganizationComponent organizationComponent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// print 方法，就是输出 University  包含的学院</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历 organizationComponents</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>OrganizationComponent oc<span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             oc<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Department</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String des<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//add , remove 就不用写了，因为他是叶子节点</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只跟接口发生调用，不需关心内部细节。</p><p>外观类(facade)为调用端提供统一的调用接口，外观类知道哪些子系统负责负责处理请求，从而将调用端的请求代理给适当的子系统对象。调用者(Client)外观接口的调用者。子系统的集合指模块或者子系统，处理外观类对象指派的任务。</p><p>外观模式在MyBatis框架中的<code>Configuration.class</code>的<code>newMetaObject()</code>有应用。<code>Configuration.class</code>就是一个外观类。下面有很多Factory作为子系统。</p><p><strong>优点</strong></p><ol><li>通过合理的使用外观模式，更好地划分访问层次</li><li>屏蔽了子系统细节，降低了客户端对子系统使用的复杂性</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HomeTheaterFacade homeTheaterFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         homeTheaterFacade<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeTheaterFacade</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义各个子系统对象</span>    <span class="token keyword">private</span> TheaterLight theaterLight<span class="token punctuation">;</span>     <span class="token keyword">private</span> Popcorn popcorn<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stereo stereo<span class="token punctuation">;</span>     <span class="token keyword">private</span> Projector projector<span class="token punctuation">;</span>     <span class="token keyword">private</span> Screen screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> DVDPlayer dVDPlayer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>theaterLight <span class="token operator">=</span> TheaterLight<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>popcorn <span class="token operator">=</span> Popcorn<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stereo <span class="token operator">=</span> Stereo<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>projector <span class="token operator">=</span> Projector<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> Screen<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>dVDPlayer <span class="token operator">=</span> DVDPlayer<span class="token punctuation">.</span><span class="token function">getInstanc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//操作分成 4  步</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         popcorn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         popcorn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         screen<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         projector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stereo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         dVDPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         theaterLight<span class="token punctuation">.</span><span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         dVDPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         dVDPlayer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         popcorn<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        theaterLight<span class="token punctuation">.</span><span class="token function">bright</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         screen<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         projector<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stereo<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         dVDPlayer<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Popcorn</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Popcorn instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Popcorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Popcorn <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" popcorn on "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" popcorn ff "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" popcorn is poping    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DVDPlayer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用单例模式, 使用饿汉式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DVDPlayer instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DVDPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DVDPlayer <span class="token function">getInstanc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dvd on "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dvd off "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dvd is playing "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dvd pause .."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Projector</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Projector instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Projector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Projector <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Projector on "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Projector ff "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Projector is Projector    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Screen instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Screen <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Screen up "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Screen down "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stereo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Stereo instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stereo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Stereo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Stereo on "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Screen off "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Screen up.. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheaterLight</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> TheaterLight instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheaterLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TheaterLight <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" TheaterLight on "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" TheaterLight off "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" TheaterLight dim.. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bright</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" TheaterLight bright.. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式 Flyweight Pattern"></a>享元模式 Flyweight Pattern</h3><p>运用共享技术有效的支持大量细粒度的对象。通过解决重复对象的内存浪费的问题，提高系统的性能。经典应用场景就是池技术。</p><img src="07design_flyweight.jpg"><p>Flyweight是抽象的享元角色。他是产品的抽象类, 同时定义出对象的外部状态和内部状态的接口或实现。</p><p>ConcreteFlyWeight是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务。</p><p>UnSharedConcreteFlyWeight是不可共享的角色，一般不会出现在享元工厂。</p><p>FlyWeightFactory享元工厂类，用于构建一个池容器(集合)， 同时提供从池中获取对象方法。</p><ol><li><p>内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</p></li><li><p>外部状态指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态。</p></li></ol><p>享元模式在Integer中有使用。如果新创建的Integer对象值在-128~127中，使用享元模式返回。否则，新创建对象返回。</p><p><strong>优点</strong></p><ol><li>降低程序内存占用，减少对象创建，提高效率</li></ol><p><strong>缺点</strong></p><ol><li>需要划分内部和外部状态，还要建立一个工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个工厂类</span>        WebSiteFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSiteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户要一个以新闻形式发布的网站</span>        WebSite webSite1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"新闻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webSite1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户要一个以博客形式发布的网站</span>        WebSite webSite2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webSite2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户要一个以博客形式发布的网站</span>        WebSite webSite3 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webSite3<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户要一个以博客形式发布的网站</span>        WebSite webSite4 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webSite4<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站的分类共="</span> <span class="token operator">+</span> factory<span class="token punctuation">.</span><span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体网站</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteWebSite</span> <span class="token keyword">extends</span> <span class="token class-name">WebSite</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//共享的部分，内部状态</span>    <span class="token keyword">private</span> String type <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//网站发布的形式(类型)</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">ConcreteWebSite</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站的发布形式为:"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"。使用者是"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WebSite</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抽象方法</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 网站工厂类，根据需要返回压一个网站</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSiteFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//集合， 充当池的作用</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConcreteWebSite<span class="token operator">></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据网站的类型，返回一个网站, 如果没有就创建一个网站，并放入到池中,并返回</span>    <span class="token keyword">public</span> WebSite <span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//就创建一个网站，并放入到池中</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>WebSite<span class="token punctuation">)</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取网站分类的总数 (池中有多少个网站类型) </span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式 Proxy"></a>代理模式 Proxy</h3><p>为对象提供一个替身，以控制对这个对象的访问。增强额外的功能操作，即扩展目标对象的功能。主要是静态代理、动态代理和cglib代理。</p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>需要定义接口或者父类，被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同父类。</p><p><strong>优点</strong></p><ol><li>在不修改目标对象的功能前提下, 能通过代理对象对目标功能扩展</li></ol><p><strong>缺点</strong></p><ol><li>因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类</li><li>一旦接口增加方法,目标对象与代理对象都要维护</li></ol><img src="08design_staticproxy.jpg"><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建目标对象(被代理对象)</span>        TeacherDao teacherDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建代理对象, 同时将被代理对象传递给代理对象</span>        TeacherDaoProxy teacherDaoProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDaoProxy</span><span class="token punctuation">(</span>teacherDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过代理对象，调用到被代理对象的方法</span>        <span class="token comment" spellcheck="true">//即：执行的是代理对象的方法，代理对象再去调用目标对象的方法</span>        teacherDaoProxy<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 授课的方法</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 老师授课中    。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代理对象,静态代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ITeacherDao target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 目标对象，通过接口来聚合</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">TeacherDaoProxy</span><span class="token punctuation">(</span>ITeacherDao target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始代理.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//方法</span>        target<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//方法</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>也称为JDK 代理、接口代理。代理对象,不需要实现接口，但是目标对象要实现接口，否则不能用动态代理。代理对象的生成，是利用 JDK 的 API，动态的在内存中构建代理对象。</p><p><strong>JDK 中生成代理对象的 API</strong></p><ol><li><p>代理类所在包: java.lang.reflect.Proxy</p></li><li><p>JDK 实现代理只需要使用 <strong>newProxyInstance</strong> 方法,但是该方法需要接收三个参数,完整的写法是:</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>InvocationHandler h<span class="token punctuation">)</span></code></pre><img src="09design_dynamic_proxy.jpg"><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建目标对象</span>        ITeacherDao target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给目标对象，创建代理对象, 可以转成 ITeacherDao</span>        ITeacherDao proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>ITeacherDao<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// proxyInstance=class com.sun.proxy.$Proxy0内存中动态生成了代理对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxyInstance="</span> <span class="token operator">+</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过代理对象，调用目标对象的方法</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">" tom "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 授课方法</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//维护一个目标对象</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给目标对象  生成一个代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**newProxyInstance(ClassLoader loader, Class&lt;?>[] interfaces, InvocationHandler h)1. ClassLoader loader: 指定当前目标对象使用的类加载器, 获取加载器的方法固定2. Class&lt;?>[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型3. InvocationHandler h: 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入*/</span>    <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK 代理开始~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//反射机制调用目标对象的方法</span>                Object returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK 代理提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 老师授课中.... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h4><p>有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理。也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有些书也将Cglib 代理归属到动态代理。Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类。</p><p><strong>实现步骤</strong></p><ol><li><p>需要引入 cglib 的 jar 文件 </p></li><li><p>在内存中动态构建子类，注意代理的类不能为 final，否则报错<code>java.lang.IllegalArgumentException</code></p></li><li><p>目标对象的方法如果为 final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法</p></li></ol><img src="10design_cglib.jpg"><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师授课中，cglib代理不需要实现接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 创建一个工具类</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 设置父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 创建子类对象，即代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重写intercept 方法，会调用目标对象的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object arg0<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy arg3<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib 代理模式 ~~ 开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Object returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib 代理模式 ~~ 提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建目标对象</span>        TeacherDao target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取到代理对象，并且将目标对象传递给代理对象</span>        TeacherDao proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>TeacherDao<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行代理对象的方法，触发intecept方法，从而实现对目标对象的调用</span>        String res <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"res="</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h4><p>防火墙代理，缓存代理，远程代理，同步代理。</p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="模板模式-Template-Method-Pattern"><a href="#模板模式-Template-Method-Pattern" class="headerlink" title="模板模式 Template Method Pattern"></a>模板模式 Template Method Pattern</h3><p>在抽象类定义了执行他的方法的模板，子类可以按需要重写。</p><p>AbstractClass 抽象类， 类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现 其它的抽象方法。 ConcreteClass 实现抽象方法，以完成算法中特点子类的步骤。一般模板方法都加上 final 关键字， 防止子类重写模板方法。</p><p>在Spring IOC容器中<code>ConfigurableApplicationContext.class</code>的refresh()方法有使用模板模式。</p><p><strong>优点</strong></p><ol><li>实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。</li><li>统一了算法，也提供了很大的灵活性。</li></ol><p><strong>缺点</strong></p><ol><li>每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----制作红豆豆浆----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SoyaMilk redBeanSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBeanSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         redBeanSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----制作花生豆浆----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SoyaMilk peanutSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             peanutSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeanutSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 加入上好的花生 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBeanSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 加入上好的红豆 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象类，表示豆浆</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模板方法, make , 模板方法可以做成 final , 不让子类去覆盖. </span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步：选择好的新鲜黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加不同的配料，抽象方法，子类具体实现</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//浸泡</span>    <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步，黄豆和配料开始浸泡，需要3小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步：黄豆和配料放到豆浆机去打碎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为”钩子“。 还是用上面做豆浆的例子来讲解，我们还希望制作纯豆浆，不添加任何的配料，使用钩子方法对模板方法进行改造。</p><ol start="2"><li>ConcreteClass 实现抽象方法 operationr2,3,4, 以完成算法中特点子类的步骤</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PureSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">wantCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象类，表示豆浆</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模板方法, make , 模板方法可以做成 final , 不让子类去覆盖. </span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">wantCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步：选择好的新鲜黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加不同的配料，抽象方法，子类具体实现</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//浸泡</span>    <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步，黄豆和配料开始浸泡，需要3小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步：黄豆和配料放到豆浆机去打碎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">wantCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="命令模式-Command-Pattern"><a href="#命令模式-Command-Pattern" class="headerlink" title="命令模式 Command Pattern"></a>命令模式 Command Pattern</h3><p>在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个。</p><img src="11design_command.jpg"><ol><li><p>Invoker 是调用者角色</p></li><li><p>Command: 是命令角色，需要执行的所有命令都在这里，可以是接口或抽象类</p></li><li><p>Receiver: 接受者角色，知道如何实施和执行一个请求相关的操作</p></li><li><p>ConcreteCommand: 将一个接受者对象与一个动作绑定，调用接受者相应的操作，实现 execute</p></li></ol><p>在Spring框架JdbcTemplate中有应用。<code>Interface StatementCallback&lt;T&gt;</code>类似Command。<code>class QueryStatementCallback implements StatementCallback&lt;T&gt;, SqlProvider </code>， 局部内部类，实现了命令接口， 同时也充当命令接收者。命令调用者 是 JdbcTemplate , 其中 <code>execute(StatementCallback&lt;T&gt; action)</code>方法中，调用 <code>action.doInStatement ()</code>方法。不同的实现 StatementCallback 接口的对象，对应不同的 doInStatemnt 实现逻辑。</p><p><strong>优点</strong></p><ol><li>请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</li><li>容易设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令</li><li>容易实现对请求的撤销和重做</li></ol><p><strong>缺点</strong></p><ol><li>有过多的具体命令类，增加了系统的复杂度</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用命令设计模式，完成通过遥控器，对电灯的操作</span>        <span class="token comment" spellcheck="true">//创建电灯的对象(接受者)</span>        LightReceiver lightReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建电灯相关的开关命令</span>        LightOnCommand lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>lightReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOffCommand lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>lightReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要一个遥控器</span>        RemoteController remoteController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给我们的遥控器设置命令, 比如no = 0是电灯的开和关的操作</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lightOnCommand<span class="token punctuation">,</span> lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------按下灯的开按钮-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteController<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------按下灯的关按钮-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteController<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------按下撤销按钮-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteController<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========使用遥控器操作电视机=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         TVReceiver tvReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TVOffCommand tvOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVOffCommand</span><span class="token punctuation">(</span>tvReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>         TVOnCommand tvOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVOnCommand</span><span class="token punctuation">(</span>tvReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给我们的遥控器设置命令, 比如 no = 1  是电视机的开和关的操作</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tvOnCommand<span class="token punctuation">,</span> tvOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------按下电视机的开按钮-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------按下电视机的关按钮-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteController<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------- 按下撤销按钮 -----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         remoteController<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建命令接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行动作(操作) </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//撤销动作(操作) </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 聚合LightReceiver </span>    LightReceiver light<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">LightOffCommand</span><span class="token punctuation">(</span>LightReceiver light<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用接收者的方法</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用接收者的方法</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//聚合LightReceiver </span>    LightReceiver light<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">LightOnCommand</span><span class="token punctuation">(</span>LightReceiver light<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用接收者的方法 </span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用接收者的方法</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 电灯打开了.. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 电灯关闭了.. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做 *其实，这也是一种设计模式, 可以省掉对空判断 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Command<span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>     Command<span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行撤销的命令</span>    Command undoCommand<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器，完成对按钮初始化</span>    <span class="token keyword">public</span> <span class="token function">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给我们的按钮设置你需要的命令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> Command onCommand<span class="token punctuation">,</span> Command offCommand<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按下开按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 找到你按下的开的按钮， 并调用对应方法</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录这次的操作，用于撤销</span>        undoCommand <span class="token operator">=</span> onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按下开按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 找到你按下的关的按钮， 并调用对应方法</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录这次的操作，用于撤销</span>        undoCommand <span class="token operator">=</span> offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按下撤销按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         undoCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 聚 合 TVReceiver</span>    TVReceiver tv<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">TVOffCommand</span><span class="token punctuation">(</span>TVReceiver tv<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用接收者的方法</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用接收者的方法</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 聚 合 TVReceiver TVReceiver tv;</span>    <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">TVOnCommand</span><span class="token punctuation">(</span>TVReceiver tv<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用接收者的方法</span>    tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 电视机打开了.. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 电视机关闭了.. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="访问者模式-Visitor-Pattern"><a href="#访问者模式-Visitor-Pattern" class="headerlink" title="访问者模式 Visitor Pattern"></a>访问者模式 Visitor Pattern</h3><p>封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。包含访问者和被访问元素两个主要组成部分，这些被访问的元素通常具有不同的类型，且不同的访问者可以对它们进行不同的访问操作。例如：处方单中的各种药品信息就是被访问的元素，而划价人员和药房工作人员就是访问者。</p><ol><li><p>Visitor 是抽象访问者，为该对象结构中的 ConcreteElement 的每一个类声明一个 visit 操作</p></li><li><p>ConcreteVisitor ：是一个具体的访问值实现每个有 Visitor 声明的操作，是每个操作实现的部分。</p></li><li><p>ObjectStructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素</p></li><li><p>Element 定义一个 accept 方法，接收一个访问者对象</p></li><li><p>ConcreteElement 为具体元素，实现了 accept 方法</p></li></ol><p>双分派：不管类怎么变化，我们都能找到期望的方法运行。执行的操作取决于请求的种类和两个接受者的类型。</p><p><strong>优点</strong></p><ol><li>符合单一职责原则，程序扩展性好</li><li>对功能进行统一，适用于数据结构稳定的系统，应用场景有报表、UI、拦截器</li></ol><p><strong>缺点</strong></p><ol><li>具体元素对访问者公布细节，违反了迪米特法则</li><li>违背了依赖倒转原则</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//得到男性 的测评</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//得到女的 测评</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供一个方法，让访问者可以访问</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明</span><span class="token comment" spellcheck="true">//1. 这里我们使用到了双分派,  即首先在客户端程序中，将具体状态作为参数传递 Woman中(第一次分派)</span><span class="token comment" spellcheck="true">//2. 然后 Woman 类调用作为参数的 "具体方法" 中方法 getWomanResult, 同时将自己(this)作为参数传入，完成第二次的分派</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        action<span class="token punctuation">.</span><span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        action<span class="token punctuation">.</span><span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Success</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 男人给的评价该歌手很成功 !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 女人给的评价该歌手很成功 !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fail</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 男人给的评价该歌手失败 !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 女人给的评价该歌手失败 !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wait</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span>Man man<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 男人给的评价是该歌手待定 .."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span>Woman woman<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 女人给的评价是该歌手待定 .."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据结构，管理很多人（Man , Woman） </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//维护了一个集合</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加到 list</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//移除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示测评情况</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Action action<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Person p<span class="token operator">:</span> persons<span class="token punctuation">)</span>             p<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 ObjectStructure</span>        ObjectStructure objectStructure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Success success <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Fail fail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>fail<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======给的是待定的测评========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Wait wait <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="迭代器模式-Iterator-Pattern"><a href="#迭代器模式-Iterator-Pattern" class="headerlink" title="迭代器模式 Iterator Pattern"></a>迭代器模式 Iterator Pattern</h3><p>提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构。</p><img src="12design_iter.jpg"><ol><li>Iterator：迭代器接口，是系统提供，含有 hasNext, next, remove</li><li>ConcreteIterator:  具体的迭代器类，管理迭代</li><li>Aggregate: 一个统一的聚合接口， 将客户端和具体聚合解耦</li><li>ConcreteAggreage：具体的聚合持有对象集合， 并提供一个方法，返回一个迭代器， 该迭代器可以正确遍历集合</li><li>Client：客户端，通过Iterator和Aggregate依赖子类</li></ol><p>在JDK中ArrayList集合中有应用。内部类Itr充当具体实现迭代器的类。List充当了聚合接口，含有iterator()方法。ArrayList实现了List接口，实现了iterator()方法。</p><p><strong>优点</strong></p><ol><li>解决了不同集合的遍历问题</li><li>隐藏了聚合的内部结构</li><li>把管理对象集合和遍历对象集合的责任分开，符合单一责任模式</li></ol><p><strong>缺点</strong></p><ol><li>每个聚合对象都要有一个迭代器，存在类爆炸问题</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollegeIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里我们需要 Department以数组方式存放</span>    Department<span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//遍历的位置</span>    <span class="token keyword">public</span> <span class="token function">ComputerCollegeIterator</span><span class="token punctuation">(</span>Department<span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否还有下一个元素 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">>=</span> departments<span class="token punctuation">.</span>length <span class="token operator">||</span> departments<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Department department <span class="token operator">=</span> departments<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>         position <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> department<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除的方法，默认空实现 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoColleageIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Department<span class="token operator">></span> departmentList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//信息工程学院是以 List 方式存放系</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引</span>    <span class="token keyword">public</span> <span class="token function">InfoColleageIterator</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Department<span class="token operator">></span> departmentList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>departmentList <span class="token operator">=</span> departmentList<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> departmentList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> departmentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空 实 现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">College</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加系的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回一个迭代器,遍历</span>    <span class="token keyword">public</span> Iterator    <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollege</span> <span class="token keyword">implements</span> <span class="token class-name">College</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Department<span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> numOfDepartment <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存当前数组的对象个数</span>    <span class="token keyword">public</span> <span class="token function">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"Java 专业"</span><span class="token punctuation">,</span> <span class="token string">" Java 专业  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"PHP 专业"</span><span class="token punctuation">,</span> <span class="token string">" PHP 专业  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"大数据专业"</span><span class="token punctuation">,</span> <span class="token string">"  大数据专业 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"计算机学院"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Department department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>         departments<span class="token punctuation">[</span>numOfDepartment<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> department<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputerCollegeIterator</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoCollege</span> <span class="token keyword">implements</span> <span class="token class-name">College</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Department<span class="token operator">></span> departmentList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InfoCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        departmentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Department<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"信息安全专业"</span><span class="token punctuation">,</span> <span class="token string">" 信息安全专业 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"网络安全专业"</span><span class="token punctuation">,</span> <span class="token string">" 网络安全专业 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"服务器安全专业"</span><span class="token punctuation">,</span> <span class="token string">"  服务器安全专业 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"信息工程学院"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Department department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>             departmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InfoColleageIterator</span><span class="token punctuation">(</span>departmentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//系</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>     <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Department</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> desc<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span>String desc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutPutImpl</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//学院集合</span>    List<span class="token operator">&lt;</span>College<span class="token operator">></span> collegeList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OutPutImpl</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>College<span class="token operator">></span> collegeList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collegeList <span class="token operator">=</span> collegeList<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历所有学院,然后调用 printDepartment  输出各个学院的系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从 collegeList 取出所有学院, Java 中的 List 已经实现 Iterator </span>        Iterator<span class="token operator">&lt;</span>College<span class="token operator">></span> iterator <span class="token operator">=</span> collegeList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出一个学院</span>            College college <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===="</span><span class="token operator">+</span>college<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"===="</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">printDepartment</span><span class="token punctuation">(</span>college<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出学院,输出系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printDepartment</span><span class="token punctuation">(</span>Iterator iterator<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Department d <span class="token operator">=</span> <span class="token punctuation">(</span>Department<span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建学院</span>        List<span class="token operator">&lt;</span>College<span class="token operator">></span> collegeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>College<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ComputerCollege computerCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         InfoCollege infoCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computerCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>infoCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        OutPutImpl outPutImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutPutImpl</span><span class="token punctuation">(</span>collegeList<span class="token punctuation">)</span><span class="token punctuation">;</span>         outPutImpl<span class="token punctuation">.</span><span class="token function">printCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>对象之间多对一依赖的一种设计方案，被依赖的对象为 Subject，依赖的对象为 Observer，Subject<br>通知 Observer 变化。比如这里的奶站是 Subject，是 1 的一方。用户时是Observer，是多的一方。</p><p>被观察者(subject)需要至少三个操作：添加观察者，删除观察者，通知观察者。观察者(observer)需要有一个更新的操作。</p><p>在JDK源码中<code>class Observerable</code>有应用，作用相当于Subject，是一个类，通过集成来实现观察者模式。<code>Observer</code>的作用相当于Observer。</p><p><strong>优点</strong></p><ol><li>以集合的方式管理观察者，增加观察者不需要修改核心类代码，符合ocp原则</li></ol><p><strong>缺点</strong></p><ol><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口, 让 WeatherData 来实现</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><p>/**</p><ul><li><p>类是核心</p></li><li><ol><li>包含最新的天气情况信息</li></ol></li><li><ol start="2"><li>含有 观察者集合，使用 ArrayList 管理</li></ol></li><li><ol start="3"><li>当数据有更新时，就主动的调用    ArrayList, 通知所有的（接入方）就看到最新的信息</li></ol></li><li><p>/<br>public class WeatherData implements Subject {<br>  private float temperatrue;<br>  private float pressure;<br>  private float humidity;<br>  private ArrayList<Observer> observers; //观察者集合</p><p>  public WeatherData() {</p><pre><code>  observers = new ArrayList&lt;Observer&gt;();</code></pre><p>  }</p><p>  public float getTemperature() { return temperatrue;}<br>  public float getPressure() { return pressure;}<br>  public float getHumidity() { return humidity;}</p><p>  public void dataChange() {</p><pre><code>  //调用接入方的 update  notifyObservers();</code></pre><p>  }</p><p>  //当数据有更新时，就调用 setData<br>  public void setData(float temperature, float pressure, float humidity) { </p><pre><code>  this.temperatrue = temperature;  this.pressure = pressure; this.humidity = humidity;     //调用dataChange，将最新的信息推送给接入方currentConditions  dataChange();</code></pre><p>  }</p><p>  //注册一个观察者<br>  @Override<br>  public void registerObserver(Observer o) {</p><pre><code>  observers.add(o);</code></pre><p>  }</p><p>  //移除一个观察者<br>  @Override<br>  public void removeObserver(Observer o) {</p><pre><code>  observers.remove(o);</code></pre><p>  }</p><p>  //遍历所有的观察者，并通知<br>  @Override<br>  public void notifyObservers() {</p><pre><code>  for(int i = 0; i &lt; observers.size(); i++)       observers.get(i).update(temperatrue, pressure, humidity);</code></pre><p>  }</p></li></ul><p>}</p><p>//观察者接口，有观察者来实现<br>public interface Observer {<br>    public void update(float temperature, float pressure, float humidity);<br>}</p><p>public class CurrentConditions implements Observer {<br>    // 温度，气压，湿度<br>    private float temperature;<br>    private float pressure; private float humidity;</p><pre><code>// 更新 天气情况，是由 WeatherData 来调用，我使用推送模式public void update(float temperature, float pressure, float humidity) &#123;     this.temperature = temperature;    this.pressure = pressure;     this.humidity = humidity;     display();&#125;// 显 示public void display() &#123;    System.out.println(&quot;***Today mTemperature: &quot; + temperature + &quot;***&quot;);     System.out.println(&quot;***Today mPressure: &quot; + pressure + &quot;***&quot;);     System.out.println(&quot;***Today mHumidity: &quot; + humidity + &quot;***&quot;);&#125;</code></pre><p>}</p><p>public class BaiduSite implements Observer {<br>    // 温度，气压，湿度<br>    private float temperature;<br>    private float pressure;<br>    private float humidity;</p><pre><code>//  更新天气情况，是由  WeatherData  来调用，我使用推送模式public void update(float temperature, float pressure, float humidity) &#123;    this.temperature = temperature;    this.pressure = pressure;     this.humidity = humidity;     display();&#125;// 显 示public void display() &#123;    System.out.println(&quot;===百度网站====&quot;);    System.out.println(&quot;***百度网站 气温 : &quot; + temperature + &quot;***&quot;);    System.out.println(&quot;***百度网站 气压: &quot; + pressure + &quot;***&quot;);    System.out.println(&quot;***百度网站 湿度: &quot; + humidity + &quot;***&quot;);&#125;</code></pre><p>}</p><p>public class Client {<br>    public static void main(String[] args) {<br>        //创建一个 WeatherData<br>        WeatherData weatherData = new WeatherData();<br>        //创建观察者<br>        CurrentConditions currentConditions = new CurrentConditions();<br>        BaiduSite baiduSite = new BaiduSite();<br>        // 注 册 到 weatherData<br>        weatherData.registerObserver(currentConditions);<br>        weatherData.registerObserver(baiduSite);</p><pre><code>    // 测试                                                             System.out.println(&quot;通知各个注册的观察者, 看看信息&quot;);     weatherData.setData(10f, 100f, 30.3f);    weatherData.removeObserver(currentConditions);    System.out.println();    System.out.println(&quot;通知各个注册的观察者, 看看信息&quot;);     weatherData.setData(10f, 100f, 30.3f);&#125;</code></pre><p>}</p><pre><code>### 中介者模式用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。&lt;img src=&quot;mediator.jpg&quot;&gt;1)    Mediator 就是抽象中介者，定义了同事对象到中介者对象的接口2)    Colleague 是抽象同事类3)    ConcreteMediator 具体的中介者对象，实现抽象方法，他需要知道所有的具体的同事类，即以一个集合来管理，并接受某个同事对象消息，完成相应的任务4)    ConcreteColleague 具体的同事类，会有很多，每个同事只知道自己的行为， 而不了解其他同事类的行为(方法)， 但是他们都依赖中介者对象在MVC中有使用。**优点**1. 对网状结构进行解耦，符合迪米特原则**缺点**1. 中介者承担过多责任，如果出现问题，整个系统都会受到影响```javapublic abstract class Mediator &#123;    //将给中介者对象，加入到集合中    public abstract void Register(String colleagueName, Colleague colleague);    //接收消息, 具体的同事对象发出    public abstract void GetMessage(int stateChange, String colleagueName);    public abstract void SendMessage();&#125;//具体的中介者类public class ConcreteMediator extends Mediator &#123;    //集合，放入所有的同事对象    private HashMap&lt;String, Colleague&gt; colleagueMap;    private HashMap&lt;String, String&gt; interMap;    public ConcreteMediator() &#123;        colleagueMap = new HashMap&lt;String, Colleague&gt;();         interMap = new HashMap&lt;String, String&gt;();    &#125;    @Override    public void Register(String colleagueName, Colleague colleague) &#123;           colleagueMap.put(colleagueName, colleague);        if (colleague instanceof Alarm)             interMap.put(&quot;Alarm&quot;, colleagueName);        else if (colleague instanceof CoffeeMachine)             interMap.put(&quot;CoffeeMachine&quot;, colleagueName);        else if (colleague instanceof TV)             interMap.put(&quot;TV&quot;, colleagueName);        else if (colleague instanceof Curtains)              interMap.put(&quot;Curtains&quot;, colleagueName);    &#125;    //1. 根据得到消息，完成对应任务    //2. 中介者在这个方法，协调各个具体的同事对象，完成任务    @Override    public void GetMessage(int stateChange, String colleagueName) &#123;        //处理闹钟发出的消息        if (colleagueMap.get(colleagueName) instanceof Alarm) &#123;             if (stateChange == 0) &#123;                ((CoffeeMachine) (colleagueMap.get(interMap.get(&quot;CoffeeMachine&quot;)))).StartCoffee();            ((TV) (colleagueMap.get(interMap.get(&quot;TV&quot;)))).StartTv();            &#125; else if (stateChange == 1) &#123;                ((TV) (colleagueMap.get(interMap.get(&quot;TV&quot;)))).StopTv();            &#125;        &#125; else if (colleagueMap.get(colleagueName) instanceof CoffeeMachine)             ((Curtains) (colleagueMap.get(interMap.get(&quot;Curtains&quot;)))).UpCurtains();        else if (colleagueMap.get(colleagueName) instanceof TV) &#123;            //如果 TV 发现消息        &#125; else if (colleagueMap.get(colleagueName) instanceof Curtains) &#123;            //如果是以窗帘发出的消息，这里处理...        &#125;    &#125;&#125;//具体的同事类public class Alarm extends Colleague &#123;    //构造器    public Alarm(Mediator mediator, String name) &#123;        super(mediator, name);        //在创建 Alarm 同事对象时，将自己放入到 ConcreteMediator 对象中[集合]         mediator.Register(name, this);    &#125;    public void SendAlarm(int stateChange) &#123;         SendMessage(stateChange);    &#125;    @Override    public void SendMessage(int stateChange) &#123;        // 调 用 的 中 介 者 对 象 的 getMessage         this.GetMediator().GetMessage(stateChange, this.name);    &#125;&#125;public class CoffeeMachine extends Colleague &#123;    public CoffeeMachine(Mediator mediator, String name) &#123;         super(mediator, name);                               mediator.Register(name, this);    &#125;    @Override    public void SendMessage(int stateChange) &#123;        this.GetMediator().GetMessage(stateChange, this.name);    &#125;    public void StartCoffee() &#123;         System.out.println(&quot;It&#39;s time to startcoffee!&quot;);    &#125;    public void FinishCoffee() &#123;        System.out.println(&quot;After 5 minutes!&quot;);         System.out.println(&quot;Coffee is ok!&quot;); SendMessage(0);    &#125;&#125;//同事抽象类public abstract class Colleague &#123;    private Mediator mediator;     public String name;    public Colleague(Mediator mediator, String name) &#123;        this.mediator = mediator;         this.name = name;    &#125;    public Mediator GetMediator() &#123;         return this.mediator;    &#125;    public abstract void SendMessage(int stateChange);&#125;public class Curtains extends Colleague &#123;    public Curtains(Mediator mediator, String name) &#123;         super(mediator, name);        mediator.Register(name, this);    &#125;    @Override    public void SendMessage(int stateChange) &#123;        this.GetMediator().GetMessage(stateChange, this.name);    &#125;    public void UpCurtains() &#123;        System.out.println(&quot;I am holding Up Curtains!&quot;);    &#125;&#125;public class TV extends Colleague &#123;    public TV(Mediator mediator, String name) &#123;         super(mediator, name);        mediator.Register(name, this);    &#125;    @Override    public void SendMessage(int stateChange) &#123;        this.GetMediator().GetMessage(stateChange, this.name);    &#125;    public void StartTv() &#123;        System.out.println(&quot;It&#39;s time to StartTv!&quot;);    &#125;    public void StopTv() &#123;        System.out.println(&quot;StopTv!&quot;);    &#125;&#125;public class ClientTest &#123;    public static void main(String[] args) &#123;        //创建一个中介者对象        Mediator mediator = new ConcreteMediator();        Alarm alarm = new Alarm(mediator, &quot;alarm&quot;);        CoffeeMachine coffeeMachine = new CoffeeMachine(mediator, &quot;coffeeMachine&quot;);        Curtains curtains = new Curtains(mediator, &quot;curtains&quot;);        TV tV = new TV(mediator, &quot;TV&quot;);        //让闹钟发出消息        alarm.SendAlarm(0);         coffeeMachine.FinishCoffee();         alarm.SendAlarm(1);    &#125;&#125;</code></pre><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><img src="memo.jpg"><ol><li>originator :  对象(需要保存状态的对象)</li><li>Memento ： 备忘录对象，负责保存好记录，即Originator 内部状态</li><li>Caretaker: 守护者对象，负责保存多个备忘录对象，使用集合管理，提高效率</li><li>说明：如果希望保存多个 originator 对象的不同时间的状态，需要 HashMap &lt;String, 集合&gt;</li></ol><p><strong>优点</strong></p><ol><li>提供恢复机制，用户可以回到历史状态</li><li>实现封装，不暴露细节</li><li>可以配合原型模式使用</li></ol><p><strong>缺点</strong></p><ol><li>消耗内存过多</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//状态信息</span>    <span class="token keyword">public</span> String <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>String state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存一个状态对象Memento</span>    <span class="token keyword">public</span> Memento <span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过备忘录对象，恢复状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStateFromMemento</span><span class="token punctuation">(</span>Memento memento<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         state <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> String state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Memento</span><span class="token punctuation">(</span>String state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在 List 集合中会有很多的备忘录对象</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Memento<span class="token operator">></span> mementoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Memento<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Memento memento<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         mementoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取到第 index 个 Originator 的 备忘录对象(即保存状态) </span>    <span class="token keyword">public</span> Memento <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mementoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Originator originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Caretaker caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">" 状态#1  攻击力 100 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存了当前的状态</span>        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">" 状 态 #2 攻 击 力 80 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">" 状 态 #3 攻 击 力 50 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前的状态是 ="</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//希望得到状态 1, 将 originator 恢复到状态 1 </span>        originator<span class="token punctuation">.</span><span class="token function">getStateFromMemento</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复到状态 1，"</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>是指给定一个语言(表达式)，定义它的文法的一种表示，并定义一个解释器， 使用该解释器来解释语言中的句子(表达式)。</p><img src="interpret.jpg"><ol><li>Context: 是环境角色，含有解释器之外的全局信息.</li><li>AbstractExpression: 抽象表达式， 声明一个抽象的解释操作，为抽象语法树中所有节点所共享</li><li>TerminalExpression: 为终结符表达式，实现与文法中的终结符相关的解释操作</li><li>NonTermialExpression: 为非终结符表达式，为文法中的非终结符实现解释操作</li><li>说明： 通过 Client输入Context和TerminalExpression信息</li></ol><p>在Spring框架中<code>org.springframework.expression.Expression.SpelExpressionParser</code>有应用。SpelExpressionParser继承了TemplateAwareExpressionParser，而TemplateAwareExpressionParser实现了ExpressionParser接口。</p><p>Expression接口是我们的抽象表达式。是用的时候，根据创建的不同parser对象返回不同的Expression对象。</p><p><strong>优点</strong></p><ol><li>具有良好的扩展性</li></ol><p><strong>缺点</strong></p><ol><li>容易出现类爆炸</li><li>采用递归调用方法，将会导致调试非常复杂、效率可能降低</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *    抽象类表达式，通过 HashMap 键值对,可以获取到变量的值 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Expression</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// a + b - c</span>    <span class="token comment" spellcheck="true">// 解释公式和数值, key是表达式，参数[a,b,c], value是具体值</span>    <span class="token comment" spellcheck="true">// HashMap &amp;#123;a=10, b=20&amp;#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> var<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    变量的解释器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String key<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key=a,key=b,key=c</span>    <span class="token keyword">public</span> <span class="token function">VarExpression</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// interpreter 根据 变量名称，返回对应值</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> var<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> var<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    抽象运算符号解析器: 每个运算符号，都只和自己左右两个数字有关系， *    但左右两个数字有可能也是一个解析的结果，无论何种类型，都是 Expression 类的实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbolExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> Expression left<span class="token punctuation">;</span>     <span class="token keyword">protected</span> Expression right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SymbolExpression</span><span class="token punctuation">(</span>Expression left<span class="token punctuation">,</span> Expression right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为SymbolExpression是让其子类来实现，因此 interpreter 是一个默认实现</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> var<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/***    加法解释器*    @author Administrator**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AddExpression</span><span class="token punctuation">(</span>Expression left<span class="token punctuation">,</span> Expression right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//处理相加</span>    <span class="token comment" spellcheck="true">//var 仍然是 &amp;#123;a=10,b=20&amp;#125;..</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> var<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//super.left.interpreter(var): 返回 left 表达式对应的值 a = 10</span>        <span class="token comment" spellcheck="true">//super.right.interpreter(var): 返回 right 表达式对应值 b = 20</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SubExpression</span><span class="token punctuation">(</span>Expression left<span class="token punctuation">,</span> Expression right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求出 left 和 right  表达式相减后的结果</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> var<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义表达式</span>    <span class="token keyword">private</span> Expression expression<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数传参，并解析</span>    <span class="token keyword">public</span> <span class="token function">Calculator</span><span class="token punctuation">(</span>String expStr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// expStr = a+b</span>        <span class="token comment" spellcheck="true">// 安排运算先后顺序</span>        Stack<span class="token operator">&lt;</span>Expression<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表达式拆分成字符数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [a, +, b]</span>        Expression left <span class="token operator">=</span> null<span class="token punctuation">;</span>         Expression right <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历我们的字符数组，即遍历[a, +, b]，针对不同的情况做处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">switch</span> <span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//</span>                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//构建 AddExpresson，加入stack</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//</span>                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token comment" spellcheck="true">//如果是一个 Var 就创建要给 VarExpression 对象，并 push 到 stack</span>                    String var <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当遍历完整个charArray数组后，stack就得到最后Expression </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">run</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> var<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最后将表达式 a+b 和 var = &amp;#123;a=10,b=20&amp;#125;</span>        <span class="token comment" spellcheck="true">//然后传递给 expression 的 interpreter 进行解释执行</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String expStr <span class="token operator">=</span> <span class="token function">getExpStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a+b</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> var <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>expStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var &amp;#123;a=10, b=20&amp;#125;</span>        Calculator calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span>expStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运算结果："</span> <span class="token operator">+</span> expStr <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> calculator<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获得表达式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getExpStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入表达式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获得值映射</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">getValue</span><span class="token punctuation">(</span>String expStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> expStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'+'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换。一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类。</p><ol><li>Context 类为环境角色,  用于维护 State 实例,这个实例定义当前状态</li><li>State 是抽象状态角色,定义一个接口封装与 Context  的一个特点接口相关行为</li><li>ConcreteState 具体的状态角色，每个子类实现一个与 Context 的一个状态相关行为</li></ol><p><strong>优点</strong></p><ol><li>增强代码可读性，将每个状态行为封装到一个类，方便维护</li><li>符合开闭原则</li></ol><p><strong>缺点</strong></p><ol><li>容易出现类爆炸</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *    状态抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 扣除积分</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否抽中奖品</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发放奖品</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span>    <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    不能抽奖状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoRaffleState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化时传入活动引用，扣除积分后改变其状态</span>    RaffleActivity activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NoRaffleState</span><span class="token punctuation">(</span>RaffleActivity activity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前状态可以扣积分, 扣除后，将状态设置成可以抽奖状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"扣除50积分成功，您可以抽奖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getCanRaffleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前状态不能抽奖</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"扣了积分才能抽奖喔！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前状态不能发奖品</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能发放奖品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    可以抽奖的状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanRaffleState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RaffleActivity activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CanRaffleState</span><span class="token punctuation">(</span>RaffleActivity activity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//已经扣除了积分，不能再扣 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经扣取过了积分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//可以抽奖, 抽完奖后，根据实际情况，改成新的状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在抽奖，请稍等！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 10%中奖机会</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 改 变 活 动 状 态 为 发 放 奖 品 context </span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getDispenseState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾没有抽中奖品！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 改变状态为不能抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不能发放奖品</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没中奖，不能发放奖品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    发放奖品的状态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispenseState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化时传入活动引用，发放奖品后改变其状态</span>    RaffleActivity activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DispenseState</span><span class="token punctuation">(</span>RaffleActivity activity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能扣除积分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能抽奖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发放奖品 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜中奖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 改变状态为不能抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾，奖品发送完了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 改变状态为奖品发送完毕, 后面我们就不可以抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getDispensOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println("抽奖活动结束");</span>            <span class="token comment" spellcheck="true">//System.exit(0);</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    奖品发放完毕状态 *    说明，当我们 activity 改变成 DispenseOutState， 抽奖活动结束 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispenseOutState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化时传入活动引用</span>    RaffleActivity activity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DispenseOutState</span><span class="token punctuation">(</span>RaffleActivity activity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖品发送完了，请下次再参加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖品发送完了，请下次再参加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖品发送完了，请下次再参加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    抽奖活动 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RaffleActivity</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// state 表示活动当前的状态，是变化</span>    State state <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 奖品数量</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 四个属性，表示四种状态</span>    State noRafflleState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoRaffleState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     State canRaffleState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanRaffleState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    State dispenseState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispenseState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     State dispensOutState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispenseOutState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token comment" spellcheck="true">//1. 初始化当前的状态为 noRafflleState（即不能抽奖的状态）</span>    <span class="token comment" spellcheck="true">//2. 初始化奖品的数量</span>    <span class="token keyword">public</span> <span class="token function">RaffleActivity</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//扣分, 调用当前状态的 deductMoney </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debuctMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        state<span class="token punctuation">.</span><span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抽奖</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前的状态是抽奖成功</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//领取奖品</span>            state<span class="token punctuation">.</span><span class="token function">dispensePrize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> State <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>State state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curCount <span class="token operator">=</span> count<span class="token punctuation">;</span>         count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> curCount<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> State <span class="token function">getNoRafflleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> noRafflleState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNoRafflleState</span><span class="token punctuation">(</span>State noRafflleState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>noRafflleState <span class="token operator">=</span> noRafflleState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> State <span class="token function">getCanRaffleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> canRaffleState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCanRaffleState</span><span class="token punctuation">(</span>State canRaffleState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>canRaffleState <span class="token operator">=</span> canRaffleState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> State <span class="token function">getDispenseState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> dispenseState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDispenseState</span><span class="token punctuation">(</span>State dispenseState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>dispenseState <span class="token operator">=</span> dispenseState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> State <span class="token function">getDispensOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> dispensOutState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDispensOutState</span><span class="token punctuation">(</span>State dispensOutState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>dispensOutState <span class="token operator">=</span> dispensOutState<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    状态模式测试类 */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建活动对象，奖品有 1 个奖品</span>        RaffleActivity activity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RaffleActivity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 我们连续抽 30 次奖</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"次抽奖----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 参加抽奖，第一步点击扣除积分</span>            activity<span class="token punctuation">.</span><span class="token function">deductMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第二步抽奖</span>            activity<span class="token punctuation">.</span><span class="token function">raffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>定义算法族（策略组），分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。体现了三个设计原则，第一、把变化的代码从不变的代码中分离出来；第二、针对接口编程而不是具体类（定义策略接口）；第三、多用组合/聚合，少用继承（客户通过组合方式使用策略）。</p><img src="strategy.jpg"><p>在JDK源码Array有应用。Comparator中的sort方法使用了策略模式。</p><p><strong>优点</strong></p><ol><li>体现ocp原则</li><li>将算法封装在独立的strategy类中，使得程序员可以独立于其context改变它，易于扩展</li></ol><p><strong>缺点</strong></p><ol><li>容易出现类爆炸</li></ol><p><strong>案例</strong></p><p>有各种鸭子（野鸭、北京鸭等）， 鸭子有各种行为（叫、飞行等)；显示鸭子的信息。</p><p>传统解决方案如下。</p><p>缺陷：对超类的局部改动，会影响其他部分，会有溢出效应。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示鸭子信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子嘎嘎叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子会飞翔~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PekingDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~北京鸭~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为北京鸭不能飞翔，因此需要重写 fly </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭不能飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToyDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要重写父类的所有方法 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不能叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会飞翔~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 这是野鸭 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>改进方案如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        WildDuck wildDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         wildDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PekingDuck pekingDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PekingDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         pekingDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ToyDuck toyDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         toyDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态改变某个对象的行为, 北京鸭不能飞</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">setFlyBehavior</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭的实际飞翔能力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pekingDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FlyBehavior</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  子类具体实现</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 飞翔技术高超 ~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BadFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 飞翔技术一般 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 不会飞翔    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuackBehavior</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类实现</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//属性, 策略接口</span>    FlyBehavior flyBehavior<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其它属性&lt;->策略接口</span>    QuackBehavior quackBehavior<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子嘎嘎叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//改进</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flyBehavior <span class="token operator">!=</span> null<span class="token punctuation">)</span>             flyBehavior<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlyBehavior</span><span class="token punctuation">(</span>FlyBehavior flyBehavior<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>flyBehavior <span class="token operator">=</span> flyBehavior<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setQuackBehavior</span><span class="token punctuation">(</span>QuackBehavior quackBehavior<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>quackBehavior <span class="token operator">=</span> quackBehavior<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PekingDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//假如北京鸭可以飞翔，但是飞翔技术一般 </span>    <span class="token keyword">public</span> <span class="token function">PekingDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~北京鸭~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToyDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不能叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭不会游泳~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器，传入 FlyBehavor 的对象</span>    <span class="token keyword">public</span>    <span class="token function">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        flyBehavior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 这是野鸭 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="责任链模式-Chain-of-Responsibility-Pattern"><a href="#责任链模式-Chain-of-Responsibility-Pattern" class="headerlink" title="责任链模式 Chain of Responsibility Pattern"></a>责任链模式 Chain of Responsibility Pattern</h3><p>为请求创建了一个接收者对象的链(简单示意图)。这种模式对请求的发送者和接收者进行解耦。职责链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。应用场景包括有多个对象可以处理同一个请求时，比如：多级请求、请假/加薪等审批流程、Java Web 中 Tomcat对 Encoding 的处理、拦截器。</p><img src = "responsibility.jpg"><ol><li>Handler是抽象的处理者,  定义了一个处理请求的接口,  同时含有另外 Handler</li><li>ConcreteHandlerA , B  是具体的处理者, 处理它自己负责的请求， 可以访问它的后继者(即下一个处理者),  如果可以处理当前请求，则处理，否则就将该请求交个后继者去处理，从而形成一个职责链</li><li>Request表示一个请求，含有很多属性</li></ol><p>在SpringMVC的Handler中有应用。springmvc 请求的流程图中，执行了拦截器相关方法 <code>interceptor.preHandler()</code> 等等。在处理 SpringMvc 请求时，使用到职责链模式和适配器模式。HandlerExecutionChain 主要负责的是请求拦截器的执行和请求处理，但是他本身不处理请求，只是将请求分配给链上注册处理器执行，这是职责链实现方式；减少职责链本身与处理逻辑之间的耦合，规范了处理流程。HandlerExecutionChain 维护了HandlerInterceptor 的集合，可以向其中注册相应的拦截器。</p><p><strong>优点</strong></p><ol><li>将请求和处理分开，实现解耦，提高系统的灵活性</li><li>简化了对象，对象不需要知道链的结构</li></ol><p><strong>缺点</strong></p><ol><li>在链比较长的时候，性能会受到影响，需控制链中最大节点数量，一般通过在 Handler 中设置一个最大节点数量，在 setNext()方法中判断是否已经超过阀值，超过则不允许该链建立。</li><li>调试不方便。采用了类似递归的方式，调试时逻辑可能比较复杂</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DispatcherServlet</span><span class="token comment" spellcheck="true">//说明</span><span class="token comment" spellcheck="true">/**    protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &amp;#123;*    HandlerExecutionChain mappedHandler = null;*    mappedHandler = getHandler(processedRequest);//获取到 HandlerExecutionChain 对象*    //在 mappedHandler.applyPreHandle内部得到HandlerInterceptor interceptor*    //调用了拦截器的    interceptor.preHandle*    if (!mappedHandler.applyPreHandle(processedRequest, response)) &amp;#123; return;&amp;#125;//说明：mappedHandler.applyPostHandle 方法内部获取到拦截器，并调用//拦截器的    interceptor.postHandle(request, response, this.handler, mv);mappedHandler.applyPostHandle(processedRequest, response, mv);*    &amp;#125;***    //说明：在    mappedHandler.applyPreHandle 内部中，*    还调用了    triggerAfterCompletion 方法，该方法中调用了*    HandlerInterceptor interceptor = getInterceptors()[i];     try &amp;#123;        interceptor.afterCompletion(request, response, this.handler, ex);    &amp;#125;    catch (Throwable ex2) &amp;#123;        logger.error("HandlerInterceptor.afterCompletion threw exception", ex2);    &amp;#125;*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//请求类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PurchaseRequest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求类型</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求金额</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PurchaseRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">float</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Approver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Approver approver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下一个处理者，类似链表的next指针</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Approver</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下一个处理者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApprover</span><span class="token punctuation">(</span>Approver approver<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>approver <span class="token operator">=</span> approver<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//处理审批请求的方法，得到一个请求, 处理是子类完成，因此该方法做成抽象</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>PurchaseRequest purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DepartmentApprover</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>PurchaseRequest purchaseRequest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5000</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号id = "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollegeApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CollegeApprover</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>PurchaseRequest purchaseRequest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5000</span> <span class="token operator">&amp;&amp;</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">)</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号id = "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViceSchoolMasterApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ViceSchoolMasterApprover</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>PurchaseRequest purchaseRequest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span> <span class="token operator">&amp;&amp;</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30000</span><span class="token punctuation">)</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号id = "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolMasterApprover</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SchoolMasterApprover</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>PurchaseRequest purchaseRequest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30000</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号id = "</span> <span class="token operator">+</span> purchaseRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             approver<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个请求</span>        PurchaseRequest purchaseRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建相关的审批人</span>        DepartmentApprover departmentApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepartmentApprover</span><span class="token punctuation">(</span><span class="token string">"张主任"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CollegeApprover collegeApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollegeApprover</span><span class="token punctuation">(</span><span class="token string">"李院长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ViceSchoolMasterApprover viceSchoolMasterApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViceSchoolMasterApprover</span><span class="token punctuation">(</span><span class="token string">"王副校"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SchoolMasterApprover schoolMasterApprover <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolMasterApprover</span><span class="token punctuation">(</span><span class="token string">"佟校长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要将各个审批级别的下一个设置好 (处理人构成环形: ) </span>        departmentApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>collegeApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>         collegeApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>viceSchoolMasterApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>         viceSchoolMasterApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>schoolMasterApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>         schoolMasterApprover<span class="token punctuation">.</span><span class="token function">setApprover</span><span class="token punctuation">(</span>departmentApprover<span class="token punctuation">)</span><span class="token punctuation">;</span>        departmentApprover<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                 viceSchoolMasterApprover<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>《尚硅谷Java设计模式》 by 韩顺平， <a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></li><li><a href="https://www.cnblogs.com/yxlblogs/p/9183318.html">https://www.cnblogs.com/yxlblogs/p/9183318.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sleep wait yield</title>
      <link href="/Blog/2020/08/16/sleep-wait-yield/"/>
      <url>/Blog/2020/08/16/sleep-wait-yield/</url>
      
        <content type="html"><![CDATA[<p>sleep、wait和yield都是暂停线程的方法。</p><h1 id="定义的类"><a href="#定义的类" class="headerlink" title="定义的类"></a>定义的类</h1><p>sleep()和yield()方法是定义在Thread类中，而wait()方法是定义在Object类中。</p><h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h1><p>在Java中Sleep方法有两个，一个只有一个毫秒参数，另一个有毫秒和纳秒两个参数。</p><pre class=" language-java"><code class="language-java"><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>是一个静态方法，让当前执行的线程(而不是调用sleep的线程)sleep指定的时间。  </li><li>不会释放锁  </li><li>如果其他的线程中断了一个休眠的线程，sleep方法会抛出Interrupted Exception  </li><li>休眠的线程在唤醒之后会先进入就绪态runnable，不保证能获取到CPU   </li></ol><h1 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h1><p>实现线程间通信，应在同步代码块中调用。  </p><ol><li>是一个实例方法，并且只能在其他线程调用本实例的notify()方法时被唤醒。  </li><li>会释放锁   </li><li>通常有条件地执行，线程会一直处于wait状态，直到某个条件变为真  </li></ol><h1 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h1><p>释放线程所占有的CPU资源，从而让其他线程有机会运行，但是不能保证某个特定的线程能够获得CPU资源。<br>谁能获得CPU完全取决于调度器，在有些情况下调用yield方法的线程甚至会再次得到CPU资源。  </p><ol><li>让优先级大于等于执行yield的线程的线程有机会执行。 </li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.jianshu.com/p/25e959037eed">https://www.jianshu.com/p/25e959037eed</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 15 sequence</title>
      <link href="/Blog/2020/08/16/hands-on-15-sequence/"/>
      <url>/Blog/2020/08/16/hands-on-15-sequence/</url>
      
        <content type="html"><![CDATA[<h1 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h1><p>RN: recurrent neuron</p><p>RNN has connections pointing backward. At time step t, RN receives the inputs $x_t$ as well as its own output from the previous time step, $y_{(t-1)}$. Thus, each RN has two sets of weights. We can represent it against the time axis (unrolling the network through time). </p><h3 id="Memory-Cells"><a href="#Memory-Cells" class="headerlink" title="Memory Cells"></a>Memory Cells</h3><p>A part of a NN that preserves some state across time steps is called a memory cell. RN is capable of learning short patterns. </p><h3 id="Input-and-Output-Sequences"><a href="#Input-and-Output-Sequences" class="headerlink" title="Input and Output Sequences"></a>Input and Output Sequences</h3><p>An RNN can simultaneously take a seq of inputs and produce a seq of outputs. This type of seq-to-seq network is useful for predicting time series. </p><p>Alternatively, we can ignore all outputs except for the last one. This seq-to-vec network can be used to tackle classification/regression problem. </p><p>Conversely, we can feed the network the input vec at each time step and let it output a seq. This vect-to-seq network can be used to tackle problems like sequence generating (e.g., outputting a caption for an image). </p><h3 id="Forecasting"><a href="#Forecasting" class="headerlink" title="Forecasting"></a>Forecasting</h3><p>Univariate: one value per time step </p><p>BPTT: backprop through time. </p><p>We are using a time series generated by generate_time_series() as an example. </p><pre class=" language-Python"><code class="language-Python">def generate_time_series(batch_size, n_steps):    freq1, freq2, offset1, offset2 = np.random.rand(4, batch_size, 1)    time = np.linspace(0, 1, n_steps)    series = 0.5 * np.sin((time-offset1)*(freq1*10+10))    series += 0.2 * np.sin((time-offset2)*(freq2*10+20))    series += 0.1 * (np.random.rand(batch_size, n_steps)-0.5)    return series[...,np.newaxis].astype(np.float32)</code></pre><p>The input features are generally represented as 3D arrays [batch size, time steps, dimensionality]. </p><p>Create a training set. </p><pre class=" language-python"><code class="language-python">n_steps <span class="token operator">=</span> <span class="token number">50</span>seres <span class="token operator">=</span> generate_time_eries<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> n_steps<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>xtrain<span class="token punctuation">,</span> ytrain <span class="token operator">=</span> seres<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7000</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>n_steps<span class="token punctuation">]</span><span class="token punctuation">,</span> seires<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>xval<span class="token punctuation">,</span> yval <span class="token operator">=</span> seres<span class="token punctuation">[</span><span class="token number">7000</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>n_steps<span class="token punctuation">]</span><span class="token punctuation">,</span> seires<span class="token punctuation">[</span><span class="token number">7000</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>xtest<span class="token punctuation">,</span> ytest <span class="token operator">=</span> seres<span class="token punctuation">[</span><span class="token number">9000</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>n_steps<span class="token punctuation">]</span><span class="token punctuation">,</span> seires<span class="token punctuation">[</span><span class="token number">9000</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="Baseline-Metrics"><a href="#Baseline-Metrics" class="headerlink" title="Baseline Metrics"></a>Baseline Metrics</h3><p>The simplest approach is to predict the last value in each series (naive forecasting), which is surprisingly difficult to outperform. </p><pre class=" language-python"><code class="language-python">y_pred <span class="token operator">=</span> xval<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>losses<span class="token punctuation">.</span>mean_squared_error<span class="token punctuation">(</span>yval<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Another simple approach is to use a fully connected network. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Simple-RNN"><a href="#Simple-RNN" class="headerlink" title="Simple RNN"></a>Simple RNN</h3><p>We do not need to specify the length of the input sequences. To process any number of time steps, we set the first input dimension to None. </p><p>Use a tanh activation funciton by default. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>SimpleRNN<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Deep-RNN"><a href="#Deep-RNN" class="headerlink" title="Deep RNN"></a>Deep RNN</h3><p>Stack. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>SimpleRNN<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>SimpleRNN<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>SimpleRNN<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Make sure to set <strong>return_sequences</strong> to True for all recurrent layers except the last one (if only care about the last output). </p><p>Note that the last layer has only a single unit, because we want to forecast a univariate time series. This means we must have a single output value per time step. We can replace it with a Dense layer. </p><h3 id="Forecasting-Several-Time-Steps-Ahead"><a href="#Forecasting-Several-Time-Steps-Ahead" class="headerlink" title="Forecasting Several Time Steps Ahead"></a>Forecasting Several Time Steps Ahead</h3><p>We can predict the next 10 steps just like below. </p><pre class=" language-python"><code class="language-python">series <span class="token operator">=</span> generate_time_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n_steps<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span>X_new<span class="token punctuation">,</span> Y_new <span class="token operator">=</span> series<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>n_steps<span class="token punctuation">]</span><span class="token punctuation">,</span> sries<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> n_steps<span class="token punctuation">:</span><span class="token punctuation">]</span>X <span class="token operator">=</span> X_new<span class="token keyword">for</span> step_ahead <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred_one <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> step_ahead<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span> y_pred_one<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Y_pred <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> n_steps<span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre><p>The prediction for the next step will usually be more accurate than the predictions for later time steps, since the errs might accumulate. </p><p>We can also train RNN to predict all 10 next val at once. </p><pre class=" language-python"><code class="language-python">series <span class="token operator">=</span> generate_time_series<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> n_steps<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span>xtrain<span class="token punctuation">,</span> ytrain <span class="token operator">=</span> series<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7000</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>n_steps<span class="token punctuation">]</span><span class="token punctuation">,</span> series<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>xval<span class="token punctuation">,</span> yval <span class="token operator">=</span> series<span class="token punctuation">[</span><span class="token number">7000</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>n_steps<span class="token punctuation">]</span><span class="token punctuation">,</span> series<span class="token punctuation">[</span><span class="token number">7000</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>xtest<span class="token punctuation">,</span> ytest <span class="token operator">=</span> series<span class="token punctuation">[</span><span class="token number">9000</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>n_steps<span class="token punctuation">]</span><span class="token punctuation">,</span> series<span class="token punctuation">[</span><span class="token number">9000</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>model <span class="token operator">=</span> Sequentail<span class="token punctuation">(</span><span class="token punctuation">[</span>    SimpleRNN<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    SimpleRNN<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Instead of training the model to forecast the next 10 values only at very last time step, we can train it to forecast the next 10 values at each time step. This will stabilize and speed up training. </p><p>At t=0, the model will output a vector containing the forecasts for time steps 1 to 10. At t=1, it will forecast steps 2 to 11. </p><pre class=" language-python"><code class="language-python">Y <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> n_steps<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> step_ahead <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> step_ahead<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> series<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> step_ahead<span class="token punctuation">:</span>step_ahead<span class="token operator">+</span>n_steps<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>Ytrain <span class="token operator">=</span> Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7000</span><span class="token punctuation">]</span>Yval <span class="token operator">=</span> Y<span class="token punctuation">[</span><span class="token number">7000</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">]</span>Ytest <span class="token operator">=</span> Y<span class="token punctuation">[</span><span class="token number">9000</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre><p>This turns our model into seq-to-seq model. We must apply the output Dense layer at every time step. In Keras, <code>TimeDistributed</code> layer wraps any layer (e.g., a Dense layer) and applies it at every time step of its input seq. It reshapes the input from [batch size, time steps, input dim] to [batch size*time steps, input dim]. Finally, it reshapes the outputs back to seq. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequentail<span class="token punctuation">(</span><span class="token punctuation">[</span>    SimpleRNN<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    SimpleRNN<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>All outputs are needed during training, but only the output at the last time step is useful for predictions and evaluation. We need a custom metric for eval. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">last_step_mse</span><span class="token punctuation">(</span>ytrue<span class="token punctuation">,</span> ypred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> keras<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>mean_squred_error<span class="token punctuation">(</span>ytrue<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ypred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>optm <span class="token operator">=</span> Adam<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"mse"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optm<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span>last_step_mse<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>When forecasting time series, it is often useful to have some error bars along with predictions. An efficient tech is MC Dropout. </p><h1 id="Long-Seq"><a href="#Long-Seq" class="headerlink" title="Long Seq"></a>Long Seq</h1><h3 id="Fighting-Unstable-Gradients"><a href="#Fighting-Unstable-Gradients" class="headerlink" title="Fighting Unstable Gradients"></a>Fighting Unstable Gradients</h3><p>If we notice that training is unstable, we may want to monitor the size of the gradients (using TensorBoard) and perhaps use Gradient Clipping. </p><p>Batch Normalization cannot be used as efficiently with RNNs as with deep feedforward nets. It is slightly better when applied between recurrent layers, but not within recurrent layers (horizontally).</p><p>Layer Normalization works better. It normalizes across the feature dimension. It can compute the required stat on the fly at each time step independently for each instance. It behaves the same during training and testing.  </p><p>We can implement Layer Normalization within a simple mem cell. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LNRNNCell</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> units<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"tanh"</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state_size <span class="token operator">=</span> units        self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> units        self<span class="token punctuation">.</span>simple_rnn_cell <span class="token operator">=</span> SimpleRNNCell<span class="token punctuation">(</span>units<span class="token punctuation">,</span> activation<span class="token operator">=</span>None<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer_norm <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>LayerNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>activation <span class="token operator">=</span> keras<span class="token punctuation">.</span>activations<span class="token punctuation">.</span>get<span class="token punctuation">(</span>activation<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> states<span class="token punctuation">)</span><span class="token punctuation">:</span>        outputs<span class="token punctuation">,</span> new_states <span class="token operator">=</span> self<span class="token punctuation">.</span>simple_rnn_cell<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> states<span class="token punctuation">)</span>        norm_outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layer_norm<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> norm_outputs<span class="token punctuation">,</span> <span class="token punctuation">[</span>norm_outputs<span class="token punctuation">]</span></code></pre><p>We create a <code>SimpleRNNCell</code> with no activation function, because we want to perform LN after the linear operation but before the activation function. The outputs for SimpleRNNCell are just equal to the hidden states. To use this custom cell, all we need is create a keras.layers.RNN layer. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    RNN<span class="token punctuation">(</span>LNSimpleRNNCell<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    RNN<span class="token punctuation">(</span>LNSimpleRNNCell<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Similarly, we can create a custom cell to apply dropout between each time step. But all recurrent layers except for keras.layers.RNN layer provided by Keras have a dropout hyperparameter and a recurrent_dropout hyperparam: the former defines the dropout rate to apply to the inputs at each time step, and the latter defines the dropout rate for the hidden states. </p><h3 id="Tackle-Short-Term-Mem"><a href="#Tackle-Short-Term-Mem" class="headerlink" title="Tackle Short Term Mem"></a>Tackle Short Term Mem</h3><h4 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h4><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    LSTM<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LSTM<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Alternatively, we can use the general-purpose keras.layers.RNN layer. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    RNN<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    RNN<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>The LSTM uses an optimized implementation when running on a GPU. So, in general it is preferable to use it. </p><p>It has two states: $h_t$ and $c_t$, short-term state and long-term state respectively. </p><img src="1501.PNG" height="300" width="500"><p>When long term states $c_{t-1}$ traverses the network, it first goes through a forget gate, dropping some mem, and then it adds some new mem via the addition operation. The result is  $c_t$, which is sent w/o further transformation. After the addition operation, the long-term state is copied and passed thru the tanh func, and then the result is filtered by the output gate, which produce short timer mem $h_t$. </p><p>Now let’s look at where new mem comes from and how gates work. </p><p>First, the current input vec $x_t$ and the previous short term state  $h_{t-1}$ are fed to four different fully connected layers. </p><ol><li>The main layer is the one that outputs $g_t$. It is the same as in any other basic cell. In LSTM, this layer’s output does not go straight out, but its most important parts are stored in the long term state. </li><li>The three other layers are gate controllers. They use logistic activation func, their outputs range from 0 to 1. They output 0s meaning close the gate, otherwise open the gate. The forget gate controls which parts of the long-term state should be erase. The input gate controls which parts of $g_t$ should be added to the long-term state. The output gate controls which parts of the long-term state should be read and output at this time step, both the $h_t$ and to $y_t$. </li></ol><h4 id="Peehole-connections"><a href="#Peehole-connections" class="headerlink" title="Peehole connections"></a>Peehole connections</h4><p>It may be a good idea to give LSTM a bit more context by letting them peek at the long-term state as well. Peehole connections is an extra connections. </p><p>In Keras, the LSTM layer does not support peepholes. The experimental tf.keras.experimental.PeepholeLSTMCell does. </p><h4 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h4><p>The Gated Recurrent Unit. </p><img src="1502.PNG" height="300" width="500"><p>Simplified version of LSTM. </p><p>Both state vectors are merged into a single vector $h_t$. A single gate controller $z_t$ controls both the forget gate and input gate. If the gate controller outputs 1, the forget gate is open and input gate is closed. In other words, whenever a mem must be stored, the location where it will be stored is erased first. There is not output gate, but there is a new gate controller $r_t$ controlling which part of the previous state will be shown to the main layer $g_t$. </p><h4 id="1D-Conv-Layers"><a href="#1D-Conv-Layers" class="headerlink" title="1D Conv Layers"></a>1D Conv Layers</h4><p>The methods above try to learn long-term patterns. This tech tries to reduce input seq length. </p><p>A 1D conv layer slides several kernels across a seq, producing a 1D feature map per kernel. Each kernel will learn to detect a single very short seq pattern. The example below downsamples the input seq by a factor of 2 using a stride=2. The kernel size is larger than the stride, so all inputs will be used to compute the layer’s output. Note we must also crop off the first three time steps in the targets (kernel_size=4, the first output of the conv layer will be based on the input time steps 0 to 3). </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Conv1D<span class="token punctuation">(</span>filters<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> kernal_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"valid"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    GRU<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    GRU<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"mse"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"adam"</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span>last_time_step_mse<span class="token punctuation">]</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrian<span class="token punctuation">,</span> ytrain<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">(</span>xval<span class="token punctuation">,</span> yval<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="WaveNet"><a href="#WaveNet" class="headerlink" title="WaveNet"></a>WaveNet</h4><p>Stacked 1D conv layers, doubling the dilation rate at every layer. This way, the lower layers learn short term patterns, while the higher layers learn long term patterns. </p><p>In WaveNet paper, they stacked 10 conv layers with dilation rates of 1~512, then repeat 3 such blocks. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>InputLayer<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> rate <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv1D<span class="token punctuation">(</span>filters<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"causal"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> dilation_rate<span class="token operator">=</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv1D<span class="token punctuation">(</span>filters<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"mse"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"adam"</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span>last_step_mse<span class="token punctuation">]</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">(</span>xval<span class="token punctuation">,</span> yval<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>“causal” padding ensures that the conv layer does not peek into the future when making predictions (equivalent to padding the inputs with right amount of zeros on the left and using valid padding).  </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 03 classification</title>
      <link href="/Blog/2020/08/16/hands-on-03-classification/"/>
      <url>/Blog/2020/08/16/hands-on-03-classification/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nlp industrial application</title>
      <link href="/Blog/2020/08/16/nlp-industrial-application/"/>
      <url>/Blog/2020/08/16/nlp-industrial-application/</url>
      
        <content type="html"><![CDATA[<h1 id="Brief-History"><a href="#Brief-History" class="headerlink" title="Brief History"></a>Brief History</h1><h3 id="NNLM"><a href="#NNLM" class="headerlink" title="NNLM"></a>NNLM</h3><p>neural network probabilistic language model. Bengio, 2003. </p><p>简介：三层神经网络模型。用前n-1个词来预测当前词。该模型会学习到（1）词汇的分布式表达（2）通过学习到的分布式表达构建概率函数。</p><p>通过这种方式训练出来的语言模型具有很强的泛化能力，对于训练语料里没有出现过的句子，模型能够通过见过的相似词组成的相似句子来学习。</p><p>意义：统一了NLP的特征形式embedding。</p><h3 id="Word2vec"><a href="#Word2vec" class="headerlink" title="Word2vec"></a>Word2vec</h3><p>Mikolov, 2013. </p><p>简介：线性模型。局部表示（Local Representation）中，每一个元素（如词向量中的一个元素、神经网络中的一个神经元）表示一个实体（词汇）；而在分布式表示（Distributed Representation）中，一个实体（词汇）是由多个元素表征的，同样，一个元素也不仅只涉及到一个实体。基于分布式表示的思想，我们构建一个密集向量（Dense Vector）来表征一个词汇。</p><p>CBOW和Skip-gram是Word2vec的两种不同训练方式。CBOW指抠掉一个词，通过上下文预测该词；Skip-gram则与CBOW相反，通过一个词预测其上下文。</p><p>意义：不再需要针对特定任务从头训练模型，可以先在大规模预料上进行预训练，再迁移。</p><h3 id="FastText"><a href="#FastText" class="headerlink" title="FastText"></a>FastText</h3><p>Mikolov, 2016.</p><p>简介：与CBOW模型相似，但有所不同：各个词的embedding向量，补充字级别的n-gram特征向量，然后将这些向量求和平均，用基于霍夫曼树的分层softmax函数，输出对应的类别标签。</p><p>引入subword n-gram的概念解决词态变化的问题，利用字级别的n-gram信息捕获字符间的顺序关系，依次丰富单词内部更细微的语义；二是用基于霍夫曼树的分层softmax函数，将计算复杂度从O(kh)降低到O(h log2(k))，其中，k是类别个数，h是文本表示的维数。 </p><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>Vaswani, 2017. </p><p>简介：</p><ol><li><p>multi-head attention多头注意力</p><p>由scaled dot-product attention单元堆叠而成。把注意力表达成Q(query), K(key), V(value)三元组，分别表示待生成序列、输入序列、和权重。</p></li><li><p>feed-forward network</p><p>通过多头注意力后，经过一个NN，增加网络非线性。添加了像resNet一样的shortcut连接。为了更好地优化深度网络，每个子层都加了残差连接并归一化处理。</p></li><li><p>position encoding</p><p>引入position encoding表达每个词在原始句子中的位置信息。</p></li></ol><p>意义：统一了NLP处理不同任务的模型。支持并行（RNN在t时刻需要依赖t-1的值，很难并行）。解决了长距离依赖。</p><h3 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h3><p>Devlin, 2018. </p><p>简介：采用transformer中encoder的双向结构。在输入端除了有token embedding和position embedding之外，还加上了segment embedding用来处理双句任务。预训练包括两种操作：随机掩盖句子中词语，进行预测；用前一个句子预测下一个句子。</p><p>意义：统一了NLP的特征形式embedding。</p><h1 id="机器翻译"><a href="#机器翻译" class="headerlink" title="机器翻译"></a>机器翻译</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>编码器+解码器。</p><p>注意力模型。多一个或者少一个标点有可能引起译文端的剧烈变化。</p><h3 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h3><p>blue</p><p>和参考译文对比。n元的串匹配度。</p><p>PPL</p><h3 id="困难点"><a href="#困难点" class="headerlink" title="困难点"></a>困难点</h3><ol><li><p>歧义和未知现象</p><p>黑夜总会过去。新产生的词。</p></li><li><p>直译和意译</p><p>青梅竹马（不是表面意思）。</p></li><li><p>翻译解不唯一</p><p>缺乏量化标准</p></li><li><p>翻译的高度</p><p>和原语言的切合度。意境。</p></li></ol><h3 id="交互式翻译"><a href="#交互式翻译" class="headerlink" title="交互式翻译"></a>交互式翻译</h3><ol><li>接受用户干预，生成更好的结果</li><li>学习用户的修改反馈</li><li>实时提供翻译辅助信息</li></ol><p>译后编辑、约束解码规则、翻译输入法（打最少的字母输出整句）、在线学习、翻译记忆（需要翻译的句子包含之前人工翻译过的子串）</p><h3 id="翻译纠错"><a href="#翻译纠错" class="headerlink" title="翻译纠错"></a>翻译纠错</h3><ol><li>将语言错误归类，采用Maxent和SVM进行识别</li><li>借鉴统计机器翻译的思想，将错误语句翻译成为正确语句</li></ol><h4 id="中文错误类型"><a href="#中文错误类型" class="headerlink" title="中文错误类型"></a>中文错误类型</h4><p>形似、音似导致的用词错误，多/少字，乱序，常识</p><h4 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h4><p><strong>错误检测</strong></p><p>识别输入句子可能存在的问题，采用序列表示（Transfomer)+CRF的序列预测模型</p><p>优点：应用句法分析等语言先验知识；结合大量统计特征；多粒度融合</p><p><strong>候选召回</strong></p><p>结合用户历史错误行为和音形等特点进行纠错。可分为离线的候选挖掘和在线的候选预排序。</p><p>优点：多来源多粒度</p><p><strong>纠错排序</strong></p><p>基于音形、词法、语义、用户行为等特征学习原词和候选词的多维度距离。保证正确结果的唯一性。</p><h4 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h4><p><strong>语言知识</strong></p><p>对语言规则的学习。语言模型的训练。</p><p><strong>上下文理解</strong></p><p>需要解决长依赖问题。</p><p><strong>知识计算</strong></p><p>客观规律。</p><h3 id="机器阅读理解-MRC"><a href="#机器阅读理解-MRC" class="headerlink" title="机器阅读理解 MRC"></a>机器阅读理解 MRC</h3><p>给定上下文c和问题q得到答案a。问答的答案线索已经存在于一些文档当中，直接抽取有用信息，提升效率。</p><h4 id="关键步骤-1"><a href="#关键步骤-1" class="headerlink" title="关键步骤"></a>关键步骤</h4><p><strong>片段定位</strong></p><p>针对问题召回候选文档段落集合。</p><p><strong>输入预处理</strong></p><p>特征预计算。</p><p><strong>在线预测服务</strong></p><p>模型加载和服务驱动。</p><p><strong>后处理机制</strong></p><p>动态规划选取最佳文本短语作为输出。</p><h4 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h4><p>跨领域：fully shared model + specific shared model</p><p>跨语言：小语种数据少。混合语言。</p><h1 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h1><h3 id="困难点-1"><a href="#困难点-1" class="headerlink" title="困难点"></a>困难点</h3><ol><li>知识管理痛点。知识点缺乏关联，需要维护大量相似问题。</li><li>语言理解难点。迁移到新领域难以复用原有领域的训练语料。</li><li>模型无法进行推理。</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>引入知识图谱</p><p>将实体归纳为实体类型。“上海”归纳为城市类。将标准问题归纳成属性。“有多少人口”映射到属性常住人口。抽取实体-属性-值（三元组）。</p></li><li><p>改进语言理解算法</p><p>semantic parsing算法。包括seq2seq的端到端方案，传统的semantic parsing方案，和多阶段的融合深度学习的semantic parsing方案。</p></li></ol><p>一言以蔽之：将文档数据、用户的查询、存储的答案结构化。</p><p><strong>AMR (Abstract Meaning Representation)</strong></p><p>将句子中的词抽象为概念。最终的语义表达式与原始句没有直接对应关系。</p><p><strong>AMRL (Alexa Meaning Representation Language)</strong></p><p>亚马逊提出。主要应用于任务型场景。</p><p><strong>KAMR (Knowledge-driven Abstract Meaning Representation)</strong></p><p>本质上是有向无环图。主要由Ontology和Language构成。着力解决语言的歧义性、复杂性、复用性、模糊性。</p><p><strong>Semantic Parser</strong></p><p>pipeline。实体识别-属性分类-约束绑定-重排序。每一步都可以比较容易地进行人工干预，精确度高。在实体识别中，可以识别不连续的序列标签（专有名词被其他修饰语隔开，比如：“大流量58元套餐”中的“58元”）。属性识别就是意图分类，其中的查询包括(domain, predicate, target, query type)。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="构建途径"><a href="#构建途径" class="headerlink" title="构建途径"></a>构建途径</h3><h4 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h4><p>知识图谱的过程、时空、多模态语义增强。单纯基于符号去理解世界的能力是有限的。要把图片、声音、视频化的认知体验与相应符号结合。</p><p>与其他知识表示的协同机制与办法。很多领域没有太多数据和知识图谱，但是积累了丰富的专家知识，通常是规则库。知识图谱可以和这些规则库进行模型整合。</p><p>个性化表示。原生的图模式，或者RDF（resource description framework)，或者主谓宾的形式表示。人具有主观性，需要合理控制不同视角下的不同图谱。比如龙在东方多为褒义而在西方则带有凶恶的贬义。</p><h4 id="知识补全"><a href="#知识补全" class="headerlink" title="知识补全"></a>知识补全</h4><p>利用已有的知识进行反推。比如A的老公是B，可以推出B的老婆是A。</p><p>低成本知识获取机制，主要指无监督或者弱监督、小样本。</p><p>多粒度知识获取。支撑不同级别的应用。</p><p>大规模学习常识。发展瓶颈在于常识。人人都知道，所以不会明说，这些知识不会存在与数据中，机器难以学习。</p><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><p>将知识补全到图谱中。主要是一些新产生的词、代号等等。也包括从用户的对话中抽取信息，比如用户说明天是我的生日，可以知道用户的生日。</p><h4 id="知识更新"><a href="#知识更新" class="headerlink" title="知识更新"></a>知识更新</h4><p>状态的更新。比如某个公司CEO卸任。</p><h4 id="应用透明化"><a href="#应用透明化" class="headerlink" title="应用透明化"></a>应用透明化</h4><p>用户的参与其实就是最大成本。模型学习到的无数隐式特征，能不能用图谱中的符号化的知识、路径或者概念去解释。</p><h3 id="隐变量模型-LatentFactorModel"><a href="#隐变量模型-LatentFactorModel" class="headerlink" title="隐变量模型 LatentFactorModel"></a>隐变量模型 LatentFactorModel</h3><p>LFM模型提出基于关系的双线性变换，刻画实体和关系的二阶联系。评分函数：$f_r(h,t) = l_h^TM_rl_t$。其中M是关系r对应的双线性变换矩阵。</p><h3 id="张量神经模型-Neural-Tensor-Network"><a href="#张量神经模型-Neural-Tensor-Network" class="headerlink" title="张量神经模型 Neural Tensor Network"></a>张量神经模型 Neural Tensor Network</h3><p>用双线性张量取代传统NN中的线性变换，在不同维度下将头、尾实体向量联系起来。</p><p><strong>缺点</strong></p><ol><li>计算复杂度高</li><li>需要样本多</li><li>大规模稀疏知识图谱上的效果比较差</li></ol><h3 id="社区发现"><a href="#社区发现" class="headerlink" title="社区发现"></a>社区发现</h3><h4 id="Louvain"><a href="#Louvain" class="headerlink" title="Louvain"></a>Louvain</h4><p>社区发现算法。尽可能提升模块度（衡量社区紧密度的标准）。希望社区内边多，外边少，即社区更聚集。</p><h2 id="对话平台"><a href="#对话平台" class="headerlink" title="对话平台"></a>对话平台</h2><p>架构图：自然语言理解NLU -&gt; 对话管理DM -&gt; 自然语言生成NLG</p><h3 id="NLU"><a href="#NLU" class="headerlink" title="NLU"></a>NLU</h3><h4 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h4><p>无样本、小样本、多样本</p><h4 id="小样本处理方案"><a href="#小样本处理方案" class="headerlink" title="小样本处理方案"></a>小样本处理方案</h4><p>Memory-based Induction Network</p><p>模仿人类的记忆和类比能力。</p><p>Induction Network</p><p>把样本向量抽象到类向量。</p><h3 id="DM"><a href="#DM" class="headerlink" title="DM"></a>DM</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ol><li>业务建模：对不同行业不同场景的业务进行抽象。用户说、机器思考、机器说分别对应三个基础节点：触发节点、函数节点、回复节点。设计双层状态机，上层是对话逻辑，底层是一套通用的对话引擎（解耦）。</li><li>鲁棒性：应对未定义的通用对话需求和异常情况，包括打断恢复、模糊澄清、个性化拒识、信息修改。</li><li>持续学习的能力：在交互中学习，根据用户反馈调整对话策略。</li></ol><h4 id="Dialog-State-Tracking-DST"><a href="#Dialog-State-Tracking-DST" class="headerlink" title="Dialog State Tracking (DST)"></a>Dialog State Tracking (DST)</h4><ol><li>多智能体建模：除了跟用户交互，还跟多个外部服务交互</li><li>追踪变量：外部返回的结果会存储在变量中</li><li>slot-value假设：不一定离散可枚举</li><li>追踪次数：不限制</li></ol><h4 id="Dialogue-Policy-Optimization-DPO"><a href="#Dialogue-Policy-Optimization-DPO" class="headerlink" title="Dialogue Policy Optimization (DPO)"></a>Dialogue Policy Optimization (DPO)</h4><p>给用户推荐排名最高的结果。</p><h3 id="NLG"><a href="#NLG" class="headerlink" title="NLG"></a>NLG</h3><h4 id="用户模拟器"><a href="#用户模拟器" class="headerlink" title="用户模拟器"></a>用户模拟器</h4><p>有三部分组成：User State Tracker, User Policy，和User Model。</p><h4 id="对话诊断"><a href="#对话诊断" class="headerlink" title="对话诊断"></a>对话诊断</h4><p>利用一个机器人诊断另一个机器人。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><strong>任务型对话 TaskBot</strong></p><p>询问天气、订票服务。</p><p><strong>问答机器人QABot</strong></p><p>主要是一问一答。但是也有多轮对话。</p><p>基于知识图谱的KBQA。</p><p>基于非机构化的网页只是来抽取答案的DeepQA。</p><p><strong>闲聊机器人ChatBot</strong></p><p>技术上难度最高。主要有检索式和基于深度学习的生成式。检索式对话模型流畅性好，生成式对话模型多样性强。</p><h3 id="知识结构化"><a href="#知识结构化" class="headerlink" title="知识结构化"></a>知识结构化</h3><h4 id="模式层"><a href="#模式层" class="headerlink" title="模式层"></a>模式层</h4><p>定义类型、属性、值和关系。属性支持子属性（层级关系）。值可以支持多种类型，比如text, key-value, 和compound value type。</p><h4 id="实体层"><a href="#实体层" class="headerlink" title="实体层"></a>实体层</h4><p>对模式层的实例化。“实体-属性-值”或者“实体-关系-实体”进行建模。</p><h4 id="领域词（短语挖掘）"><a href="#领域词（短语挖掘）" class="headerlink" title="领域词（短语挖掘）"></a>领域词（短语挖掘）</h4><p>Wide统计特征:  频率、凝聚度、自由度</p><p>Deep语义特征：字向量、词向量、基于词向量的内部相似度</p><h4 id="KBQA"><a href="#KBQA" class="headerlink" title="KBQA"></a>KBQA</h4><p>knowledge based question answering。着重解决实体类知识回答。</p><h4 id="EBQA"><a href="#EBQA" class="headerlink" title="EBQA"></a>EBQA</h4><p>Event-Based Question Answering. 除了给出精确答案，还需要解释为什么。支持假设性的事件问答。</p><p>事件识别  -&gt; 属性识别。</p><h3 id="提高对话质量"><a href="#提高对话质量" class="headerlink" title="提高对话质量"></a>提高对话质量</h3><p>万能回复没有信息量。通过人工设置一些控制技术，使回答包含指定内容。</p><p>使用attention结构解决多轮聊天上下文无关的问题。</p><p>多轮对话过程是动态变化的，不能用单轮的贪心方式来建模多轮过程。</p><p>引入个性化信息提高对话的多样性。机器人说话风格可以存在差异。</p><h2 id="查询理解"><a href="#查询理解" class="headerlink" title="查询理解"></a>查询理解</h2><h4 id="难点和解决方案"><a href="#难点和解决方案" class="headerlink" title="难点和解决方案"></a>难点和解决方案</h4><ol><li>输入错误。纠错模块。</li><li>表达冗余。计算每一个词的重要程度term weight。</li><li>存在语义鸿沟。需要对原始query做同义词拓展。</li></ol><h3 id="召回系统"><a href="#召回系统" class="headerlink" title="召回系统"></a>召回系统</h3><p>基于词的传统的倒排索引召回</p><p>基于向量的向量索引召回</p><h4 id="Query-Term-Weight"><a href="#Query-Term-Weight" class="headerlink" title="Query Term Weight"></a>Query Term Weight</h4><p>IDF词典+语境动态调整。</p><h4 id="同义词拓展"><a href="#同义词拓展" class="headerlink" title="同义词拓展"></a>同义词拓展</h4><p>同义词词表。训练word embedding模型，利用embedding的值计算相关度。</p><h4 id="Query改写"><a href="#Query改写" class="headerlink" title="Query改写"></a>Query改写</h4><p>将用户的查询，改成更容易检索出答案的query，减小多个任务的损失。把改写问题看成是src和target是同一种语言的翻译问题。</p><p>传统的基于上下文的query改写包括两种方式：(1)将上下文关键词抽取出来，和当前查询做一个组合；这种方法会对序列产生较大影响，可能会忽略某些信息，比如否定类的词。(2)通过sequence建模，把上下文和query放到统一模型中得到向量；这种方法需要的计算资源很大。</p><p><strong>步骤</strong></p><ol><li>使用pointwise mutual information算法根据查询和回复，抽取上下文中与其共现概率最大的若干词作为关键词</li><li>使用语言模型将这些信息插入到query中，计算插入不同位置的得分，使用beam search生成分数较高的句子</li><li>使用复制网络copy net来学习回复的先验知识，改善模型训练</li><li>使用强化学习</li></ol><h2 id="意图理解"><a href="#意图理解" class="headerlink" title="意图理解"></a>意图理解</h2><p>了解客户需求（意图识别），细分到不同业务领域（属性抽取）。如果领域不能明确，可以跟用户进行一轮澄清。</p><p>与槽填充不是相互独立的，可以利用共有的知识，应该进行联合建模。</p><h3 id="模型迭代"><a href="#模型迭代" class="headerlink" title="模型迭代"></a>模型迭代</h3><ol><li>搜集业务数据，打标签</li><li>模型训练</li><li>对样本进行预测</li><li>对也测样本进行标注，选出错误和难分开的样本</li><li>重新训练</li></ol><h3 id="情绪回复能力"><a href="#情绪回复能力" class="headerlink" title="情绪回复能力"></a>情绪回复能力</h3><p>理解情绪+表达情绪</p><p>对最常用的7类情绪（委屈、恐惧、着急、失望、愤怒、辱骂、感谢）模型训练出单独的分类模型。</p><p>还可以做客服质量检测（有没有反怼、讽刺客户的现象）。</p><p>整段对话的标签可能不适用于整段对话的其中一部分（投诉电话不一定全程激动）。弱标签学习。</p><h3 id="对话设计"><a href="#对话设计" class="headerlink" title="对话设计"></a>对话设计</h3><ol><li>问问题的方式很重要</li><li>如果有可能，多提供一些信息，但是不要太过</li><li>使用个性化信息：用户地理位置</li><li>让机器人有记忆</li></ol><h2 id="信息抽取"><a href="#信息抽取" class="headerlink" title="信息抽取"></a>信息抽取</h2><p>将非结构化的文本信息转换成为结构化的信息。主要包括命名实体识别(NER)、关系抽取(RE)、事件抽取。</p><h3 id="命名实体识别-NER"><a href="#命名实体识别-NER" class="headerlink" title="命名实体识别(NER)"></a>命名实体识别(NER)</h3><p>主要用RNN进行encode。在预测的时候，用CRF做序列标注。</p><h3 id="关系抽取-RE"><a href="#关系抽取-RE" class="headerlink" title="关系抽取(RE)"></a>关系抽取(RE)</h3><p>两种思路。第一种是pipeline，先进行NER，在进行RE。第二种是joint，通过共享参数，把两者联系在一起。encode既包含CNN相关，也包含RNN相关。</p><p>难点：</p><ol><li>处理层级关系</li><li>准确率问题</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>问题编码。问题使用双向lstm并加入答案的attention编码。</li><li>答案编码。答案本身编码，答案到实体的关系编码，答案类型编码，答案上下文编码。</li></ol><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><h4 id="实体爆炸"><a href="#实体爆炸" class="headerlink" title="实体爆炸"></a>实体爆炸</h4><p>将实体与用户资源关联起来，并且把实体汇聚起来。</p><p>标品：区别不同商品类别的属性。（条形码、名称、规格）</p><p>同构非标品：相同本体下要求某些特定属性相同（青岛啤酒）。</p><p>易购纯概念：先天并不存在，完全由人类自行组织构建从而形成的认知（北京一日游）。</p><h4 id="非连通查询"><a href="#非连通查询" class="headerlink" title="非连通查询"></a>非连通查询</h4><p>存在属性传递，也就是传递约束条件。例子：有不有下午4点复联四的票？（拍片时间并不是电影的一个直接属性）。</p><p>使用实体关系路径游走。在离线状态下将这些关系补全，减少之后查询的压力。</p><h4 id="融合上下文"><a href="#融合上下文" class="headerlink" title="融合上下文"></a>融合上下文</h4><p>改造理解层、生成层和输出层适配多轮交互模块。解耦KBQA内部组件使之可独立被外部模块调用。</p><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h3 id="范式1"><a href="#范式1" class="headerlink" title="范式1"></a>范式1</h3><p>Embed：单词、字符、词性、位置。</p><p>Encode：CNN，RNN，Transformer</p><p>Attend：sum, product</p><p>Predict：classification, seq labeling, seq2seq(翻译、摘要)</p><h3 id="范式2"><a href="#范式2" class="headerlink" title="范式2"></a>范式2</h3><p>pre-train: BERT等算法在大数据量上进行预训练。</p><p>fine-tune: 针对特定任务进行微调。</p><p>Predict：classification, seq labeling, seq2seq(翻译、摘要)。</p><h1 id="信息流推荐"><a href="#信息流推荐" class="headerlink" title="信息流推荐"></a>信息流推荐</h1><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>门户时代。数据较少，可以通过人工对内容类型进行整理，以频道页的形式满足用户需求。</p><p>搜索/社交时代。搜索要知道文章是关于什么的，可以用关键词进行解决。难以克服实体歧义问题。知识图谱部分解决了这一问题。</p><p>智能时代。个性化推荐。推荐和搜索的区别。推荐需要说清楚文章是是什么，如果仅仅以词粒度作为用户兴趣点，会缺少原文此关系。另外推荐需要了解为什么，要有推理的能力。</p><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>item的维度：语言识别、质量控制、时效控制</p><p>用户兴趣：分类、标签、关键词、主题</p><p>热点挖掘：多源新闻热点挖掘</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ol><li>语言多</li><li>任务多</li><li>样本少</li><li>人才少</li></ol><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把语言相关的在NLP中解决，下游一系列任务可以去语言化，算法能够通用。在样本迁移中，把小语种翻译为三大语种，用大语种模型做分类。</p><p>MUSE：多源词向量对齐方法。</p><p>基于BERT的迁移文本分类。先用大规模的单一语料做预训练，再接一些任务的调整。</p><p>ML-SSC (multi-label semi-supervised clustering)。弱样本依赖模型。零样本要求，能够快速通用覆盖，且泛化性好。但是细标签不够准确。</p><p>做不依赖于NLP基础建设的用户显示的兴趣挖掘。</p><p>简历隐式用户画像。</p><h3 id="兴趣点图谱"><a href="#兴趣点图谱" class="headerlink" title="兴趣点图谱"></a>兴趣点图谱</h3><h4 id="分类层"><a href="#分类层" class="headerlink" title="分类层"></a>分类层</h4><p>一般由PM建设，树状结构。解决了人工运营需求。</p><h4 id="概念层"><a href="#概念层" class="headerlink" title="概念层"></a>概念层</h4><p>有相同属性的一类实体称之为概念，比如老人机。推理用户消费的真实意图。</p><h4 id="实体层-1"><a href="#实体层-1" class="headerlink" title="实体层"></a>实体层</h4><p>知识图谱中的实体，比如iphone11。兴趣点的召回。</p><h4 id="事件层"><a href="#事件层" class="headerlink" title="事件层"></a>事件层</h4><p>刻画某一个事件，比如iPhone 11发布会。刻画文章内容。</p><h3 id="热门事件挖掘"><a href="#热门事件挖掘" class="headerlink" title="热门事件挖掘"></a>热门事件挖掘</h3><p>根据事件搜索量变化趋势判断。Burst Region Detection (BRD)判断时间序列上面是否有爆发点。</p><p>可以用DTW算法进行热门识别。</p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>如果两个实体经常在同一篇文章中，很有可能是高关联的。但是没有共现过的，也有可能是高关联的。共现的作为正例，负样本采用同类实体随机负采样。正负样本比例1:3。</p><h1 id="虚拟生命"><a href="#虚拟生命" class="headerlink" title="虚拟生命"></a>虚拟生命</h1><p>加入多模态交互：语音、手势、视觉。</p><h3 id="个性化语音合成"><a href="#个性化语音合成" class="headerlink" title="个性化语音合成"></a>个性化语音合成</h3><p>前处理，端到端的深度学习算法，vocoder技术，后处理。汉语多种音调的处理。</p><h3 id="人脸重建"><a href="#人脸重建" class="headerlink" title="人脸重建"></a>人脸重建</h3><p>分两个工作流。上面做3D模型，下面做shader渲染。</p><h1 id="视频内容理解"><a href="#视频内容理解" class="headerlink" title="视频内容理解"></a>视频内容理解</h1><h3 id="细粒度视频内容分割"><a href="#细粒度视频内容分割" class="headerlink" title="细粒度视频内容分割"></a>细粒度视频内容分割</h3><p>把场景、前景、片尾、字幕、音乐分开。<br>logo识别、字幕检测</p><h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><p>场景和物品。事件和行为。</p><p>定义一套Taxonomy分类标准。在给定数据源生成标签，再进行处理。做多个算法的模块质量评估。模型融合。</p><h3 id="内容生成"><a href="#内容生成" class="headerlink" title="内容生成"></a>内容生成</h3><p>精彩片段推荐。视频摘要。探索性项目。</p><h3 id="内容向量"><a href="#内容向量" class="headerlink" title="内容向量"></a>内容向量</h3><p>实际上是创造一个embedding。</p><h1 id="模型性能问题"><a href="#模型性能问题" class="headerlink" title="模型性能问题"></a>模型性能问题</h1><h3 id="离散且大小不定的用户请求"><a href="#离散且大小不定的用户请求" class="headerlink" title="离散且大小不定的用户请求"></a>离散且大小不定的用户请求</h3><p>不易batch运算。</p><p>解决方案：service streamer。将服务请求排队组成完整batch。</p><h1 id="学术和业界区别"><a href="#学术和业界区别" class="headerlink" title="学术和业界区别"></a>学术和业界区别</h1><table><thead><tr><th align="left"></th><th>学术</th><th>业界</th></tr></thead><tbody><tr><td align="left">问题定义</td><td>明确</td><td>模糊</td></tr><tr><td align="left">数据</td><td>规范</td><td>脏</td></tr><tr><td align="left">模型</td><td>优雅、创新</td><td>需要制定人工规则</td></tr><tr><td align="left">评价指标</td><td>比较固定</td><td>以产品为导向</td></tr><tr><td align="left">工程</td><td>调试到结果满意即可</td><td>不断迭代</td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li>《自然语言处理技术在业界的应用实践合集》by DataFunTalk</li><li><a href="https://zhuanlan.zhihu.com/p/58931044">https://zhuanlan.zhihu.com/p/58931044</a></li><li><a href="https://zhuanlan.zhihu.com/p/69269702">https://zhuanlan.zhihu.com/p/69269702</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipc</title>
      <link href="/Blog/2020/08/16/ipc/"/>
      <url>/Blog/2020/08/16/ipc/</url>
      
        <content type="html"><![CDATA[<p>进程通信。Inter Process Communication. </p><h1 id="管道-Pipe"><a href="#管道-Pipe" class="headerlink" title="管道 Pipe"></a>管道 Pipe</h1><p>实质：内核缓冲区。</p><p>进程以先进先出的方式从缓冲区存取数据，管道一端的进程顺序的将数据写入缓冲区，另一端的进程则顺序的读出数据。  </p><p>当缓冲区读空或者写满时，有一定的规则控制相应的读进程或者写进程进入等待队列，<br>当空的缓冲区有新数据写入或者满的缓冲区有数据读出来时，就唤醒等待队列中的进程继续读写。  </p><p>优点：</p><ol><li>简单  </li><li>确保数据被其他进程拿走  </li></ol><p>缺点：  </p><ol><li>单向传播  </li><li>效率低下   </li><li>只能传送无格式字节流，要求传输双方事先约定格式  </li><li>不能进行定位读写  </li></ol><h2 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h2><p>使用”|”。只能是有亲缘关系的进程之间进行通信。    </p><h2 id="命名管道"><a href="#命名管道" class="headerlink" title="命名管道"></a>命名管道</h2><p>有名管道的名字存在于文件系统中，内容存放在内存中。    </p><pre><code>mkfifo pipecho &quot;context hello world&quot; &gt; pip  # writecat &lt; pip  # read </code></pre><p>等到管道内容被读取，写命令才结束。</p><h1 id="信号-Signal"><a href="#信号-Signal" class="headerlink" title="信号 Signal"></a>信号 Signal</h1><p>异步通信方式。</p><p>Linux系统中常用信号：<br>（1）SIGHUP：用户从终端注销，所有已启动进程都将收到该进程。系统缺省状态下对该信号的处理是终止进程。<br>（2）SIGINT：程序终止信号。程序运行过程中，按Ctrl+C键将产生该信号。<br>（3）SIGQUIT：程序退出信号。程序运行过程中，按Ctrl+\键将产生该信号。<br>（4）SIGBUS和SIGSEGV：进程访问非法地址。<br>（5）SIGFPE：运算中出现致命错误，如除零操作、数据溢出等。<br>（6）SIGKILL：用户终止进程执行信号。shell下执行kill -9发送该信号。<br>（7）SIGTERM：结束进程信号。shell下执行kill 进程pid发送该信号。<br>（8）SIGALRM：定时器信号。<br>（9）SIGCLD：子进程退出信号。如果其父进程没有忽略该信号也没有处理该信号，则子进程退出后将形成僵尸进程。  </p><p>信号来源：  </p><ul><li>硬件来源：用户按键输入Ctrl+C退出、硬件异常如无效的存储访问等。  </li><li>软件终止：终止进程信号、其他进程调用kill函数、软件异常产生信号。  </li></ul><p>优点：</p><ol><li>信号可以在任何时候发给某一进程，而无需知道该进程的状态。  </li></ol><h1 id="消息队列-Message-Queue"><a href="#消息队列-Message-Queue" class="headerlink" title="消息队列 Message Queue"></a>消息队列 Message Queue</h1><p>存放在内核（匿名管道是存放在内存）中的消息链表，每个消息队列由消息队列标识符表示。<br>生产者、消费者。  </p><p>两种类型的消息队列：POSIX消息队列以及System V消息队列。</p><p>优点：</p><ol><li>解耦：生产者只负责写数据，谁来取不需要关心</li><li>异步：无需等待其他进程读取马上返回</li><li>限流：避免系统因为请求高并发崩溃   </li><li>实现消息的随机查询  </li></ol><p>缺点：  </p><ol><li>发送消息太慢（进行拷贝）</li><li>如何保证高可用  </li><li>数据存储问题  </li><li>消息的重复消费  </li></ol><h1 id="共享内存-Share-Memory"><a href="#共享内存-Share-Memory" class="headerlink" title="共享内存 Share Memory"></a>共享内存 Share Memory</h1><p>两个进程的虚拟内存映射到相同物理内存实现。</p><p>优点：</p><ol><li>解决拷贝所消耗的时间    </li></ol><p>缺点：  </p><ol><li>多进程竞争内存   </li></ol><h1 id="信号量-Semaphore"><a href="#信号量-Semaphore" class="headerlink" title="信号量 Semaphore"></a>信号量 Semaphore</h1><p>优点： </p><ol><li>解决了线程安全问题，实现多个同类资源的多线程互斥和同步（有序访问）  </li></ol><h1 id="套接字-Socket"><a href="#套接字-Socket" class="headerlink" title="套接字 Socket"></a>套接字 Socket</h1><p>支持TCP/IP的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，<br>简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。  </p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>（1）域<br>指定套接字通信中使用的网络介质。<br>最常见的套接字域有两种：<br>一是AF_INET，它指的是Internet网络。当客户使用套接字进行跨网络的连接时，<br>它就需要用到服务器计算机的IP地址和端口来指定一台联网机器上的某个特定服务，<br>所以在使用socket作为通信的终点，服务器应用程序必须在开始通信之前绑定一个端口，<br>服务器在指定的端口等待客户的连接。<br>另一个域AF_UNIX，表示UNIX文件系统，它就是文件输入/输出，而它的地址就是文件名。<br>（2）端口号<br>每一个基于TCP/IP网络通讯的程序(进程)都被赋予了唯一的端口和端口号，<br>端口是一个信息缓冲区，用于保留Socket中的输入/输出信息，<br>端口号是一个16位无符号整数，范围是0-65535，<br>以区别主机上的每一个程序（端口号就像房屋中的房间号），<br>低于256的端口号保留给标准应用程序，比如pop3的端口号就是110，<br>每一个套接字都组合进了IP地址、端口，这样形成的整体就可以区别每一个套接字。<br>（3）套接字协议类型<br>因特网提供三种通信机制：<br>一是流套接字，流套接字在域中通过TCP/IP连接实现，<br>同时也是AF_UNIX中常用的套接字类型。<br>流套接字提供的是一个有序、可靠、双向字节流的连接，<br>因此发送的数据可以确保不会丢失、重复或乱序到达，而且它还有一定的出错后重新发送的机制。<br>二个是数据报套接字，它不需要建立连接和维持一个连接，<br>它们在域中通常是通过UDP/IP协议实现的。它对可以发送的数据的长度有限制，<br>数据报作为一个单独的网络消息被传输,它可能会丢失、复制或错乱到达，<br>UDP不是一个可靠的协议，但是它的速度比较高，因为它并一需要总是要建立和维持一个连接。<br>三是原始套接字，原始套接字允许对较低层次的协议直接访问，<br>比如IP、 ICMP协议，它常用于检验新的协议实现，或者访问现有服务中配置的新设备，<br>因为RAW SOCKET可以自如地控制Windows下的多种协议，<br>能够对网络底层的传输机制进行控制，所以可以应用原始套接字来操纵网络层和传输层应用。<br>比如，我们可以通过RAW SOCKET来接收发向本机的ICMP、IGMP协议包，<br>或者接收TCP/IP栈不能够处理的IP包，也可以用来发送一些自定包头或自定协议的IP包。<br>网络监听技术很大程度上依赖于SOCKET_RAW。</p><p>优点： </p><ol><li>解决了进程远距离通信（非同一台主机）的问题  </li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://juejin.im/post/5cb025fb5188251b0351ef48">https://juejin.im/post/5cb025fb5188251b0351ef48</a></li><li><a href="https://www.jianshu.com/p/c1015f5ffa74">https://www.jianshu.com/p/c1015f5ffa74</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> IPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashmap</title>
      <link href="/Blog/2020/08/13/hashmap/"/>
      <url>/Blog/2020/08/13/hashmap/</url>
      
        <content type="html"><![CDATA[<h1 id="hashmap数据结构和构造"><a href="#hashmap数据结构和构造" class="headerlink" title="hashmap数据结构和构造"></a>hashmap数据结构和构造</h1><p>在jdk1.8之前是数组加链表，之后是数组加链表加红黑树。</p><p>数组中存放对象Node，包含key, value, hash value, next指针。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>DEFAULT_INITIAL_CAPACITY=16，除法散列法h(k) = k mod m 要求m一般是质数。但是hashmap初始容量为2的n次幂。原因是方便‘&amp;’运算，方便扩容之后元素的移动。</p><p>MAXIMUM_CAPACITY = 1 &lt;&lt; 30</p><p>DEFAULT_LOAD_FACTOR = 0.75f （加载因子）经过大量统计计算得出的结论，空间和时间的平衡</p><p>TREEIFY_THRESHOLD =  8 （由链表转换成红黑树的阈值）</p><p>UNTREEIFY_THRESHOLD = 6（反树化的阈值）</p><p>MIN_TREEIFY_CAPCITY = 64 （总体Node数量达到64才能树化）</p><h3 id="Hash函数"><a href="#Hash函数" class="headerlink" title="Hash函数"></a>Hash函数</h3><p>采用扰动函数。高位右移和低位取异或。目的是保证hash val均匀分布。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="putVal"><a href="#putVal" class="headerlink" title="putVal"></a>putVal</h4><p>求数组下标并没有采用hash%size，而是(n-1)&amp;hash。得到效果一模一样，效率大幅度提升。</p><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><p>initialize or double table size. <code>new HashMap()</code>的时候并没有创建数组，是在putVal()中调用resize()的时候才创建。</p><p>工作包括扩容和复制。复制的时候有一段代码，判断e的哈希值与原容量的是否等于0，体现了容量为2的n次幂的好处。如果值为0，说明该元素在新数组中的下标不变，否则下标为当前下标加上原数组容量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>            loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">else</span>            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>        loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>            hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">else</span>            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>        hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="死循环问题"><a href="#死循环问题" class="headerlink" title="死循环问题"></a>死循环问题</h3><p>jdk1.7的hashmap中链表采用头插法。是多线程产生的问题。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>你不知道的HashMap中的秘密 by 马士兵 （<a href="https://www.bilibili.com/video/BV1Ja4y1J7d7?p=3%EF%BC%89">https://www.bilibili.com/video/BV1Ja4y1J7d7?p=3）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hashmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juc</title>
      <link href="/Blog/2020/08/02/juc/"/>
      <url>/Blog/2020/08/02/juc/</url>
      
        <content type="html"><![CDATA[<h3 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h3><p>JVM为每一个线程分配一个独立的缓存，以提高效率。</p><p>内存可见性问题：两个线程对于共享数据的操作，彼此不可见。</p><p>下面这段代码主线程的循环会一直执行。因为根本没有重新从堆内存获取flag的取值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestVolatile</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ThreadDemo td <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>td<span class="token punctuation">.</span><span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Succeed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flag is true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> f<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> f<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>一个解决办法是加入同步锁synchronized。效率较低。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>td<span class="token punctuation">.</span><span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Succeed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h4><p>第二个解决办法是加volatile关键字。当多个线程进行操作共享数据时，可以保证内存中的数据可见。取消了代码的重排序。相较于synchronized是一种轻量级的同步策略。但是volatile不具备互斥性，而且不能保证变量的原子性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><h3 id="原子性和CAS算法"><a href="#原子性和CAS算法" class="headerlink" title="原子性和CAS算法"></a>原子性和CAS算法</h3><p>i++的原子性问题：实际上分为3个步骤，读-改-写。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 10</span></code></pre><p>在底层实际上是如下操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> tmp<span class="token punctuation">;</span></code></pre><p>如下代码会产生原子性问题。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAtomic</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AtmoicDemo ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ad<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AtomicDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> serialNo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> serialNo<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="原子变量"><a href="#原子变量" class="headerlink" title="原子变量"></a>原子变量</h4><p>jdk1.5后<code>java.util.concurrent.atomic</code>包提供了常用的原子变量。使用volatile保证内存可见性，和CAS算法保证数据原子性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> AtomicInteger serialNo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> serialNo<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h4><p>compare and swap。是硬件对于并发操作共享数据的支持。包含内存值v，预估值a，更新值b。</p><p>如下代码进行了简单的模拟。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAtomic</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AtmoicDemo ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> expected <span class="token operator">=</span> cas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> b <span class="token operator">=</span> cas<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> randomVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CompareAndSwap</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">compareAndSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> updated<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> old <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> expected<span class="token punctuation">)</span>            val <span class="token operator">=</span> updated<span class="token punctuation">;</span>        <span class="token keyword">return</span> old<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> updated<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expected <span class="token operator">==</span> <span class="token function">compareAndSwap</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> updated<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="同步容器"><a href="#同步容器" class="headerlink" title="同步容器"></a>同步容器</h3><p>Concurrent HashMap采用锁分段机制concurrent level。默认有16个段(segment)。每个segment初始是size为16的哈希表，装着链表。与HashTable的区别实质上就是并行与串行的区别，极大地提升了效率。</p><p>jdk1.8以后把Concurrent HashMap也换成了CAS算法。</p><p>其他的容器有CopyOnWriteArrayList，CopyOnWriteSet等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HelloThread ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用这个如下代码会报错并发修改异常。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不会出现错误</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CopyOnWriteArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="闭锁-CountDownLatch"><a href="#闭锁-CountDownLatch" class="headerlink" title="闭锁 CountDownLatch"></a>闭锁 CountDownLatch</h3><p>是一个同步辅助类。在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。在完成某些运算时，只有其他所有线程的运算全部完成，当前运算才继续执行。</p><p>如下代码，我们希望main线程最后执行，以达到计算时间的目的。需要用到闭锁。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLatch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CountDownLatch lat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LatchDemo ld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatchDemo</span><span class="token punctuation">(</span>lat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time is:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LatchDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">private</span> CountDownLatch latch<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LatchDemo</span><span class="token punctuation">(</span>CountDownLatch lat<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        latch <span class="token operator">=</span> lat<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不为0，main线程无法执行</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><p>创建执行线程的方式三。相较于实现Runnable接口的方式，方法有返回值，并且可以抛出异常。执行callable需要FutureTask实现类的支持，接受运算结果。FutureTask也可以用于闭锁操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ThreadDemo td <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//接受结果</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">private</span> CountDownLatch latch<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="同步锁-Lock"><a href="#同步锁-Lock" class="headerlink" title="同步锁 Lock"></a>同步锁 Lock</h3><p>用于解决多线程安全问题的方式：同步代码块，同步方法，同步锁（显式锁）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> <span class="token string">"1号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> <span class="token string">"2号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> <span class="token string">"3号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tick <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tick <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span>currentThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"完成售票，余票："</span> <span class="token operator">+</span> <span class="token operator">--</span>tick<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><p>生产者和消费者案例。如下代码有可能产生虚假唤醒。主程序没办法结束。解决方法是把else去掉。但是如果有多个生产者和多个消费者，仍然会存在问题。原因是wait()应该使用在循环中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    psvm <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Clerk clk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Productor pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Productor</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer cus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>pro<span class="token punctuation">,</span> <span class="token string">"生产者A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cus<span class="token punctuation">,</span> <span class="token string">"消费者B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> product <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无法添加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">++</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无法卖货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">--</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Productor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Productor</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clerk<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Productor</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            clerk<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Condition线程通信"><a href="#Condition线程通信" class="headerlink" title="Condition线程通信"></a>Condition线程通信</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    psvm <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Clerk clk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Productor pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Productor</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer cus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>pro<span class="token punctuation">,</span> <span class="token string">"生产者A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cus<span class="token punctuation">,</span> <span class="token string">"消费者B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> product <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无法添加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">++</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>                condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无法卖货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">--</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>                condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Productor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Productor</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clerk<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Productor</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            clerk<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="线程按序交替"><a href="#线程按序交替" class="headerlink" title="线程按序交替"></a>线程按序交替</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAlternate</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AlternateDemo ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlternateDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    ad<span class="token punctuation">.</span><span class="token function">loopA</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    ad<span class="token punctuation">.</span><span class="token function">loopB</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    ad<span class="token punctuation">.</span><span class="token function">loopC</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AlternateDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition cond1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition cond2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition cond3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loopA</span><span class="token punctuation">(</span><span class="token keyword">int</span> loop<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tid <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>                cond1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"A"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> loop<span class="token punctuation">)</span><span class="token punctuation">;</span>            tid <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            cond2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loopB</span><span class="token punctuation">(</span><span class="token keyword">int</span> loop<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tid <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>                cond2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"B"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> loop<span class="token punctuation">)</span><span class="token punctuation">;</span>            tid <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            cond3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loopC</span><span class="token punctuation">(</span><span class="token keyword">int</span> loop<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tid <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>                cond3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"C"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> loop<span class="token punctuation">)</span><span class="token punctuation">;</span>            tid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cond1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="读写锁ReadWriteLock"><a href="#读写锁ReadWriteLock" class="headerlink" title="读写锁ReadWriteLock"></a>读写锁ReadWriteLock</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RWDenmo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h3><p>关键点在于非静态方法的锁默认为this，静态方法的锁是对应的Class实例。在某一个时刻内，只能有一个线程持有锁，无论几个方法。</p><ol><li>两个普通同步方法，两个线程，标准打印 //1,2,3</li><li>给get1()新增sleep(200)，打印 //3,1,2（因为get3()不是synchronized）</li><li>将get1()改成静态同步方法，打印 //2,1（暂时不考虑3）</li><li>将get1()和get()2都改成静态同步方法，打印 //1,2（暂时不考虑3）</li><li>将get1()改成静态同步方法，使用num1调用，将get2()使用num2调用（两个Number对象）打印 //2,1</li><li>将get1()和get()2都改成静态同步方法，分别使用num1、num2调用（两个Number对象）打印 //1,2</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test8Monitor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Number num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                number<span class="token punctuation">.</span><span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                number<span class="token punctuation">.</span><span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                number<span class="token punctuation">.</span><span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>频繁地创建和销毁线程很浪费资源。解决办法是提供了一个线程队列，队列中保存着所有等待状态的线程。避免了创建销毁的额外开销。<code>java.util.concurrent.Executor</code>负责线程的使用和调度的根接口，<code>ThreadPoolExecutor</code>是线程池实现类，<code>ScheduledExecutorService</code>是负责线程调度的子接口，<code>ScheduledThreadPoolExecutor</code>继承了<code>ThreadPoolExecutor</code>而且实现了<code>ScheduledExecutorService</code>。</p><p><code>ExecutorService newFixedThreadPool()</code>创建固定大小的线程池。<code>ExecutorService newCachedThreadPool()</code>是缓存线程池，线程数量不固定，可以根据需求自动更改。<code>ExecutorService newSingleThreadPool()</code>创建一个线程池，池中只有一个线程。</p><p><code>ScheduledExecutorService newScheduledThreadPool()</code>创建固定大小的线程池，可以延迟或定时的执行任务。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPool</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ThreadPoolDemo tpd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new Thread(tpd).start();</span>        <span class="token comment" spellcheck="true">//new Thread(tpd).start();</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>tpd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 分配任务</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可延时的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScheduledPool</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ScheduledExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="ForkJoinPool分支合并框架"><a href="#ForkJoinPool分支合并框架" class="headerlink" title="ForkJoinPool分支合并框架"></a>ForkJoinPool分支合并框架</h3><p>一个大任务，拆分成若干个小任务，再将所有小任务运算的结果进行join汇总。</p><p>采用工作窃取模式(work stealing)，。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestForkJoin</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinSum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> 1_000_000_000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        Long sum <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ForkJoinSum</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialUID <span class="token operator">=</span> <span class="token operator">-</span>988L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> start<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> end<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> threshold <span class="token operator">=</span> 10000L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ForkJoinSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> s<span class="token punctuation">,</span> <span class="token keyword">long</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> s<span class="token punctuation">;</span>        end <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> len <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            ForkJoinSum left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinSum</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>            left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进行拆分，压入线程队列</span>            ForkJoinSum right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinSum</span><span class="token punctuation">(</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            right<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进行拆分，压入线程队列     </span>            <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>right<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>JUC并发编程 by 尚硅谷。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> juc </tag>
            
            <tag> multi-thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rpc</title>
      <link href="/Blog/2020/08/02/rpc/"/>
      <url>/Blog/2020/08/02/rpc/</url>
      
        <content type="html"><![CDATA[<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>远程方法调用 Remote Procedure Call</p><p>分布式的通信方式。这是一个概念，具体有很多实现。必须要实现序列化。</p><h1 id="分布式通信"><a href="#分布式通信" class="headerlink" title="分布式通信"></a>分布式通信</h1><p>最基本是二进制数据传输TCP/IP。也可以用http或者webservice等其他通讯协议。</p><p>e.g.:</p><p>User类里面有两个属性，id和name。UserService接口有一个方法是findUserById(). 客户端需要把user id传给服务端，服务端需要传回user对象的信息。</p><p>下面代码是最原始的方式，非常不灵活。服务端传输对象需要把对象所有属性传输一遍。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DataOutputStream dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在java中转成二进制</span>        s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataInputStream dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>Socket s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream out <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataInputStream dis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataOutputStream dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IUserService serv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>修改一下网络传输的部分，进行封装。在客户端创建一个代理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stub stub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stub<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实际上就是v1版本的client的代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> User <span class="token function">findUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DataOutputStream dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在java中转成二进制</span>        s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataInputStream dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>目前stub只能代理一个方法。无法解决如果接口改变需要大量修改代码的问题。进行迭代，用到代理模式中的动态代理。动态生成<code>IUserService</code>接口中的方法的调用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IUserService service <span class="token operator">=</span> Stub<span class="token punctuation">.</span><span class="token function">getStub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IUserService <span class="token function">getStub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InvocationHandler h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method mtd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Socket s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>getOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                String methodName <span class="token operator">=</span> mtd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Class<span class="token punctuation">[</span><span class="token punctuation">]</span> parametersTypes <span class="token operator">=</span> mtd<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方法有可能重载，需要指定传参方法</span>                oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>parametersTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DataInputStream dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>IUserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>IUserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>IUserService<span class="token punctuation">)</span>o<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>Socket s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream out <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataOutputStream dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>          String methodName <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span>readObject<span class="token punctuation">;</span>        IUserService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method met <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>met<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>目前，服务端返回值仍然是对象拆解之后的属性(ID和Name)。下面这个改进解决了这个问题。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>Socket s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream out <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>         String methodName <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span>readObject<span class="token punctuation">;</span>        IUserService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method met <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>met<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>此时，在客户端调用getStub()还只能拿到一个接口中的方法。下面代码把getStub()转换成泛型，解决了这个问题。客户端再从服务注册表找到具体的类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getStub</span><span class="token punctuation">(</span>Class <span class="token class-name">clazz</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InvocationHandler h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method mtd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Socket s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>getOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                String clazzName <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String methodName <span class="token operator">=</span> mtd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Class<span class="token punctuation">[</span><span class="token punctuation">]</span> parametersTypes <span class="token operator">=</span> mtd<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方法有可能重载，需要指定传参方法</span>                oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>parametersTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object o <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> o<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>IUserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>IUserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>IUserService<span class="token punctuation">)</span>o<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="RPC序列化框架"><a href="#RPC序列化框架" class="headerlink" title="RPC序列化框架"></a>RPC序列化框架</h1><p>序列化：把对象转化成字节数组。</p><ol><li>java.io.Serializable</li><li>Hessian</li><li>google protobuf</li><li>facebook Thrift</li><li>kyro</li><li>fst</li><li>json序列化框架(jackson, google Gson, Ali FastJson)</li><li>xstream</li></ol><h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><p>通过Hessian序列化产生的byte数组的长度远小于jdk自带的，去除了无关的信息。时间也要短很多。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloHessian</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">psvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"adf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        User u1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hessian2Output out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Output</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ByteArrayInputStream bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hessian2Input input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Input</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bais<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ml basic: 04 NN</title>
      <link href="/Blog/2020/08/02/ml-basic-04-nn/"/>
      <url>/Blog/2020/08/02/ml-basic-04-nn/</url>
      
        <content type="html"><![CDATA[<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><h2 id="4-1-全连接网络"><a href="#4-1-全连接网络" class="headerlink" title="4.1 全连接网络"></a>4.1 全连接网络</h2><h3 id="4-1-1-简介"><a href="#4-1-1-简介" class="headerlink" title="4.1.1 简介"></a>4.1.1 简介</h3><p>给定训练集，权重$w_i$以及阈值$\theta$可通过学习得到。</p><p>$w_i = w_i + \eta(y-\hat{y})x_i$</p><p>常见的神经网络是每层神经元与下一层全互连，不存在同层或者跨层连接。这种结构被称为多层前馈神经网络(multi-layer feedforward neural networks)。前馈是指在网络拓扑结构上不存在环或回路。</p><h3 id="4-1-2-误差逆传播算法"><a href="#4-1-2-误差逆传播算法" class="headerlink" title="4.1.2 误差逆传播算法"></a>4.1.2 误差逆传播算法</h3><h3 id="4-1-3-全局最小和局部极小"><a href="#4-1-3-全局最小和局部极小" class="headerlink" title="4.1.3 全局最小和局部极小"></a>4.1.3 全局最小和局部极小</h3><p>有如下解决方法：</p><ol><li>以多组不同参数值初始化多个神经网络，取其中误差最小的解作为最终参数</li><li>使用模拟退火技术(simulated annealing)，每一步以一定概率接受比当前解更差的解</li><li>使用随机梯度下降（在计算梯度的时候引入随机元素）</li><li>遗传算法</li></ol><h2 id="4-2-RBF网络"><a href="#4-2-RBF网络" class="headerlink" title="4. 2 RBF网络"></a>4. 2 RBF网络</h2><p>径向基函数网络Radial Basis Function。单隐层前馈神经网络。假定输入为d维向量x，输出为实值。</p><p>$\phi(x) = \sum^q_{i=1}w_i\rho(x, c_i)$</p><p>其中q为隐层神经元个数，$c_i$是第i个隐层神经元所对应的中心。$\rho()$是径向基函数。常用的高斯径向基是$\rho(x, c_i)=e^{-\beta_i||x-c_i||^2}$. </p><p>通常采用两步来训练：确定神经元中心$c_i$，常用的方法包括随机采样、聚类；利用BP算法来确定权重和偏置。</p><h2 id="4-3-ART网络"><a href="#4-3-ART网络" class="headerlink" title="4.3 ART网络"></a>4.3 ART网络</h2><p>竞争型学习是NN常用的无监督学习策略。每一个时刻，只有一个竞争获胜的神经元被激活（赢者通吃原则）。</p><p>Adaptive Resonance Theory自适应谐振理论网络是竞争型学习的代表。由比较层、识别层、识别阈值和重置模块构成。比较层负责接收输入样本，并将其传递给识别层神经元。识别层每个神经元对应一个模式类，神经元数目可在训练过程中动态增长。接到输入信号后，识别层神经元之间相互竞争。</p><p>如果输入向量与获胜神经元所代表的向量之间的相似度大于识别阈值，则当前输入样本将被归为该代表向量所属类别。同时网络连接权重将会更新，是的以后再接受到相似输入样本时该模式类会计算出更大的相似度，从而使该获胜神经元有更大可能获胜。如果相似度不大于阈值，则重置模块将在识别层增设一个新的神经元，其代表向量就设置为当前输入向量。</p><p>ART较好地缓解了竞争型学习中的可塑性-稳定性窘境(stability-plasticity dilemma)。可塑性是指神经网络要有学习新知识的能力，而稳定性则是指在学习新知识时要保持对旧知识的记忆。ART的优点就是可进行增量学习或在线学习。</p><h2 id="4-4-SOM网络"><a href="#4-4-SOM网络" class="headerlink" title="4.4 SOM网络"></a>4.4 SOM网络</h2><p>Self-Organizing Map自组织映射网络。也是一种竞争学习型的无监督神经网络，能将高维度输入数据映射到低维空间，同时保持数据在高维的拓扑结构。</p><p>训练过程：接收到一个训练样本后，每个输出层神经元会计算该样本与自身携带的权向量之间的距离，距离最近的神经元成为竞争获胜者，称为最佳匹配单元。最佳匹配单元及其临近神经元的权向量将被调整，以使得这些权向量与当前输入样本的距离缩小。这个过程不断迭代至收敛。</p><h2 id="4-5-级联相关网络"><a href="#4-5-级联相关网络" class="headerlink" title="4.5 级联相关网络"></a>4.5 级联相关网络</h2><p>结构自适应网络将网络结构也当做学习目标之一。</p><p>级联相关网络是重要代表。级联是指建立层次连接的层次机构。在开始训练时，网络只有输入层和输出层，处于最小拓扑结构；随着训练的进行，新的隐层神经元逐渐加入。刚加入时，其输入端连接权值是冻结的。相关是指通过最大化新神经元的输出与网络误差之间的相关性来训练相关的参数。</p><p>无需设置网络层数、神经元数目，且训练速度较快，但其在数据较小时容易过拟合。</p><h2 id="4-6-Elman网络"><a href="#4-6-Elman网络" class="headerlink" title="4.6 Elman网络"></a>4.6 Elman网络</h2><p>属于RNN的一种。隐层通常采用sigmoid激活函数，而网络的训练常通过推广的BP算法。</p><h2 id="4-7-Boltzmann机"><a href="#4-7-Boltzmann机" class="headerlink" title="4.7 Boltzmann机"></a>4.7 Boltzmann机</h2><p>NN有一类模型是为网络状态定义一个能量，能量最小化时网络达到理想状态。</p><p>Boltzmann机中神经元都是布尔型。令向量s表示n个神经元的状态。也是RNN的一种。</p><p>能量$E(s) = -\sum^{n-1}<em>{i=1}\sum^{n}</em>{j=i+1} w_{ij}s_is_j - \sum^n_{i=1}\theta_is_i$. </p><p>如果网络中神经元以任意不依赖于输入值的顺序进行更新，可以达到Boltzmann分布，此时状态向量s出现的概率将仅由其能量与所有可能状态向量的能量确定</p><p>$P(s) = \frac{e^{-E(s)}}{\sum_t e^{-E(t)}}$</p><p>训练过程：将每个训练样本视为一个状态向量，使其出现概率尽可能大。</p><p>标准的Boltzmann机是一个全连接图，复杂度高，难以用于解决现实任务。现实中采用受限Boltzmann机(RBM)，仅保留显层和隐层的链接。</p><p>RBM常用对比散度(Contrastive Divergence)进行训练。假设网络中有d个显层神经元和q个隐层神经元，令v和h分别表示显层隐层的状态向量，则由于同一层内不存在连接，有</p><p>$P(v|h) = \prod_{i=1}^d P(v_i|h)$</p><p>$P(h|v) = \prod_{j=1}^q P(h_j|v)$</p><p>$\Delta w = \eta(vh^T - v’h’^T)$</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>《机器学习》by周志华，第五章</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ml basic: 03 models</title>
      <link href="/Blog/2020/08/02/ml-basic-03-models/"/>
      <url>/Blog/2020/08/02/ml-basic-03-models/</url>
      
        <content type="html"><![CDATA[<h1 id="常用模型"><a href="#常用模型" class="headerlink" title="常用模型"></a>常用模型</h1><h2 id="3-1-线性回归"><a href="#3-1-线性回归" class="headerlink" title="3.1 线性回归"></a>3.1 线性回归</h2><h3 id="3-1-1-原理"><a href="#3-1-1-原理" class="headerlink" title="3.1.1 原理"></a>3.1.1 原理</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>训练集数据$T = {(x_1,y_1) … (x_M,y_M)}$，$x_i \in \mathcal{X} \subseteq R^n$，$y_i \in  R$</p><p>$f(x) = w^Tx+b$</p><p>正则化参数$\lambda_1$ ，$\lambda_2$</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>线性回归模型$\hat f(x)$</p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>$L = \sum^M_{i=1}(f(x_i) - y_i)^2$</p><p>均方误差对应欧氏距离。基于均方误差最小化求解的方法称为最小二乘法least square method。</p><p>$w^* = (X^TX)^{-1}X^Ty$ 此时$(X^TX)$是满秩矩阵。</p><p>我们也可以用模型逼近y的衍生物，比如$ln(y)$。在形式上仍是线性回归，不过实质上已是在求输入空间到输出空间的非线性函数映射。</p><h2 id="3-2-逻辑回归"><a href="#3-2-逻辑回归" class="headerlink" title="3.2 逻辑回归"></a>3.2 逻辑回归</h2><p>广义线性模型。</p><h3 id="3-2-1-原理"><a href="#3-2-1-原理" class="headerlink" title="3.2.1 原理"></a>3.2.1 原理</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>训练集数据$T = {(x_1,y_1) … (x_M,y_M)}$，$x_i \in \mathcal{X} \subseteq R^n$，$y_i \in \mathcal{Y} \subseteq R^K$</p><p>损失函数$Cost(y,f(x))$</p><p>正则化参数$\lambda_1$ ，$\lambda_2$</p><p>学习速率$\alpha$，$\beta$</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>逻辑回归模型$\hat f(x)$</p><h4 id="判断函数"><a href="#判断函数" class="headerlink" title="判断函数"></a>判断函数</h4><p><strong>单位阶跃函数</strong></p><p>不连续并且不充分光滑</p><p><strong>对数概率函数 Sigmoid</strong></p><p>$y = \frac{1}{1+e^{-z}}$    $z = w^Tx+b$</p><p>如果将y视为样本x作为正例的可能性，则1-y是反例可能性，两者的比值y/(1-y)称为几率，反映了x作为正例的相对可能性。上式是在用线性回归模型的预测结果去逼近真实标记的对数几率。</p><p>我们可以通过极大似然法来估计w和b。</p><p>$l(w,b) = \sum_{i=1}^M ln p(y_i | x_i;w,b)$</p><p>$P_w(y=j|x) = \frac{exp(x^Tw^{(j)})}{\sum_{k=1}^{K}exp(x^Tw^{(k)})}$</p><h4 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h4><p>$cost = -log(\hat{p})$ if y =1. $cost = -log(1-\hat{p})$ if y =0. The reason why we are using log loss instead of MSE here is that it is a convex function. In addition, it will give larger updates when the error is larger. </p><h4 id="算法3-1-逻辑回归算法"><a href="#算法3-1-逻辑回归算法" class="headerlink" title="算法3-1 逻辑回归算法"></a>算法3-1 逻辑回归算法</h4><ol><li><p>随机初始化$\theta$</p></li><li><p>计算$\theta_{j+1} = \theta_{j} - \alpha\frac{1}{m}\sum_{i=1}^{m}x_i[h(x_i)-y_i]$</p></li><li><p>迭代</p></li></ol><p>在迭代求解时使用高效的优化算法，如LBFGS、信赖域算法。这些求解方法是基于批量处理的，无法高效处理超大规模的数据集，也无法对线上模型进行快速实时更新。</p><p>随机梯度下降（SGD）是另一种优化方法，比如google的FTRL算法。</p><h4 id="算法3-2-FTRL算法"><a href="#算法3-2-FTRL算法" class="headerlink" title="算法3-2 FTRL算法"></a>算法3-2 FTRL算法</h4><ol><li><p>对于$i\in{i \sim d}$，初始化$z_i = 0, n_i = 0$</p></li><li><p>对样本t = 1 to T,</p><ol><li><p>计算$$x_{t+1,i} = \left{\begin{aligned} &amp;0 ,&amp;if |z_{t,i}| \leq \lambda_1 \\ &amp; -(\frac{\beta+\sqrt{n_i}}{\alpha}+\lambda_2)^{-1}(z_{t,i} - sign(z_{t,i})\lambda_1),&amp; otherwise\end{aligned}\right.$$ </p></li><li><p>计算$p_t = \sigma(x_tw)$，使用label函数和预测值$p_t$迭代</p></li><li><p>对于i</p><p>$g_i = (p_t - y_t)x_i$</p><p>$\sigma_i = \frac{1}{\alpha}(\sqrt{n_i + g_i^2} - \sqrt{n_i})$ </p><p>$z_i = z_i + g_i - \sigma_iw_{t,i}$</p><p>$n_i = n_i +g_i^2$</p></li></ol></li><li><p>迭代</p></li></ol><p>建议$\beta$取1。</p><h2 id="3-3-线性判别分析-LDA"><a href="#3-3-线性判别分析-LDA" class="headerlink" title="3.3 线性判别分析 LDA"></a>3.3 线性判别分析 LDA</h2><h3 id="3-3-1-原理"><a href="#3-3-1-原理" class="headerlink" title="3.3.1 原理"></a>3.3.1 原理</h3><p>给定训练样例集，将样例投影到一条直线上，使得同类样例的投影点接近，异类样例的投影点尽可能远离。LDA降维最多降到类别数k-1的维数。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>训练集数据$T = {(x_1,y_1) … (x_M,y_M)}$，$x_i \in \mathcal{X} \subseteq R^n$，$y_i \in \mathcal{Y} \subseteq R^K$</p><p>$X_i, \mu_i, \Sigma_i$ 分别表示第i类样例的集合、均值向量、协方差矩阵。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>每个分类的均值向量，各分类数据在总体中所占比例，降维矩阵，降维后各分量的权重。</p><h4 id="损失函数-2"><a href="#损失函数-2" class="headerlink" title="损失函数"></a>损失函数</h4><p>定义全局散度矩阵$S_t = \sum_{i=1}^M(x_i-\mu)(x_i-\mu)^T$ </p><p>定义类内散度矩阵$S_{w} = \sum_{k=1}^K S_{w_k}$。每个类的散度矩阵$S_{wk} = \sum_{x \in X_k}(x-\mu_k)(x-\mu_k)^T$ </p><p>定义类间散度矩阵$S_b = S_t - S_w = \sum_{i=1}^K(\mu_i-\mu)(\mu_i-\mu)^T$</p><p>最大化目标，两个矩阵的广义瑞丽商$J = \frac {||w^T\mu_0 - w^T\mu_1||_2^2}{w^T\Sigma_0w+w^T\Sigma_1w} = \frac{w^TS_bw}{w^TS_ww}$</p><p>多分类优化目标 $max_W \frac{tr(w^TS_bw)}{tr(w^TS_ww)}$. tr表示矩阵的迹(trace)，是对角线元素总和。</p><p>分子分母只跟w的二次向有关，所以与w长度无关。</p><p>$min_w -w^TS_bw$ s. t. $w^TS_ww=1$  =&gt; $w = S_w^{-1}(\mu_0-\mu_1)$</p><h2 id="3-4-多分类学习"><a href="#3-4-多分类学习" class="headerlink" title="3.4 多分类学习"></a>3.4 多分类学习</h2><h3 id="一对一OvO"><a href="#一对一OvO" class="headerlink" title="一对一OvO"></a>一对一OvO</h3><p>将K个类别两两配对，产生K(K-1)/2个二分类任务。存储开销和测试时间开销通常比OvR更大。</p><h3 id="一对其余OvR"><a href="#一对其余OvR" class="headerlink" title="一对其余OvR"></a>一对其余OvR</h3><p>将一个类的样例作为正例，所有其他类的样例作为反例来训练N个分类器。在类别很多的时候，OvR的训练时间开销较大(每一次训练都是全量样本)。</p><h3 id="多对多MvM"><a href="#多对多MvM" class="headerlink" title="多对多MvM"></a>多对多MvM</h3><p>每次将若干个类作为正类，若干个其他类作为反类。</p><p>技术：纠错输出码ECOC。</p><p>过程：编码，对K个类别做p次划分，一共产生p个训练集，和p个分类器。解码，p个分类器分别对测试样本进行预测，预测标记组成一个编码。将编码与每个类别自己的编码比较，返回其中距离最小的类别。类别划分通过编码矩阵(二元码或者三元码)。</p><p>在测试阶段，ECOC编码对分类器的错误有一定的容忍和修正能力。一般来说，对同一个学习任务，编码越长，纠错能力越强(所训练的分类器越多)。</p><h2 id="3-5-类别不平衡问题"><a href="#3-5-类别不平衡问题" class="headerlink" title="3.5 类别不平衡问题"></a>3.5 类别不平衡问题</h2><p>基本策略就是再缩放。利用$\frac{y’}{1-y’} = \frac{y}{1-y}*\frac{m^-}{m^+}$。</p><h3 id="欠采样"><a href="#欠采样" class="headerlink" title="欠采样"></a>欠采样</h3><p>代表有EasyEnsemble算法。将反例划分成若干个集合供不同学习器使用，在全局来看不会丢失重要信息。</p><h3 id="过采样"><a href="#过采样" class="headerlink" title="过采样"></a>过采样</h3><p>代表有Smote算法。</p><h3 id="阈值移动"><a href="#阈值移动" class="headerlink" title="阈值移动"></a>阈值移动</h3><p>将基本策略内嵌。</p><h2 id="3-6-决策树"><a href="#3-6-决策树" class="headerlink" title="3.6 决策树"></a>3.6 决策树</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">TreeGenerate</span><span class="token punctuation">(</span>D<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>    生成节点node    <span class="token keyword">if</span> D中样本全属于类别C<span class="token punctuation">:</span>        将node标记为C类叶节点        <span class="token keyword">return</span>    <span class="token keyword">if</span> A <span class="token operator">=</span> ∅ <span class="token operator">or</span> D中样本在A上取值相同<span class="token punctuation">:</span>        将node标记为D中样本数最多的类叶节点        <span class="token keyword">return</span>           从A中选择最优划分属性a    <span class="token keyword">for</span> a_v <span class="token keyword">in</span> a<span class="token punctuation">:</span>        为node生成一个分支<span class="token punctuation">;</span>令Dv表示D中在a上取值为a_v的样本子集        <span class="token keyword">if</span> Dv <span class="token operator">=</span> ∅<span class="token punctuation">:</span>            将node标记为D中样本数最多的类叶节点        <span class="token keyword">else</span><span class="token punctuation">:</span>            以TreeGenerate<span class="token punctuation">(</span>Dv<span class="token punctuation">,</span> A\<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;a&amp;#125;)为分支节点</span></code></pre><p>三种终止递归条件：</p><ol><li>当前节点包含样本属于同一类，无需划分</li><li>当前属性集合为空，或所有样本在所有属性上取值相同，无法划分</li><li>当前节点包含的样本集合为空，不能划分</li></ol><h3 id="3-6-1划分选择"><a href="#3-6-1划分选择" class="headerlink" title="3.6.1划分选择"></a>3.6.1划分选择</h3><h4 id="信息增益-Info-Gain"><a href="#信息增益-Info-Gain" class="headerlink" title="信息增益 Info Gain"></a>信息增益 Info Gain</h4><p>$p_k$ 是k类别在整体中所占比例。</p><p>信息熵 $Ent(D) = -\sum_{k=1}^K p_klog_2(p_k)$</p><p>信息熵的值越小，D的纯度越高。假设离散属性a有V个可能的取值，${a_1, a_2,…, a_V}$, 若使用a来对样本D进行划分，会产生V个分支节点。计算属性a对样本集D进行划分得到的信息增益。</p><p>$Gain(D, a) = Ent(D) - \sum_{v=1}^V \frac{D_v}{D} Ent(D_v)$</p><p>ID3决策树算法就是用信息增益为准则来选择划分属性。但是这种算法对可取值数目较多的属性有所偏好。</p><h4 id="增益率-Gain-Ratio"><a href="#增益率-Gain-Ratio" class="headerlink" title="增益率 Gain Ratio"></a>增益率 Gain Ratio</h4><p>$Gain_ratio(D, a) = \frac{Gain(D, a)}{IV(a)}$</p><p>其中$IV(a) = \sum_{v=1}^V \frac{|D_v|}{|D|}log_2\frac{|D_v|}{|D|}$被称为a的固有值。</p><p>C4.5决策树算法利用增益率来选择最优划分属性。</p><h4 id="基尼指数-Gini-Index"><a href="#基尼指数-Gini-Index" class="headerlink" title="基尼指数 Gini Index"></a>基尼指数 Gini Index</h4><p>Gini(D)反映从数据集D中随机抽取两样本，其类别标记不一致的概率。因此Gini(D)越小，数据集D的纯度越高。</p><p>Gini impurity $Gini(D) = 1 - \sum_{k=1}^K p_{k}^2$</p><p>属性a的基尼指数 Gini_index(D, a) = $\sum_{v=1}^V \frac{|D_v|}{|D|}Gini(D_v)$</p><p>选择使得划分后基尼指数最小的属性$a^* = arg min_{a \in A} Gini_index(D, a)$</p><p>sklearn中使用的CART算法就是用Gini impurity做指标。</p><h3 id="3-6-2-剪枝处理"><a href="#3-6-2-剪枝处理" class="headerlink" title="3.6.2 剪枝处理"></a>3.6.2 剪枝处理</h3><p>缓和过拟合的主要手段。基本策略有预剪枝和后剪枝。</p><h4 id="预剪枝"><a href="#预剪枝" class="headerlink" title="预剪枝"></a>预剪枝</h4><p>在决策树生成过程中，若当前节点的划分不能带来泛化性能提升，则停止划分。预剪枝使得决策树的很多分支都没有展开，降低了过拟合风险，减少了训练和测试时间。不过，有些分支的当前划分虽不能提升泛化性能，但是在其基础上进行的后续划分却有可能导致性能显著提高，带来了欠拟合的风险。</p><h4 id="后剪枝"><a href="#后剪枝" class="headerlink" title="后剪枝"></a>后剪枝</h4><p>训练集生成的一棵完整决策树自下而上对节点进行考察，如果该节点对应子树替换为叶节点能带来决策树泛化性能提升，则将该子树替换为叶节点。欠拟合风险很小，不过训练时间要比不剪枝大得多。</p><h3 id="3-6-3-连续值"><a href="#3-6-3-连续值" class="headerlink" title="3.6.3 连续值"></a>3.6.3 连续值</h3><p>连续属性离散化。最简单的策略就是采用二分法。给定样本集D和连续属性a，将该属性所有值排序。基于划分点t可将D分为$D^-_t$和$D^+_t$。之后我们可以计算信息增益来确定合适的分割点。</p><p>需要注意的是，与离散属性不同，若当前节点划分属性是连续属性，该属性还可作为其后代节点的划分属性。</p><h3 id="3-6-4-缺失值处理"><a href="#3-6-4-缺失值处理" class="headerlink" title="3.6.4 缺失值处理"></a>3.6.4 缺失值处理</h3><p>给定训练集D和属性a，用$\widetilde D$表示D中在属性a上没有缺失值的样本。为了解决在有属性值缺失的情况下进行属性划分，可以给每一个样本x赋予一个权重$w_x$。</p><p>$\rho = \frac{\sum_{x \in \widetilde D}w_x}{\sum_{x \in D}w_x}$表示无缺失值样本所占比例</p><p>$\widetilde p_k = \frac{\sum_{x \in \widetilde D_k}w_x}{\sum_{x \in \widetilde D}w_x}$表示无缺失值样本中第k类所占比例</p><p>$\widetilde r_v = \frac{\sum_{x \in \widetilde D_v}w_x}{\sum_{x \in \widetilde D}w_x}$表示无缺失值样本中在属性a上取值是$a_v$的样本所占比例</p><p>我们可以将信息增益的计算式推广成</p><p>$Gain(D, a) = \rho * Ent(\widetilde D) - \rho* \sum_{v=1}^V \widetilde r_v  Ent(\widetilde D_v)$</p><p>为了解决特定样本在该属性上的值缺失时的样本划分问题，让这个样本以不同的概率划入到不同的子节点中去。</p><h3 id="3-6-5-多变量决策树"><a href="#3-6-5-多变量决策树" class="headerlink" title="3.6.5 多变量决策树"></a>3.6.5 多变量决策树</h3><p>可以对分类边界进行不是沿着平行轴的方向进行划分的或者进行其他复杂划分的决策树。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>《美团机器学习实践》by美团算法团队，第三章</li><li>《机器学习》by周志华，第三、四章</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm</title>
      <link href="/Blog/2020/07/28/jvm/"/>
      <url>/Blog/2020/07/28/jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM体系架构"><a href="#JVM体系架构" class="headerlink" title="JVM体系架构"></a>JVM体系架构</h1><p>java是跨平台的语言，JVM是跨语言的平台（Kotlin,Scala, Jython, JRuby, JavaScript…)。JVM不关心运行在其内部的程序的编程语言，只关心字节码文件。</p><p>特点：</p><ol><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收</li></ol><p>运行在OS上，与硬件无直接交互。</p><h2 id="不同种类的JVM"><a href="#不同种类的JVM" class="headerlink" title="不同种类的JVM"></a>不同种类的JVM</h2><h3 id="Classic-VM"><a href="#Classic-VM" class="headerlink" title="Classic VM"></a>Classic VM</h3><p>第一款商用JVM。在JDK1.4被淘汰。只提供解释器(没有JIT)，执行效率低下。</p><h3 id="Exact-VM"><a href="#Exact-VM" class="headerlink" title="Exact VM"></a>Exact VM</h3><p>准确式内存管理Exact Memory Management。知道内存中某个位置的数据具体是什么类型。具备现代高性能VM的雏形。</p><h3 id="HotSpot-VM"><a href="#HotSpot-VM" class="headerlink" title="HotSpot VM"></a>HotSpot VM</h3><p>在JDK1.3时被设置成默认VM。热点代码探测技术。通过计数器找到最具编译价值代码，在本地缓存起来。通过编译器和解释器协同工作，平衡程序响应时间和最佳执行性能。</p><h3 id="JRockit"><a href="#JRockit" class="headerlink" title="JRockit"></a>JRockit</h3><p>专注于服务器端应用，不关注程序启动速度，内部不包含解析器实现，是世界上最快JVM。MissionControl服务套件以最低的开销进行资源分析、管理和监控。</p><h3 id="J9"><a href="#J9" class="headerlink" title="J9"></a>J9</h3><p>IBM。市场定位与HotSpot类似。多用途VM。通用性没有JRockit好。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h4 id="代码执行流程"><a href="#代码执行流程" class="headerlink" title="代码执行流程"></a>代码执行流程</h4><p>前端编译器(javac)将java文件进行编译成为class字节码。在JVM中，用类加载器进行加载。之后：解释器翻译字节码(解释执行)成机器语言，后端编译器(JIT)编译执行，将热点代码缓存起来。这两者协同工作。解释器响应快，但是JIT在正常运行之后(一开始有暂停时间)速度更快。</p><h3 id="JVM架构模型"><a href="#JVM架构模型" class="headerlink" title="JVM架构模型"></a>JVM架构模型</h3><p><strong>基于栈的指令集架构</strong></p><ol><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题</li><li>绝大部分指令是零地址指令</li><li>可移植性好</li></ol><p><strong>基于寄存器的指令集架构</strong></p><ol><li>典型应用：x86</li><li>完全依赖硬件</li><li>性能优秀，执行高效</li><li>一/二/三地址指令</li></ol><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><strong>启动</strong></p><p>引导类加载器Bootstrap class loader创建一个初始类，这个类由虚拟机的具体实现指定。</p><p><strong>执行</strong></p><p>程序开始执行到结束。</p><p><strong>退出</strong></p><p>正常结束，程序出现异常或错误，操作系统出现错误，线程调用Runtime类或System类的exit方法。</p><h1 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h1><p>负责从文件系统或网络中加载class文件，有特定的文件标识。class文件的运行是有执行引擎Execution Engine决定。加载的类信息存放在方法区(还会存放运行时常量池信息)。</p><p>判断两个class对象是否是同一个类：类的完整类名相同，且加载它们的ClassLoader实例对象必须相同。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><img src="01jvm_structure.jpg" width="500" height="300"><p>方法区和堆是多个线程共享的。</p><p>执行引擎只认机器码。</p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p>加载loading -&gt; 验证verification -&gt; 准备preparation -&gt; 解析resolution -&gt; 初始化initialization </p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>整体加载过程中的第一个环节。</p><p>通过一个类的全限定名获取类的二进制字节流。将其所代表的的静态存储结构转化为方法区的运行时数据结构。在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的数据的访问入口。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="验证Verify"><a href="#验证Verify" class="headerlink" title="验证Verify"></a>验证Verify</h4><p>确保class文件中字节流中包含的信息符合VM要求，保证被加载类的正确性，不会危害VM的安全。</p><p>CAFE BABE。</p><p>文件格式验证、元数据验证、字节码验证、符号引用验证。</p><h4 id="准备Prepare"><a href="#准备Prepare" class="headerlink" title="准备Prepare"></a>准备Prepare</h4><p>为类变量分配内存，设置该类变量(静态变量)默认初始值。这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化。</p><h4 id="解析Resolve"><a href="#解析Resolve" class="headerlink" title="解析Resolve"></a>解析Resolve</h4><p>将常量池内的符号引用转换为直接引用的过程。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>执行类构造器方法&lt;clinit&gt;()的过程。此方法不需定义，是javac编译器自动收集类中的静态变量的复制动作和静态代码块中的语句合并二来。这个阶段主要是对类变量初始化，是执行类构造器的过程。Class只是对 Klass的封装。</p><p>构造器方法中指令按照语句在源文件中出现的顺序执行。</p><p>若该类具有父类，JVM会保证父类的clinit先执行。 </p><h2 id="两种加载器"><a href="#两种加载器" class="headerlink" title="两种加载器"></a>两种加载器</h2><p>四者之间的关系是包含关系，不是继承关系。扩展类和系统类算是自定义类。</p><p>获取加载器的方式。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1获取当前类的加载器</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2获取当前线程的加载器</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3获取系统的加载器</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4获取调用者的加载器</span>DriverManager<span class="token punctuation">.</span><span class="token function">getCallerClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="自定义类User-Defined"><a href="#自定义类User-Defined" class="headerlink" title="自定义类User-Defined"></a>自定义类User-Defined</h3><p>所有派生于抽象类ClassLoader的类加载器(不光是程序员自定义的)。默认使用系统类加载器进行加载。</p><p>使用场景：隔离加载类，修改类加载的方式，扩展加载源，防止源码泄露。</p><p>步骤：</p><ol><li>继承抽象类ClassLoader。</li><li>加载逻辑写在findClass()方法。</li><li>可以选择直接继承URLClassLoader。避免自己重写findClass()和获取字节码流的方法。</li></ol><h4 id="扩展类Extension"><a href="#扩展类Extension" class="headerlink" title="扩展类Extension"></a>扩展类Extension</h4><p>继承了URLClassLoader。间接继承了ClassLoader。使用getParent会获取到null，因为bootstrap class loader不是java编写的。</p><h4 id="应用AppClassLoader-系统类System"><a href="#应用AppClassLoader-系统类System" class="headerlink" title="应用AppClassLoader/系统类System"></a>应用AppClassLoader/系统类System</h4><p>继承了URLClassLoader。间接继承了ClassLoader。使用getParent会获取到扩展类加载器。</p><h3 id="启动-引导类Bootstrap"><a href="#启动-引导类Bootstrap" class="headerlink" title="启动/引导类Bootstrap"></a>启动/引导类Bootstrap</h3><p>用C语言实现，嵌套在JVM内部。Java中的核心类库(e.g., String类)使用引导类加载器进行加载。没有父加载器。</p><h2 id="双亲委派模式parents-delegation"><a href="#双亲委派模式parents-delegation" class="headerlink" title="双亲委派模式parents delegation"></a>双亲委派模式parents delegation</h2><p>JVM对class文件采用按需加载。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>如果一个类加载器收到了类加载请求，先把请求委托给父类的加载器去执行</li><li>如果父类加载器还存在其父类加载器，依次向上委托</li><li>如果父类加载器可以完成类加载任务，就成功返回；否则，子加载器再自己尝试加载</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>具有优先级层次的关系，可以避免类的重复加载</li><li>安全考虑，可以防止Java核心api被替换</li></ol><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p>对于java核心源代码的保护。自定义的同名类不会被引导类加载器加载(会先加载jdk自带的文件)。</p><h1 id="运行时数据区和线程"><a href="#运行时数据区和线程" class="headerlink" title="运行时数据区和线程"></a>运行时数据区和线程</h1><p>方法区、堆：一个进程一个。随着JVM启动而创建，随着JVM退出而销毁。</p><p>程序计数器、本地方法栈、栈：一个线程一个。随着线程启动而创建，随着线程退出而销毁。</p><p>当一个java线程准备好执行以后，此时一个OS的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。OS负责所有线程的安排调度到任何一个可用的CPU上，一旦本地线程初始化成功，它就会调用Java线程中的run()方法。</p><p><em>方法中定义的局部变量是否线程安全？</em> 如果被多个线程调用，则不安全。比如把stringbuilder传进去别的方法或者进行return。</p><p>查看参数：jps查看当前运行中的进程，jinfo -flag 参数 进程id。</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>PC寄存器。用来存储指向下一条指令的地址。唯一一个JVM规范中没有规定任何OutOfMemoryError情况的区域（占用内存极小）。没有GC。</p><p>采用javap反编译.class文件。左边是指令地址，右边是对应的操作指令。</p><p>为什么需要记录当前线程的执行地址：因为CPU不停切换各个线程，切换回来以后得接着从上一次执行到的地方开始继续执行。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>由于跨平台的设计，java的指令是根据栈来设计的(不是基于寄存器)。</p><p>主管Java程序的运行。保存方法的局部变量、部分结果，并参与方法的调用和返回。没有GC。</p><p>一个栈帧，对应着一个java方法。</p><p>JVM允许java栈的大小是动态的或者固定不变的。如果是固定大小，有可能抛出StackOverflowError；如果是动态扩展，有可能抛出OutOfMemoryError。使用-Xss设置最大的栈的大小。</p><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>定义为一个数字数组，存储方法参数和定义在方法体内的局部变量。线程私有，不存在数据安全问题。所需容量是在编译器确定下来的，在方法运行期间不会更改。在javap反解析看locals。</p><p>最基本的存储单元是槽slot。32位类型占用1个slot，64位类型占用2个slot。如果当前栈帧是实例方法，那么该对象引用this将会存放在index为0的slot处。其余局部变量按顺序排列。栈帧中的局部变量表中的slot是可以重用的。如果一个局部变量过了作用域(代码块)，在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</p><p>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的，都不会被回收。</p><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p>保存计算过程的中间结果，也作为变量临时的存储空间。所需容量是在编译器确定下来的，在方法运行期间不会更改。在javap反解析看stack。</p><p>底层数据结构是数组，但是不能采用访问索引的方式进行数据访问。</p><p>栈顶缓存技术：将栈顶元素缓存在物理cpu的寄存器中，降低对内存的读写次数。</p><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p>每一个栈帧内部都包含一个指向运行时常量池中的该栈帧所属方法的引用，目的是支持动态链接。作用是为了将这些符号引用转换为调用方法的直接引用。</p><p>常量池：提供一些符号和常量，便于指令识别。</p><p>放在方法区是为了线程共享。</p><p><strong>静态链接</strong></p><p>当一个字节码文件被装载进jvm，如果被调用的目标方法在编译期可知，且运行期不变，这种情况下将调用方法转换为直接引用的过程是静态链接。</p><p><strong>动态链接</strong></p><p>被调用的目标方法在编译期无法被确定。多态的实现。</p><p><strong>早期绑定</strong></p><p>对应静态链接。</p><p><strong>晚期绑定</strong></p><p>对应动态链接。</p><p><strong>方法调用</strong></p><p>Java中任何一个普通的方法其实都具备虚函数的特征，相当于C++中的虚函数(需要使用virtual显示定义)。如果在java中不希望某个方法拥有虚函数的特征，可以使用final进行标记。</p><p>普通调用指令：</p><p>invokestatic调用静态方法。(非虚方法)</p><p>invokespecial调用&lt;init&gt;方法、私有和父类方法。(非虚方法)</p><p>invokevirtual调用所有虚方法和隐式调用父类final方法(没加super)。</p><p>invokeinterface调用接口方法(实际上也是虚方法)。</p><p>动态调用指令：</p><p>invokedynamic动态解析出需要调用的方法，然后执行。java原本是静态语言(对类型的检查是在编译器)，加入了这个指令可以支持一些动态语言的特征。</p><p><strong>非虚方法</strong></p><p>在编译器就确定了具体调用版本。private/static/final/constructor/父类方法都是非虚方法。其他都是虚方法。</p><p>子类对象的多态适用前提：类的继承关系；方法的重写。</p><p><strong>方法重写</strong></p><p>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C。如果在C中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验。如果通过，则返回这个方法的引用。没有权限就是IllegalAccessError异常。否则，按照继承关系依次对其父类进行校验。</p><p>为了提高性能，jvm建立了一个虚方法表。在类加载的链接(解析)阶段创建该表。</p><h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><p>存放调用该方法的pc寄存器的值。正常退出。异常退出的话，不会给调用者返回值，返回信息要去异常表中找。</p><h4 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h4><p>其他信息。例如，对程序调试提供支持的信息。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法native method就是一个java调用非java代码的接口。标识符native可以与除了abstract之外的其他java标识符连用。</p><p>使用本地方法的原因</p><ol><li>与java环境外交互：比如与操作系统或某些硬件交换信息。</li><li>与操作系统交互：使用Java语言本身没有提供封装的操作系统的特性。</li><li>Sun’s Java：Sun的解释器使用C实现。</li></ol><p>本地方法栈是线程私有，用于管理本地方法的调用。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>一个JVM实例只存在一个堆内存。在JVM启动的时候，堆空间大小就确定了。</p><p>堆可以处于物理上不连续的内存空间。</p><p>空间大小可以用-Xms和-Xmx指定(起始和最大内存)。</p><h4 id="逃逸分析Escape-Analysis"><a href="#逃逸分析Escape-Analysis" class="headerlink" title="逃逸分析Escape Analysis"></a>逃逸分析Escape Analysis</h4><p>基本行为就是分析对象动态作用域。</p><p>当一个对象在方法中被定义后，只在方法内部使用，则认为没有发生逃逸。</p><p>代码优化：</p><ul><li>栈上分配</li></ul><p>经过逃逸分析后发现，一个对象并没有逃逸出方法的话，那么可能被优化成栈上分配。</p><ul><li>同步省略</li></ul><p>JVM会自动优化没有必要的锁(锁消除)。</p><ul><li>标量替换</li></ul><p>有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分可以不存储在内存，而是存储在CPU寄存器中。</p><h4 id="TLAB"><a href="#TLAB" class="headerlink" title="TLAB"></a>TLAB</h4><p>Thread Local Allocation Buffer. 堆是线程共享，任何线程都可以访问其中的共享数据。并发环境下操作共享数据容易存在线程不安全问题。如果加锁，会影响效率。JVM为每个线程分配了一个私有缓存区域，包含在Eden空间内。一旦对象在TLAB空间分配内存失败，JVM会尝试通过加锁机制创建对象。</p><h4 id="分代"><a href="#分代" class="headerlink" title="分代"></a>分代</h4><p>默认新生代:老年代是1:2比例。默认Eden:Survivor0:Survivor1是8:1:1比例。几乎所有新对象都是在Eden区被创建的。80%的对象都是在新生代就死了。</p><p><em>分代原因</em> </p><p>优化GC性能。如果没有分代，所有对象都在一块，GC的时候需要全局扫描。</p><p><strong>新生代</strong></p><p>Eden区： 诞生于此。当这个区快满的时候，会触发垃圾回收Young GC (YGC)。仍然留下的对象将迁入Survivor中的分区。Eden区的内存设置过小，会导致YGC频率过高，影响性能。</p><p>Survivor0区/Survivor1区：YGC被动触发回收(Survivor区满了不会触发YGC)。Survivor区满了，可以晋升老年代，但是不会主动触发垃圾回收YGC。Survivor区的内存设置过小，会导致YGC失去意义，因为对象都去老年代了。</p><p>这两个survivor区同时只有1个会被使用。</p><p>每一次gc会不断移动survivor分区中的对象到另一个分区，且对象增长1岁。15岁的对象（或者超大对象）会被晋升放入老年代。动态对象年龄判断：如果Survivoor区中相同年龄的所有对象的大小的总和大于Survivor区空间的一半，年龄大于等于这个值的对象可以直接进入老年代。</p><p><strong>老年代</strong></p><p>老年代快满的时候，会有full gc。目前，只有CMS GC会有单独收集老年代的行为。</p><p><strong>元空间</strong></p><p>在Java 8之前叫做永久代。元空间的大小，不受堆大小参数的限制。实际上是属于方法区。</p><p><em>判断对象是否存活</em></p><ol><li>引用计数法<br>缺点：两个对象互相引用，别的对象并不需要这两个对象，这两个对象不会被删除。</li><li>可达性分析法</li></ol><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p>元空间需要使用直接内存。是在java堆外的，直接向系统申请的内存空间。来源于NIO，通过存在堆中的DirectByteBuffer操作直接内存。</p><p>IO：字节流、字符流，阻塞。NIO：缓冲区，非阻塞。</p><p>访问效率比java堆高。分配回收成本较高，不受jvm内存回收管理。</p><p>在JVM启动的时候被创建，实际物理内存空间可以是不连续的。用于存储类型信息、常量、静态变量、JIT编译的代码缓存等。</p><p>元空间不在JVM设置的内存中，使用本地内存(与永久代的区别之一)。</p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>数据类型：数量值、字符串、类引用、字段引用、方法引用(字符串常量池和静态变量仍在堆)</p><p>JVM为每一个已加载的类型都维护一个常量池，池中数据项像数组项一样，通过索引访问。</p><p>运行时常量池已经换成了真实地址，具备动态性。</p><p><em>从永久代替换成元空间的原因？</em> 为永久代设置空间大小很难确定；难以调优。</p><h4 id="字符串常量池String-Table"><a href="#字符串常量池String-Table" class="headerlink" title="字符串常量池String Table"></a>字符串常量池String Table</h4><p>永久代回收效率很低，在full gc时才出发。这就导致String Table回收效率不高。在开发中有大量字符串被创建，放到堆中，能及时回收。</p><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>JVM规范对方法区的约束很宽松，可以选择不进行垃圾回收和压缩处理。对这个区域的回收效果难以令人满意，尤其是类型的卸载，条件很苛刻。但是有时候回收确实有必要。</p><p>主要回收常量池中废弃的常量和不再使用的类型。</p><p><em>判定一个类型不再被使用的条件：</em></p><ol><li>该类所有实例且其子类的实例都已经被回收</li><li>加载该类的类加载器已经被回收</li><li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li></ol><h1 id="对象的实例化内存布局和访问定位"><a href="#对象的实例化内存布局和访问定位" class="headerlink" title="对象的实例化内存布局和访问定位"></a>对象的实例化内存布局和访问定位</h1><h3 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h3><ol><li>new, 变形1：xx的静态方法，变形2：Factory的静态方法</li><li>Class的newInstance()，反射的方式，只能调用空参的构造器，权限必须是public</li><li>Constructor的newInstance(xxx)，反射的方式</li><li>使用clone()，当前类需要实现Cloneable接口</li><li>使用反序列化</li><li>第三方库Objenesis</li></ol><h3 id="创建对象步骤"><a href="#创建对象步骤" class="headerlink" title="创建对象步骤"></a>创建对象步骤</h3><ol><li>判断对象对应的类是否加载、链接、初始化</li><li>为对象分配内存。如果内存规整，指针碰撞法；如果不规整，JVM需要维护一个列表，空闲列表分配</li><li>处理并发安全问题：CAS失败重试，每个线程预先分配TLAB</li><li>初始化分配到的空间：所有属性赋默认值</li><li>设置对象的对象头</li><li>执行init方法进行初始化</li></ol><h3 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h3><h4 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h4><p>运行时元数据：</p><p>哈希值、gc分代年龄、锁状态标志、线程持有的锁、偏向线程id、偏向时间戳</p><p>类型指针：</p><p>指向类元数据，确定该对象所属类型</p><h4 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h4><p>相同宽度的字段总是被分配在一起，父类中的定义的变量会出现在子类之前，如果compactFields参数为true，子类的窄变量可能插入到父类变量的空隙</p><h4 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h4><h3 id="对象访问方式"><a href="#对象访问方式" class="headerlink" title="对象访问方式"></a>对象访问方式</h3><h4 id="句柄访问"><a href="#句柄访问" class="headerlink" title="句柄访问"></a>句柄访问</h4><p>到对象实例数据的指针，到对象类型数据的指针。</p><p>reference存储稳定句柄地址，对象被移动时只会改变句柄中实例数据指针，reference本身不需要被改变。</p><p>从空间占用多(需要开辟句柄池)。访问效率较低。</p><h4 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h4><p>被hostspot采用。</p><h1 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>将字节码指令解释/编译为对应平台上的本地机器指令才可以(翻译器)。</p><p><em>半编译半解释型语言：</em> 执行引擎中既可以使用解释器也可以使用编译器。</p><p>解释器：当JVM启动时会根据预定义的规范对字节码采用逐行解释的方式执行。</p><p>JIT编译器：将源代码直接编译成和本地机器平台相关的机器语言。</p><h3 id="机器码、指令、汇编"><a href="#机器码、指令、汇编" class="headerlink" title="机器码、指令、汇编"></a>机器码、指令、汇编</h3><p>机器码：二进制编码。与cpu紧密相关，不同种类的cpu对应的机器指令也不同。</p><p>指令：可读性稍微得到改善，把特定01序列简化成指令(e.g., mov)。</p><p>指令集：不同硬件平台格子支持的指令是有差别的。</p><p>汇编：用助记符代替机器指令的操作码，用地址符号或标号代替指令或操作数的地址。必须翻译成机器指令码。</p><p>字节码：是一种中间状态的二进制代码，比机器码更抽象，需要直译器转译后才能成为机器码。主要为了实现特定软件运行。</p><h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><p>初衷是满足java程序实现跨平台特性。有两套执行器，即古老的字码解释器和现在使用的模板解释器。比较低效。</p><p>响应速度快。省去编译的时间，立即执行。</p><h3 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h3><p>随着程序运行时间的推移，根据热点探测功能，将有价值的字节码编译为本地机器指令。</p><h4 id="热点探测"><a href="#热点探测" class="headerlink" title="热点探测"></a>热点探测</h4><p>热点代码：一个被多次调用的方法，或者方法内部循环次数较多的循环体。</p><p>热点探测方法：基于计数器的热点探测。</p><p>热度衰减：计数器统计的不是方法被调用的绝对次数，而是相对的执行频率。当超过一定时间限度，如果方法的调用次数仍然不足以让它提交给JIT，那这个方法的调用计数器就被减少一半。这段时间被称为半衰周期。</p><p>方法调用计数器：统计方法被调用的次数。默认阈值在client模式下是1500次，在server模式下是10000次。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>C1：client compiler。会对字节码进行简单和可靠的优化，耗时短。以达到更快的编译速度。</p><p>C2：server compiler。64位只有这种选择。C2进行耗时较长的优化，优化效果更好。</p><h1 id="String-Table"><a href="#String-Table" class="headerlink" title="String Table"></a>String Table</h1><p>String实现了Serializable接口和Comparable接口。在JDK8及以前定义了final char[] value用于存储字符串数据。JDK9改为byte[]。节省了一些空间。</p><p>String的不可变性。字符串常量池中不存储相同的字符串。</p><p>String的String Pool是一个固定大小的Hashtable。在JDK6中StringTable是固定的，就是1009的长度。如果常量池中字符串过多，就会导致效率下降很快（hash冲突严重，导致链表很长）。在JDK7以后，默认值是60013。</p><p>Java有8种基本数据类型再加上String都有常量池。类似于java系统提供的缓存。String类型的常量池比较特殊。使用方法有直接使用双引号生命的，或者调用intern()方法。</p><p>常量与常量的拼接结果在常量池，原理是编译期优化。只要其中有一个变量(被final修饰的String应该被当成常量)，结果就在堆中。变量拼接的原理是StringBuilder。如果拼接的结果调用intern()方法，则主动将常量池中还没有的字符串对象放入池中，并返回此对象地址。</p><p>intern(): 判断字符串常量池中是否存在该值，如果存在，则返回常量池中的地址，否则需要加载一份并返回此对象地址。</p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">+</span><span class="token string">"b"</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 拼接符号前后出现了变量，相当于在堆空间中new String()</span>String s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>String s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>String s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>String s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>String s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>String s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// s5, s6, s7互不相同</span></code></pre><h3 id="intern-的使用"><a href="#intern-的使用" class="headerlink" title="intern()的使用"></a>intern()的使用</h3><p>如果不是用双引号声明的String对象，可以使用intern()，从字符串常量池中查询当前字符串是否存在，如果存在则返回引用。在jdk1.6中，如果串池没有这个字符串对象，会把此对象复制一份，放入池中，返回池中对象地址。从jdk1.7开始，如果没有，会把对象的引用地址复制一份，放入池中，并返回池中的引用地址。</p><p>对于程序中大量存在的字符串(重复字符串)，使用intern()可以节省空间。</p><p><em>如何保证变量s指向的是字符串常量池中的数据？</em></p><ol><li>String s = “abc”;</li><li>String s = new String(“abc”).intern();调用intern方法</li></ol><p><em>new String(“ab”)会创建几个对象？</em></p><p>会创建两个。堆中有一个String对象，常量池有一个”ab”。</p><p><em>new String(“a”) + new String(“b”)会创建几个对象？</em></p><p>会创建6个。第一个是StringBuilder，堆有两个String对象，常量池中有”a”, “b”。StringBuilder的toString()方法也创建了一个对象new String(“ab”)。字符串常量池中是没有”ab”。</p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向堆中String对象的地址</span>s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串常量池中已经存在"1"</span>String s2 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//jdk6:F, jdk7/8:F</span>String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向堆中String对象的地址</span>s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串常量池中原先不存在"11"，现在生成</span><span class="token comment" spellcheck="true">//jdk6创建了一个新对象"11"，也就有了新地址；jdk7记录了在堆中"11"的地址</span>String s4 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用上一行代码在常量池中生成的"11"</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//jdk6:F, jdk7/8:T</span></code></pre><h1 id="垃圾回收-1"><a href="#垃圾回收-1" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>垃圾是指在运行程序中没有任何指针指向的对象。</p><p>自动内存管理，降低内存泄露和内存溢出的风险。程序员可以更专心地专注业务开发。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h3><p>允许开发人员提供对象被销毁之前的自定义处理逻辑。子类可以重写这个方法，用于在对象被回收时候进行资源释放。一个对象的finalize()只能被调用一次。</p><p>永远不要主动调用某个对象的finalize()方法，应该交给垃圾回收机制调用。理由有三：</p><ol><li>在finalize()时可能会导致对象复活</li><li>finalize()执行时间是没有保障的，完全由gc线程决定，极端情况下，如果不发生gc，则finalize()将没有执行机会</li><li>糟糕的实现会严重影响gc性能</li></ol><p>对象三种可能的状态：可触及的，可复活的，不可触及的</p><p>判定一个对象a是否应该被回收，要经历两次过程：</p><ol><li>如果对象a到gc roots没有引用链，进行第一次标记。</li><li>判断a是否有必要执行finalize()方法。如果该类没有重写finalize()或者已经被jvm调用过，则a被判定为不可触及。如果重写过该方法且还未被执行，那么a会被插入到F-Queue队列中，有jvm自动创建的、低优先级的Finalizer线程触发其finalize()。gc会对队列中的对象进行二次标记。如果a在finalize()中与引用链上任意对象建立了联系，那么第二次标记时，a会被移出即将回收集合。</li></ol><h3 id="查看GC-Roots"><a href="#查看GC-Roots" class="headerlink" title="查看GC Roots"></a>查看GC Roots</h3><p>MAT是memory analyzer的简称，基于eclipse开发，用于java堆内存分析。</p><p>JProfiler是基于idea开发。</p><h3 id="System-gc-的理解"><a href="#System-gc-的理解" class="headerlink" title="System.gc()的理解"></a>System.gc()的理解</h3><p>默认情况下，显示触发FGC。然而System.gc()调用附带一个免责声明，无法保证对垃圾收集器的调用。 使用System.runFinalization()会强制调用使用引用对象的finalization()方法。</p><h3 id="内存溢出和内存泄露"><a href="#内存溢出和内存泄露" class="headerlink" title="内存溢出和内存泄露"></a>内存溢出和内存泄露</h3><p>OOM指没有空闲内存，并且垃圾收集器也无法提供更多内存。原因包括堆内存设置不够，或者代码中创建了大量大对象，并且长时间不能被回收。</p><p>内存泄漏是指只有对象不会再被程序用到了，但是gc又不能回收他们的情况。宽泛的讲，对象的生命周期过长(没有必要的长)，也可以算内存泄露。</p><p>举例：</p><ol><li><p>单例模式</p><p>单例的生命周期和应用程序一样长。如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，导致内存泄露。</p></li><li><p>未关闭资源</p><p>数据库连接，网络连接和io连接。</p></li></ol><h3 id="Stop-the-World"><a href="#Stop-the-World" class="headerlink" title="Stop the World"></a>Stop the World</h3><p>在gc事件发生过程中，产生应用程序的停顿。</p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>并发：CPU把一个时间段划分成几个片段，在这几个片段之间来回切换。让用户感觉到是多个应用程序同时进行。多个任务相互抢占资源。在GC指的是用户线程和垃圾收集线程同时执行。</p><p>并行：不同cpu执行不同进程。不互相抢占资源。在GC指的是多条垃圾手机线程同时执行，用户线程处于等待状态。</p><h3 id="安全点和安全区域"><a href="#安全点和安全区域" class="headerlink" title="安全点和安全区域"></a>安全点和安全区域</h3><p>安全点Safe Point：程序在运行的时候并不是在任何时间点上都能停顿下来开始gc。只有在特定的点才行。如果太少，可能导致gc等待的时间太长。如果太频繁，可能导致性能问题。可以选择执行时间较长的指令作为安全点，比如方法调用、循环跳转和异常跳转。</p><p>抢先式中断：首先中断所有线程，如果还有线程不在安全点，就恢复线程，让线程跑到安全点。</p><p>主动式中断：设置一个中断标志，各个线程运行到安全点的时候主动轮询这个标志，如果标志为真，则将自己进行中断挂起。</p><p>安全区域：线程处于sleep状态或者blocked转态，无法响应jvm的中断请求，到安全点去中断挂起。安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始gc都是安全的。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>4种引用强度依次减弱。除了强引用，都可以在java.lang.ref包中找到。</p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>最传统的引用定义。new一个对象。只要强引用存在，垃圾收集器永远不能回收掉被引用的对象。</p><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果回收后仍然没有足够内存，才会报OOM。</p><p>高速缓存有用到。</p><pre class=" language-java"><code class="language-java">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SoftReference<span class="token operator">&lt;</span>Object<span class="token operator">></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> null<span class="token punctuation">;</span></code></pre><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>对象只能生存到下一次垃圾收集之前。无论内存空间是否足够，都会被回收。</p><p><em>开发中使用WeakHashMap?</em></p><p>Entry&lt;K, V&gt; extends WeakReference</p><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。唯一目的就是能在这个对象被收集器回收时收到一个系统通知(对象回收跟踪)。不能单独使用，无法通过虚引用来获取被引用的对象。</p><h4 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h4><p>实现对象的finalize()方法。无需手动编码，其内部配合引用队列使用。</p><h2 id="标记阶段"><a href="#标记阶段" class="headerlink" title="标记阶段"></a>标记阶段</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>对每个对象保存一个引用计数器属性，用于记录对象被引用的情况。</p><p>优点：实现简单，垃圾对象便于辨别；判定效率高，回收没有延迟性</p><p>缺点：增加了存储空间的开销；每次赋值都需要更新，增加时间开销；无法处理循环引用的情况</p><p>python如何解决循环引用：手动解除；使用弱引用weakref</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>也叫根搜索算法和追踪性垃圾收集。以跟对象集合(GC Roots)为起始点，从上而下搜索被该集合所连接的目标是否可达。搜索经过的路径被称为引用链。不可达的被标记为垃圾。</p><p>GC Roots:</p><ol><li>栈中引用的对象</li><li>本地方法栈内引用的对象</li><li>方法区中类静态属性的引用的对象</li><li>方法区中常量引用的对象</li><li>被同步锁持有的对象</li><li>jvm内部的引用</li></ol><p>如果要使用可达性分析算法，分析工作必须在一个能保障一致性的快照中进行。这也是导致GC进行时必须stop the world的一个重要原因。</p><h2 id="清除阶段"><a href="#清除阶段" class="headerlink" title="清除阶段"></a>清除阶段</h2><p>在成功区分出内存中存活对象和死亡对象后，gc接下来的任务就是执行垃圾回收。</p><h3 id="标记-清除-Mark-Sweep"><a href="#标记-清除-Mark-Sweep" class="headerlink" title="标记-清除 Mark-Sweep"></a>标记-清除 Mark-Sweep</h3><p>标记时Collector从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的header中记录为可达对象。清除时Collector对堆内存从头到尾进行线性遍历，如果发现某个对象在header中没有标记为可达对象，则将其回收。这里的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表中。下次有新对象需要加载，判断垃圾的位置空间是否足够。</p><p>优点：</p><ol><li>易于理解</li></ol><p>缺点：</p><ol><li><p>效率不高  </p></li><li><p>在进行gc时，需要停止整个应用程序</p></li><li><p>会产生许多碎片空间</p></li></ol><h3 id="复制-Copying"><a href="#复制-Copying" class="headerlink" title="复制 Copying"></a>复制 Copying</h3><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中。</p><p>高效性建立在存活对象少，垃圾对象多。在新生代经常发生。</p><p>优点：</p><ol><li>运行高效</li><li>没有碎片</li></ol><p>缺点：</p><ol><li>缩小了一半空间</li><li>需要维护region之间对象引用关系</li></ol><h3 id="标记-压缩-Mark-Compact"><a href="#标记-压缩-Mark-Compact" class="headerlink" title="标记-压缩 Mark-Compact"></a>标记-压缩 Mark-Compact</h3><p>第一阶段和标记-清除算法一样，标记出所有被引用的对象。第二阶段将存活的对象压缩到内存的一段，按顺序排放，清理边界外所有空间。</p><p>优点：</p><ol><li>没有碎片，只需要记录内存起始地址(指针碰撞)</li><li>消除了复制算法中内存减半的高额代价</li></ol><p>缺点：</p><ol><li>效率低</li><li>有可能需要调整引用的地址</li></ol><h2 id="复合算法思路"><a href="#复合算法思路" class="headerlink" title="复合算法思路"></a>复合算法思路</h2><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>不同对象的生命周期是不一样的。可以采取不同的收集方式，提高回收效率。</p><p>年轻代的特点就是对象生命周期短，存活率低，回收频繁。复制算法在这种情况是比较合适的。老年代区域较大，对象生命周期长，存活率高。标记-整理和标记-清除的混合实现比较适合。</p><h3 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h3><p>如果一次性将所有垃圾进行处理，需要造成系统长时间的停顿。不如让垃圾收集线程和应用程序线程交替执行。每次只收集一小片区域的内存空间，允许垃圾收集线程以分阶段的方式完成标记、清理和复制工作。本质仍然是传统的标记-清除和复制算法。</p><p>缺点：</p><ol><li>线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升</li></ol><h3 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h3><p>为了更好控制gc产生的停顿时间，将一块大的内存区域分割成多个小块。每一个小区间独立使用，独立回收。</p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><p>使用<code>-XX:+PrintCommandLineFlags</code>查看默认垃圾回收器。</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><h4 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h4><p>并发式垃圾回收：与应用程序线程交替工作，尽可能减少停顿时间。</p><p>独占式垃圾回收：一旦运行，需要STW。</p><h4 id="碎片处理方式"><a href="#碎片处理方式" class="headerlink" title="碎片处理方式"></a>碎片处理方式</h4><p>压缩式垃圾回收：消除碎片。再分配对象空间，使用指针碰撞。</p><p>非压缩式垃圾回收：不进行消除碎片。再分配对象空间，使用空闲列表。</p><h4 id="工作的内存区间"><a href="#工作的内存区间" class="headerlink" title="工作的内存区间"></a>工作的内存区间</h4><p>年轻代</p><p>老年代</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><p><strong>吞吐量</strong> throughput</p><p>运行用户代码的时间占总运行时间的比例。补数是垃圾收集开销。吞吐量优先意味着总暂停时间尽可能短。</p><p><strong>暂停时间</strong> pause time</p><p>执行垃圾收集时，程序的工作线程被暂停的时间。暂停时间优先意味着让单次STW的时间尽可能短。</p><p><strong>收集频率</strong></p><p>相对于应用程序的执行，gc发生的频率。</p><p><strong>内存占用</strong></p><p>java堆区所占的内存大小。</p><p><strong>快速</strong></p><p>一个对象从诞生到被回收所经历的时间。</p><h3 id="常见垃圾收集器"><a href="#常见垃圾收集器" class="headerlink" title="常见垃圾收集器"></a>常见垃圾收集器</h3><p>新生代：Serial, ParNew, Parallel Scavenge</p><p>老年代：Serial Old GC, Parallel Old GC, CMS GC</p><p>整堆：G1</p><p>组合关系</p><img src="02jvm_gc.PNG"><p>两个收集器间有连线，表明它们可以搭配使用：Serial/Serial old、Serial/CMS、ParNew/Serial old、ParNew/CMS、Parallel Scavenge/Serial 0ld、Parallel Scavenge/Parallel 01d、G1；<br>其中Serial o1d作为CMs出现”Concurrent Mode Failure”失败的后备预案。<br>（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。<br>（绿色虚线）JDK14中：弃用Parallel Scavenge和Serialold GC组合（JEP366）<br>（青色虚线）JDK14中：删除CMS垃圾回收器（JEP363）</p><h4 id="Serial-GC"><a href="#Serial-GC" class="headerlink" title="Serial GC"></a>Serial GC</h4><p>串行回收。最基本最悠久的垃圾回收器。在Client模式下是默认的新生代垃圾收集器。</p><p>采用复制算法。除了年轻代，还提供了用于老年代的Serial Old收集器，采用标记-压缩算法。Serial Old在Server模式下，可以与新生代Parallel Scavenge配合使用，也可以作为老年代CMS收集器的后备垃圾收集方案。</p><p>只使用一个cpu线程去完成垃圾收集工作。需要STW。</p><p>优点：</p><ol><li>简单高效，没有线程交互开销</li></ol><p>缺点：</p><ol><li>等待时间久</li></ol><h4 id="ParNew-GC"><a href="#ParNew-GC" class="headerlink" title="ParNew GC"></a>ParNew GC</h4><p>并行回收。相当于Serial GC的多线程版本。在Server模式下是默认的新生代垃圾收集器。</p><p>采用复制算法。可以与CMS收集器配合使用。</p><h4 id="Parallel-Scavenge-GC"><a href="#Parallel-Scavenge-GC" class="headerlink" title="Parallel Scavenge GC"></a>Parallel Scavenge GC</h4><p>吞吐量优先。新生代垃圾收集器。采用复制算法。和ParNew GC的区别是：目标是达到一个可控制的吞吐量，有自适应调节策略。</p><p>高吞吐量则可以高效率地利用cpu时间。适合在后天运算而不需要太多交互的任务，比如执行批量处理、订单处理、工资支付、科学计算。</p><p>提供了用于执行老年代垃圾收集的Parallel Old收集器，用来代替老年代的Serial Old收集器。</p><p>在java8中作为默认垃圾收集器。</p><h4 id="CMS-Concurrent-Mark-Sweep"><a href="#CMS-Concurrent-Mark-Sweep" class="headerlink" title="CMS (Concurrent Mark Sweep)"></a>CMS (Concurrent Mark Sweep)</h4><p>低延迟。第一次实现了让垃圾收集线程和用户线程同时工作。基于标记-清除实现的。对于碎片问题，使用基于标记-整理的Serial Old回收器作为补偿措施。</p><p>工作原理分为4个阶段。</p><p>初始标记：STW。标记GC Roots能直接关联到的对象。速度非常快。</p><p>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程。耗时较长，但是不需要暂停用户线程。</p><p>重新标记：STW。修正并发标记期间，因为用户程序继续运作而导致的标记产生变动的那一部分。时间不会太长。</p><p>并发清除：清理判断已经死亡的对象，释放内存。</p><p>由于在垃圾收集阶段用户线程没有中断，在回收过程中，应该确保应用程序用户线程有足够的内存可用。要是CMS运行期间预留的内存无法满足程序需要，就会出现Concurrent Mode Failure失败，jvm会临时启用Serial Old收集器重新进行老年代的垃圾收集。</p><p><em>不能使用mark compact的原因？</em></p><p>并发清除的时候，用户线程仍然在执行，使用compact整理内存会修改用户线程使用的内存。</p><p>优点：</p><ol><li>并发收集，低延迟</li></ol><p>缺点：</p><ol><li>内存碎片，导致老年代无法分配大对象，可能提前触发FGC。</li><li>对cpu资源非常敏感。并发阶段，占用了一部分线程，导致应用程序变慢，吞吐量低。</li><li>无法处理浮动垃圾。在并发标记阶段如果产生新的垃圾对象，CMS无法对这些垃圾进行标记。</li></ol><h4 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h4><p>区域化分代式。在延迟可控的情况下获得尽可能高的吞吐量。</p><p>有计划地避免在整个堆中进行全区域的垃圾收集。G1跟踪各个区域里面的垃圾堆积的价值大小（所获得的的空间大小以及回收所需时间），在后头维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的区域。</p><p>优点：</p><ol><li>既可以并行也可以并发</li><li>同时兼顾年轻代和老年代，不要求空间连续</li><li>空间整合，将内存划分为不同区域，区域之间是复制算法，但整体上实际可看作是标记-压缩算法。有利于程序长时间运行。</li><li>可预测的停顿时间</li></ol><p>缺点：</p><ol><li>占用额外的内存空间来存放记忆集</li></ol><p>应用场景：</p><p>面向服务端应用，针对具有大内存、多处理器的机器。在下面情况，应该使用G1替换CMS：超过50%的java对被活动数据占用，对象分配频率或年代提升频率变化大，gc停顿时间过长。</p><p><strong>分区Region</strong></p><p>将java堆划分成2048个大小相同的独立区域，每个区域的大小根据堆空间的实际大小而定。所有的region大小相同，而且在jvm生命周期内不会被改变。新生代和老年代不再是物理隔离的，只是逻辑上的连续。大对象放到humongous区（适合处理短期存在的大对象）。</p><p>回收过程包括三个环节。G1的初衷就是避免FGC的出现。如果三个环节不能正常工作，仍然会触发FGC。原因大概有两个：evacuation的时候没有足够的to-space来存放晋升对象；并发处理过程完成之前空间耗尽。</p><p>年轻代GC：</p><p>并行的独占式收集器。扫描GC Roots，更新记忆集，处理记忆集，复制对象，处理引用。</p><p>老年代并发标记过程Concurrent Marking：</p><p>堆内存达到阈值(默认45%)开始。初始标记，跟区域扫描(扫描Survivor区直接可达的老年代区域对象)，并发标记(计算区域的对象活性)，再次标记(采用了比CMS更快的初始快照算法)，独占清理，并发清理。</p><p>混合回收：</p><p>整个年轻代和一部分老年代都有回收。</p><p><strong>记忆集 Remembered set</strong></p><p>一个Region不是孤立的，其中的对象可能被其他任意Region中对象引用。判断对象存活时，需要扫描整堆才能保证准确。回收新生代的同时需要扫描老年代，极大降低YGC的效率。</p><p>为了解决这个问题，jvm使用记忆集来避免全局扫描。每一个region都有对应的记忆集。每次reference类型数据写操作时，都会产生一个write barrier暂时中断操作。检查将要写入的引用指向的对象是否和该reference类型数据在不同的region。如果不同，通过card table把相关引用信息记录到记忆集。</p><img src="03jvm_gctable.PNG" ><h4 id="Epsilon-GC"><a href="#Epsilon-GC" class="headerlink" title="Epsilon GC"></a>Epsilon GC</h4><p>no-op garbage collector. 内存分配完之后不需要执行垃圾回收程序就结束了。</p><h4 id="Shenandoah-GC"><a href="#Shenandoah-GC" class="headerlink" title="Shenandoah GC"></a>Shenandoah GC</h4><p>第一款不由Oracle公司团队领导开发的HotSpot垃圾收集器。实现低延迟的需求。团队宣称暂停时间和堆大小无关。</p><h4 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h4><p>与Shenandoah目标高度相似。在尽可能对吞吐量影响不大的前提下，实现在任意堆内存下大小下都可以把垃圾收集的停顿时间限制在10毫秒以内。可并发的标记-压缩算法。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.bilibili.com/video/BV1PJ411n7xZ">宋红康JVM教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 16 nlp</title>
      <link href="/Blog/2020/07/22/hands-on-16-nlp/"/>
      <url>/Blog/2020/07/22/hands-on-16-nlp/</url>
      
        <content type="html"><![CDATA[<h1 id="Generate-Text-with-Character-RNN"><a href="#Generate-Text-with-Character-RNN" class="headerlink" title="Generate Text with Character RNN"></a>Generate Text with Character RNN</h1><p>Encode every character as an integer. Encode the full text so each character is represented by its ID. </p><pre class=" language-python"><code class="language-python">tok <span class="token operator">=</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>text<span class="token punctuation">.</span>Tokenizer<span class="token punctuation">(</span>char_level<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>tok<span class="token punctuation">.</span>fit_on_texts<span class="token punctuation">(</span><span class="token punctuation">[</span>shakespeare<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>encoded<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span>texts_to_sequences<span class="token punctuation">(</span><span class="token punctuation">[</span>shakespeare<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span></code></pre><h3 id="Split-a-Sequential-Dataset"><a href="#Split-a-Sequential-Dataset" class="headerlink" title="Split a Sequential Dataset"></a>Split a Sequential Dataset</h3><p>It is often safer to split across time, which assumes that the patterns in the past still exist in the future (financial markets may violate this). If split across correlated samples, the test set will not be as useful. </p><pre class=" language-python"><code class="language-python">train_size <span class="token operator">=</span> data_size <span class="token operator">*</span> <span class="token number">90</span> <span class="token operator">//</span> <span class="token number">100</span> data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span>encoded<span class="token punctuation">[</span><span class="token punctuation">:</span>train_size<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Chopping-into-Multiple-Windows"><a href="#Chopping-into-Multiple-Windows" class="headerlink" title="Chopping into Multiple Windows"></a>Chopping into Multiple Windows</h3><p><strong>Truncated backpropagation through time</strong></p><p>Every instance in the dataset will be a fairly short substring of the whole text. </p><pre class=" language-python"><code class="language-python">n_steps <span class="token operator">=</span> <span class="token number">10</span>window_len <span class="token operator">=</span> n_steps <span class="token operator">+</span> <span class="token number">1</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>window<span class="token punctuation">(</span>window_len<span class="token punctuation">,</span> shift<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> drop_remainder<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>The window() method creates a dataset that contains windows, each of which is also represented as a dataset (nested dataset). To feed this as input to models, we need to flat them. </p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>flat_map<span class="token punctuation">(</span><span class="token keyword">lambda</span> w<span class="token punctuation">:</span> w<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>window_len<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>We shuffle these windows. </p><pre class=" language-python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">32</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> w<span class="token punctuation">:</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="1601.PNG" alt="process display"><p>Categorical input features needed to be encoded. </p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> xBatch<span class="token punctuation">,</span> yBatch<span class="token punctuation">:</span> <span class="token punctuation">(</span>tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>xBatch<span class="token punctuation">,</span> depth<span class="token operator">=</span>max_id<span class="token punctuation">)</span><span class="token punctuation">,</span> yBatch<span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="Create-the-Model"><a href="#Create-the-Model" class="headerlink" title="Create the Model"></a>Create the Model</h3><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> return_sequence<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>         input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> max_id<span class="token punctuation">]</span><span class="token punctuation">,</span>         dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> recurrent_dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> return_sequence<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>         input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> max_id<span class="token punctuation">]</span><span class="token punctuation">,</span>         dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> recurrent_dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>max_id<span class="token punctuation">,</span>                                 activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>We need to preprocess the text before feed to the model. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span>texts_to_sequences<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> max_id<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">x_test <span class="token operator">=</span> preprocess<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"how are yo"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict_classes<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>tokenizer<span class="token punctuation">.</span>sequences_to_texts<span class="token punctuation">(</span>y_pred<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="Generate-Text"><a href="#Generate-Text" class="headerlink" title="Generate Text"></a>Generate Text</h3><p>To have more control over the diversity of the generated text, we can divide the logits by a number called the temperature. If the temperature is close 0, models favor the high probability characters; otherwise, models will give all characters an equal probability. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">next_char</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x_new <span class="token operator">=</span> preprocess<span class="token punctuation">(</span><span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span>    y_proba <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_new<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    rescaled_logits <span class="token operator">=</span> tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y_proba<span class="token punctuation">)</span><span class="token operator">/</span>temp    char_id <span class="token operator">=</span> tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>categorical<span class="token punctuation">(</span>rescaled_logits<span class="token punctuation">,</span>                                    num_samples<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> tokenizer<span class="token punctuation">.</span>sequences_to_texts<span class="token punctuation">(</span>char_id<span class="token punctuation">,</span> numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">complete_text</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> n_chars<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_chars<span class="token punctuation">)</span><span class="token punctuation">:</span>        text <span class="token operator">+=</span> next_char<span class="token punctuation">(</span>text<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>    <span class="token keyword">return</span> text</code></pre><h3 id="Stateful-RNN"><a href="#Stateful-RNN" class="headerlink" title="Stateful RNN"></a>Stateful RNN</h3><p>stateless RNN: at each training iteration, the model starts with a hidden state full of zeros. </p><p>stateful RNN: Preserve the final state after processing one batch and use it as initial state for the next batch. This only makes sense if each input sequence in a batch starts exactly where the corresponding sequence in the previous batch left off. </p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span>encoded<span class="token punctuation">[</span><span class="token punctuation">:</span>train_size<span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>window<span class="token punctuation">(</span>window_len<span class="token punctuation">,</span> shift<span class="token operator">=</span>n_steps<span class="token punctuation">,</span>                    drop_remainder<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>flat_map<span class="token punctuation">(</span><span class="token keyword">lambda</span> w<span class="token punctuation">:</span> w<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>window_len<span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> w<span class="token punctuation">:</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> depth<span class="token operator">=</span>max_id<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><img src="1602.PNG" alt="stateful preprocess"><p>create the model. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> recurrent_dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>        batch_input_shape<span class="token operator">=</span><span class="token punctuation">[</span>batch_size<span class="token punctuation">,</span> None<span class="token punctuation">,</span> max_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> recurrent_dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>        batch_input_shape<span class="token operator">=</span><span class="token punctuation">[</span>batch_size<span class="token punctuation">,</span> None<span class="token punctuation">,</span> max_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>max_id<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>At the end of each epoch, we need to reset the states before we go back to the beginning of the text. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResetStates</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>Callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">on_epoch_begin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> logs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>reset_states<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> callbacks<span class="token operator">=</span><span class="token punctuation">[</span>ResetStates<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>After this model is trained, it will only be possible to use it to make predictions for batches of the same size as were used during training. To avoid this restriction, create an identical stateless model, and copy the weights. </p><h1 id="Sentiment-Analysis"><a href="#Sentiment-Analysis" class="headerlink" title="Sentiment Analysis"></a>Sentiment Analysis</h1><p>Preprocessing. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">prep</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>strings<span class="token punctuation">.</span>substr<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>strings<span class="token punctuation">.</span>regex_replace<span class="token punctuation">(</span>x<span class="token punctuation">,</span> b<span class="token string">"&lt;br\\s*/?>"</span><span class="token punctuation">,</span> b<span class="token string">" "</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>strings<span class="token punctuation">.</span>regex_replace<span class="token punctuation">(</span>x<span class="token punctuation">,</span> b<span class="token string">"[^a-zA-Z']"</span><span class="token punctuation">,</span> b<span class="token string">" "</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>strings<span class="token punctuation">.</span>split<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>default_value<span class="token operator">=</span>b<span class="token string">"&lt;pad>"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y</code></pre><p>Truncating the reviews and keeping only first 300 chars will not impact performance too much and will speed up training. In the end, it splits by spaces, which returns a ragged tensor, and converts to a dense tensor. </p><pre class=" language-python"><code class="language-python">voc <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> dataset<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>prep<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> review <span class="token keyword">in</span> x<span class="token punctuation">:</span>        voc<span class="token punctuation">.</span>update<span class="token punctuation">(</span>list<span class="token punctuation">(</span>review<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>We do not need low freq words. </p><pre class=" language-python"><code class="language-python">voc_size <span class="token operator">=</span> <span class="token number">10000</span>truncated_voc <span class="token operator">=</span> <span class="token punctuation">[</span>w <span class="token keyword">for</span> w<span class="token punctuation">,</span> c <span class="token keyword">in</span> voc<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>voc_size<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>Replace each word with its index in the vocab. </p><pre class=" language-python"><code class="language-python">words <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span>truncated_voc<span class="token punctuation">)</span>word_idx <span class="token operator">=</span> tf<span class="token punctuation">.</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>truncated_voc<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>vocab_init <span class="token operator">=</span> tf<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span>KeyValueTensorInitializer<span class="token punctuation">(</span>words<span class="token punctuation">,</span> word_idx<span class="token punctuation">)</span>num_oov_buckets <span class="token operator">=</span> <span class="token number">1000</span>table <span class="token operator">=</span> tf<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span>StaticVocabularyTable<span class="token punctuation">(</span>vocab_init<span class="token punctuation">,</span> num_oov_buckets<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># look up the idx of words</span>table<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">"This movie was goooood"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>A word found in table will be mapped to ID lower than 10,000. Else, it will be mapped to one of oov buckets, with an ID $\ge$ 10,000.</p><p>We batch and then convert them to short sequences, and then encode them. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encode_words</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> table<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> ytrain_set <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>preprocess<span class="token punctuation">)</span>train_set <span class="token operator">=</span> train_set<span class="token punctuation">.</span>map<span class="token punctuation">(</span>encode_words<span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>Create the model. </p><pre class=" language-python"><code class="language-python">embed_size <span class="token operator">=</span> <span class="token number">128</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Embedding<span class="token punctuation">(</span>vocab_size <span class="token operator">+</span> num_oov_buckets<span class="token punctuation">,</span>              embed_size<span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>The first layer convert word index into embedding. The embedding matrix needs to have one row per word index and one column per embedding dimension (hyperparameter). The input of the model will be 2D tensors of shape [batch size, time steps], and the output of the embedding layer will be of shape [batch size, time steps, embedding size]. </p><h3 id="Masking"><a href="#Masking" class="headerlink" title="Masking"></a>Masking</h3><p>The model should learn that the padding tokens should be ignored. The following code means that padding tokens will be ignored by all downstream layers. </p><pre class=" language-python"><code class="language-python">Embedding<span class="token punctuation">(</span>mask_zero<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>It works by creating a mask tensor (boolean tensor) on time dimension. All layers that receive the mask must support masking, or an exception will be raised. </p><p>The following code demonstrates the case we need to explicitly compute the mask. </p><pre class=" language-python"><code class="language-python">K <span class="token operator">=</span> keras<span class="token punctuation">.</span>backendinputs <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> inputs<span class="token punctuation">:</span> K<span class="token punctuation">.</span>not_equal<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>z <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>vocab_size<span class="token operator">+</span>num_oov_buckets<span class="token punctuation">,</span> embed_size<span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>z <span class="token operator">=</span> GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>z <span class="token operator">=</span> GRU<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>out <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>inputs<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>out<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Reuse-Pretrained-Embeddings"><a href="#Reuse-Pretrained-Embeddings" class="headerlink" title="Reuse Pretrained Embeddings"></a>Reuse Pretrained Embeddings</h3><p>Pretrained model components are called modules. Not all TF Hub modules support TensorFlow 2. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow_hub <span class="token keyword">as</span> hubmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    hub<span class="token punctuation">.</span>KerasLayer<span class="token punctuation">(</span><span class="token string">"https:"</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>string<span class="token punctuation">,</span>                   input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> output_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h1 id="Neural-Machine-Translation-NMT"><a href="#Neural-Machine-Translation-NMT" class="headerlink" title="Neural Machine Translation (NMT)"></a>Neural Machine Translation (NMT)</h1><p>For example, English to Chinese. </p><p>English are fed to the encoder, and the decoder outputs the Chinese. Note that the Chinese translations are also used as inputs to the decoder, but shifted back by one step. For the very first word, it is given the start-of-seq token. </p><p>Before fed to the encode, English sentences are reversed, which ensures that the beginning will be fed last to the encoder, which is useful because that is generally the first thing that the decoder needs to translate. </p><p>At each step, the decoder outputs a score for each word in the output vocab, and softmax turns these into probabilities. </p><p>We assumed that all input sequences have a constant length. We can group sentences into buckets of similar lengths, using padding for the shorter sequences to ensure all sentences in a bucket have the same length. </p><p>We want to ignore any output past the EOS token, so they should not contribute to the loss. </p><p>When output vocab is large, outputting a probability for each and every possible word would be slow. We can look only at the logits output by the model for the correct word and for a random sample of incorrect words. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow_addons <span class="token keyword">as</span> tfaencoder_inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>decoder_inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>seq_len <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>embeddings <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embed_size<span class="token punctuation">)</span>encoder_embeddings <span class="token operator">=</span> embeddings<span class="token punctuation">(</span>encoder_inputs<span class="token punctuation">)</span>decoder_embeddings <span class="token operator">=</span> embeddings<span class="token punctuation">(</span>decoder_inputs<span class="token punctuation">)</span>encoder <span class="token operator">=</span> LSTM<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> return_state<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>encoder_out<span class="token punctuation">,</span> state_h<span class="token punctuation">,</span> state_c <span class="token operator">=</span> encoder<span class="token punctuation">(</span>encoder_embeddings<span class="token punctuation">)</span>encoder_staet <span class="token operator">=</span> <span class="token punctuation">[</span>state_h<span class="token punctuation">,</span> state_c<span class="token punctuation">]</span>sampler <span class="token operator">=</span> tfa<span class="token punctuation">.</span>seq2seq<span class="token punctuation">.</span>sampler<span class="token punctuation">.</span>TrainingSampler<span class="token punctuation">(</span><span class="token punctuation">)</span>decoder_cell <span class="token operator">=</span> LSTMCell<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>output_layer <span class="token operator">=</span> Dense<span class="token punctuation">(</span>vocab_size<span class="token punctuation">)</span>decoder <span class="token operator">=</span> tfa<span class="token punctuation">.</span>seq2seq<span class="token punctuation">.</span>basic_decoder<span class="token punctuation">.</span>BasicDecoder<span class="token punctuation">(</span>decoder_cell<span class="token punctuation">,</span> sampler<span class="token punctuation">,</span> output_layer<span class="token operator">=</span>output_layer<span class="token punctuation">)</span>final_out<span class="token punctuation">,</span> final_state<span class="token punctuation">,</span> final_seq_len <span class="token operator">=</span> decoder<span class="token punctuation">(</span>decoder_embeddings<span class="token punctuation">,</span> initial_state<span class="token operator">=</span>encoder_state<span class="token punctuation">,</span> sequence_length<span class="token operator">=</span>seq_len<span class="token punctuation">)</span>y_proba <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>final_out<span class="token punctuation">.</span>rnn_output<span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>encoder_inputs<span class="token punctuation">,</span> decoder_inputs<span class="token punctuation">,</span> seq_len<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>y_proba<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>When creating the LSTM layer, we get its final hidden state and pass it to the decoder. It returns two hidden states, short and long term. The TrainingSampler tells the decoder at each step what it should pretend the previous output was. </p><h3 id="Bidirectional-RNNs"><a href="#Bidirectional-RNNs" class="headerlink" title="Bidirectional RNNs"></a>Bidirectional RNNs</h3><pre class=" language-python"><code class="language-python">Bidirectional<span class="token punctuation">(</span>GRU<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Create a copy with reverse direction at each layer. </p><h3 id="Beam-Search"><a href="#Beam-Search" class="headerlink" title="Beam Search"></a>Beam Search</h3><p>By greedily outputting the most likely word at each step, the model may end up with a suboptimal translation. We should keep a short list at each step. </p><pre class=" language-python"><code class="language-python">beam_width <span class="token operator">=</span> <span class="token number">10</span>decoder <span class="token operator">=</span> tfa<span class="token punctuation">.</span>seq2seq<span class="token punctuation">.</span>beam_search_decoder<span class="token punctuation">.</span>BeamSearchDecoder<span class="token punctuation">(</span>cell<span class="token operator">=</span>decoder_cell<span class="token punctuation">,</span> beam_width<span class="token operator">=</span>beam_width<span class="token punctuation">,</span> output_layer<span class="token operator">=</span>output_layer<span class="token punctuation">)</span>decoder_initial_state <span class="token operator">=</span> tfa<span class="token punctuation">.</span>seq2seq<span class="token punctuation">.</span>beam_search_decoder<span class="token punctuation">.</span>tile_batch<span class="token punctuation">(</span>encoder_state<span class="token punctuation">,</span> multiplier<span class="token operator">=</span>beam_width<span class="token punctuation">)</span>outputs<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _ <span class="token operator">=</span> decoder<span class="token punctuation">(</span>embedding_decoder<span class="token punctuation">,</span>         start_tokens<span class="token operator">=</span>start_tokens<span class="token punctuation">,</span> end_token<span class="token operator">=</span>end_token<span class="token punctuation">,</span>         initial_staet<span class="token operator">=</span>decoder_inital_state<span class="token punctuation">)</span></code></pre><h1 id="Attention-Mechanisms"><a href="#Attention-Mechanisms" class="headerlink" title="Attention Mechanisms"></a>Attention Mechanisms</h1><p>A technique that allows the decoder to focus on the appropriate words at each time step. Instead of send the encoder’s final hidden state to the decoder, we now send all of its outputs to the decoder. </p><p><strong>Bahdanau attention/Additive attention</strong></p><p>Concatenates the encoder output with the decoder’s previous hidden state, it is sometimes called concatenative attention. </p><p><strong>Luong attention/Multiplicative attention</strong></p><p>Both encoder and decoder vectors must have same dimensionality (roughly same length, solved by padding). The dot product gives a score, and all the scores go through a softmax layer to give the final weights. </p><pre class=" language-python"><code class="language-python">att_me <span class="token operator">=</span> tfa<span class="token punctuation">.</span>seq2seq<span class="token punctuation">.</span>attention_wrapper<span class="token punctuation">.</span>LuongAttention<span class="token punctuation">(</span>units<span class="token punctuation">,</span> encoder_state<span class="token punctuation">,</span> memory_sequence_length<span class="token operator">=</span>encoder_seq_len<span class="token punctuation">)</span>att_decoder_cell <span class="token operator">=</span> tfa<span class="token punctuation">.</span>seq2seq<span class="token punctuation">.</span>attention_wrapper<span class="token punctuation">.</span>AttentionWrapper<span class="token punctuation">(</span>decoder_cell<span class="token punctuation">,</span> attention_mechanism<span class="token punctuation">,</span> attention_layer_size<span class="token operator">=</span>n_units<span class="token punctuation">)</span></code></pre><h3 id="Visual-Attention"><a href="#Visual-Attention" class="headerlink" title="Visual Attention"></a>Visual Attention</h3><p>Attention mechanisms extend to other purposes. A CNN processes the image and outputs some feature maps, then a decoder RNN equipped with an attention mechanism generates the caption, one word at a time. </p><h3 id="Transformer-Architecture"><a href="#Transformer-Architecture" class="headerlink" title="Transformer Architecture"></a>Transformer Architecture</h3><img src="1603.PNG" alt="transformer"><p>The lefthand is the encoder. The input shape is [batch size, max input sentence length]. It encodes each word into a 512-dim representation. The top part of the encoder is stacked 6 times.</p><p>The right hand is the decoder. During training, it takes the target sentence as input, shifted one time step to the right. It also receives the outputs of the encoder. The top part of the decoder is also stacked 6 times. The encoder stack’s final outputs are fed to the decoder at each of these 6 levels. </p><p>During inference, the decoder cannot be fed targets, so we feed it the previously output words. So the model needs to be called repeatedly. </p><p>The encoder’s multi-head attention layer encodes each word’s relationship with every other word in the same sentence, paying more attention to the most relevant ones. </p><h4 id="positional-embeddings"><a href="#positional-embeddings" class="headerlink" title="positional embeddings"></a>positional embeddings</h4><p>A dense vector that encodes the position of a word within a sentence: the $i^{th}$ positional embedding is simply added to the word embedding of the the $i^{th}$ word in the sentence. </p><p>$P_{p, 2i} = sin(p/10000^{2i/d})$</p><p>$P_{p, 2i+1} = cos(p/10000^{2i/d})$</p><p>It can extend to arbitrarily long sentences. The choice of oscillating functions makes it possible for the model to learn relative positions as well. </p><p>There is no Positional Embedding layer in TF. Need to create one. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PositionalEncoding</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>slef<span class="token punctuation">,</span> max_steps<span class="token punctuation">,</span> max_dims<span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">if</span> max_dims <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            max_dims <span class="token operator">+=</span> <span class="token number">1</span>        p<span class="token punctuation">,</span> i <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>max_steps<span class="token punctuation">)</span><span class="token punctuation">,</span>                           np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>max_dims<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pos_emb <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max_steps<span class="token punctuation">,</span> max_dims<span class="token punctuation">)</span><span class="token punctuation">)</span>        pos_emb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>p<span class="token operator">/</span><span class="token number">10000</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">/</span>max_dims<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T        pos_emb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>p<span class="token operator">/</span><span class="token number">10000</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">/</span>max_dims<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T        self<span class="token punctuation">.</span>positional_embedding <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span>pos_emb<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        shape <span class="token operator">=</span> tf<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        <span class="token keyword">return</span> inputs<span class="token operator">+</span>self<span class="token punctuation">.</span>positional_embedding<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>Create the first layers of the transformer. </p><pre class=" language-python"><code class="language-python">embed_size <span class="token operator">=</span> <span class="token number">512</span>max_steps <span class="token operator">=</span> <span class="token number">500</span>vocab_size <span class="token operator">=</span> <span class="token number">10000</span>encoder_inputs <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>decoder_inputs <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>encoder_embeddings <span class="token operator">=</span> embeddings<span class="token punctuation">(</span>encoder_inputs<span class="token punctuation">)</span>decoder_embeddings <span class="token operator">=</span> embeddings<span class="token punctuation">(</span>decoder_inputs<span class="token punctuation">)</span>pos_encoding <span class="token operator">=</span> PositionalEncoding<span class="token punctuation">(</span>max_steps<span class="token punctuation">,</span> max_dims<span class="token operator">=</span>embed_size<span class="token punctuation">)</span>encoder_in <span class="token operator">=</span> pos_encoding<span class="token punctuation">(</span>encoder_embeddings<span class="token punctuation">)</span>decoder_in <span class="token operator">=</span> pos_encoding<span class="token punctuation">(</span>decoder_embeddings<span class="token punctuation">)</span></code></pre><h4 id="multi-head-attention"><a href="#multi-head-attention" class="headerlink" title="multi-head attention"></a>multi-head attention</h4><p>Based on scaled dot-product attention layer. </p><p>$Attention(Q,K,V) = softmax(\frac{QK^T}{\sqrt{d_{keys}}})V$</p><p>Q is the matrix containing one row per query with shape [$n_{queries}, d_{keys}$]. K is a matrix containing one row per key with shape [$n_{keys}, d_{keys}$]. V is a matrix containing one row per value with shape [$n_{keys}, d_{values}$]. </p><p>The shape of $QK^T$ is [$n_{queries}, n_{keys}$]. It contains one similarity score for each query/key pair. The output of the softmax function has the same shape. </p><p>The scaling factor scales down the similarity scores to avoid saturating the softmax function. </p><p>During training, we must mask out future output tokens. </p><pre class=" language-python"><code class="language-python">Z <span class="token operator">=</span> encoder_in<span class="token keyword">for</span> N <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Z <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Attention<span class="token punctuation">(</span>use_scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Z<span class="token punctuation">,</span>Z<span class="token punctuation">]</span><span class="token punctuation">)</span>encoder_out <span class="token operator">=</span> ZZ <span class="token operator">=</span> decoder_in<span class="token keyword">for</span> N <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Z <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Attention<span class="token punctuation">(</span>use_scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> causal<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Z<span class="token punctuation">,</span> Z<span class="token punctuation">]</span><span class="token punctuation">)</span>    Z <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Attention<span class="token punctuation">(</span>use_scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Z<span class="token punctuation">,</span> encoder_out<span class="token punctuation">]</span><span class="token punctuation">)</span>out <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span></code></pre><img src="1604.PNG" alt="multihead arch">]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 08 dimension reduction</title>
      <link href="/Blog/2020/07/22/hands-on-08-dimension-reduction/"/>
      <url>/Blog/2020/07/22/hands-on-08-dimension-reduction/</url>
      
        <content type="html"><![CDATA[<p>In some cases, reducing the dimensionality of the training data may filter out some noise and unnecessary details and thus result in higher performance, but in general it only speeds up training. </p><h1 id="Curse-of-Dimensionality"><a href="#Curse-of-Dimensionality" class="headerlink" title="Curse of Dimensionality"></a>Curse of Dimensionality</h1><p>Most points in a high-dimensional hypercube are very close to the border. High-dimensional datasets are at risk of being very sparse. (If we picked randomly in a 1,000,000 dimensional hypercube, the average dist is about 408). The more dimensions the training set has, the greater the risk of overfitting it. </p><h1 id="Main-Approaches-for-Dim-Reduction"><a href="#Main-Approaches-for-Dim-Reduction" class="headerlink" title="Main Approaches for Dim Reduction"></a>Main Approaches for Dim Reduction</h1><h3 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h3><p>Usually, training instances are not spread out uniformly across all dimensions. </p><p>In some cases, the subspace may twist and turn (e.g.: Swiss roll), and we should unroll it to obtain the 2D dataset. </p><h3 id="Manifold-Learning"><a href="#Manifold-Learning" class="headerlink" title="Manifold Learning"></a>Manifold Learning</h3><p>Work by modeling the manifold on which the training instances lie. It relies on the manifold assumption that most real world high-dim datasets lie close to a much lower-dimensional manifold. </p><h1 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h1><p>First, it identifies the hyperplane that lies closest to the data, and then it projects the data onto it. </p><h3 id="Preserving-the-Var"><a href="#Preserving-the-Var" class="headerlink" title="Preserving the Var"></a>Preserving the Var</h3><p>Select the axis that preserves the maximum amount of variance (lose less information than other projects). Another way to think about it is the axis that minimizes the mean square distance between the original dataset and its projection onto that axis. </p><h3 id="Principal-Components"><a href="#Principal-Components" class="headerlink" title="Principal Components"></a>Principal Components</h3><p>The i-th axis is called the i-th principal component of the data. We can use SVD to decompose the training set matrix X into the matrix multiplication of three matrics U, $\Sigma$, $V^T$. V contains the unit vectors that define all PC. </p><pre class=" language-python"><code class="language-python">X_centered <span class="token operator">=</span> X <span class="token operator">-</span> X<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>U<span class="token punctuation">,</span> s<span class="token punctuation">,</span> Vt <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>X_centered<span class="token punctuation">)</span>c1 <span class="token operator">=</span> Vt<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>c2 <span class="token operator">=</span> Vt<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>PCA assumes that dataset is centered around the origin. Scikit-learn’s PCA classes take care of this. Complexity if O(n^3) where n is the number of features. </p><h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3><p>To project the training set onto the hyperplane and obtain a reduced dataset of dimensionality d, compute multiplication of the original matrix by the new matrix defined by first d columns of V. </p><pre class=" language-python"><code class="language-python">W2 <span class="token operator">=</span> Vt<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>X2d <span class="token operator">=</span> X_centered@W2</code></pre><h3 id="Using-scikit-learn"><a href="#Using-scikit-learn" class="headerlink" title="Using scikit learn"></a>Using scikit learn</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">import</span> PCApca <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>X2d <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><h3 id="Explained-Variance-Ratio"><a href="#Explained-Variance-Ratio" class="headerlink" title="Explained Variance Ratio"></a>Explained Variance Ratio</h3><p>The ration indicates the proportion of the dataset’s variance that lies along each principal component. </p><pre class=" language-python"><code class="language-python">pca<span class="token punctuation">.</span>eplained_variance_ratio_</code></pre><h3 id="Choosing-the-right-dim"><a href="#Choosing-the-right-dim" class="headerlink" title="Choosing the right dim"></a>Choosing the right dim</h3><p>The following code performs PCA without reducing dimensionality, then computes the minimum number of dimensions required to preserve 95% of the var. We can then run PCA again. </p><pre class=" language-python"><code class="language-python">pca <span class="token operator">=</span> PCA<span class="token punctuation">(</span><span class="token punctuation">)</span>pca<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span>cumsum <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>pca<span class="token punctuation">.</span>explained_variance_ratio_<span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>cumsum<span class="token operator">>=</span><span class="token number">0.95</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>A better option. </p><pre class=" language-python"><code class="language-python">pca <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">)</span>x_reduced <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span></code></pre><p>Another option is to plot the explained variance as a function of the number of dimensions. There will usually be an elbow in the curve. </p><h3 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h3><p>It is also possible to decompress the reduced dataset back to high dim by applying the inverse transformation of the PCA projection (not exactly the original data, since some info is lost). The mean squared dist btw the original data and reconstructed data is called the reconstruction error. </p><pre class=" language-python"><code class="language-python">pca <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">)</span>X_reduced <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span>X_recovered <span class="token operator">=</span> pca<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>X_reduced<span class="token punctuation">)</span></code></pre><h3 id="Randomized-PCA"><a href="#Randomized-PCA" class="headerlink" title="Randomized PCA"></a>Randomized PCA</h3><p>scikit learn use a stochastic algorithm called Randomized PCA that quickly finds an approximation of the first d principal components. Its computational complexity is $O(m<em>d^2) + O(d^3)$ rather than  $O(m</em>n^2) + O(n^3)$. </p><pre class=" language-python"><code class="language-python">rnd_pca <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">,</span> svd_solver<span class="token operator">=</span><span class="token string">"randomized"</span><span class="token punctuation">)</span></code></pre><p>By default, the mode is “auto”. If m or n is greater than 500, and d is less than 80% of m or n, then randomized PCA will be used. </p><h3 id="Incremental-PCA"><a href="#Incremental-PCA" class="headerlink" title="Incremental PCA"></a>Incremental PCA</h3><p>The preceding implementations of PCA requires the whole training set to fit in memory in order for the alg to run. Using IPCA, we can split the training set into mini-batches. This is useful for large training sets and for applying PCA online. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">import</span> IncrementalPCAn_batches <span class="token operator">=</span> <span class="token number">100</span>inc_pca <span class="token operator">=</span> IncrementalPCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">for</span> x_batch <span class="token keyword">in</span> np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> n_batches<span class="token punctuation">)</span><span class="token punctuation">:</span>    inc_pca<span class="token punctuation">.</span>partial_fit<span class="token punctuation">(</span>x_batch<span class="token punctuation">)</span>X_reduced <span class="token operator">=</span> inc_pca<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span></code></pre><p>Alternatively, we can use memmap class to manipulate a large array stored in a binary file on disk as if it were in memory. </p><pre class=" language-python"><code class="language-python">X_mm <span class="token operator">=</span> np<span class="token punctuation">.</span>memmap<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"readonly"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> m <span class="token operator">//</span> n_batchesinc_pca <span class="token operator">=</span> IncrementalPCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>inc_pca<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_mm<span class="token punctuation">)</span></code></pre><h1 id="Kernel-PCA"><a href="#Kernel-PCA" class="headerlink" title="Kernel PCA"></a>Kernel PCA</h1><p>Kernel trick: match tech that implicitly maps instances into a very high-dim space, enabling nonlinear classification and reg with SVM. A linear decision boundary in the high-dimensional feature space corresponds to a complex nonlinear decision boundary in the original space. </p><p>Kernel PCA can preserve clusters of instances after projection, or sometimes even unrolling datasets that lie close to a twisted manifold. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn decomposition <span class="token keyword">import</span> KernelPCArbf_pca <span class="token operator">=</span> KernelPCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> kernel<span class="token operator">=</span><span class="token string">"rbf"</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.04</span><span class="token punctuation">)</span>X_reduced <span class="token operator">=</span> rbf_pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><h3 id="Tuning-Hyperparam"><a href="#Tuning-Hyperparam" class="headerlink" title="Tuning Hyperparam"></a>Tuning Hyperparam</h3><p>kPCA is an unsupervised learning alg, so there is no obvious performance measure to select the best kernel and hyperparams. Dimensionality reduction is often a preparation step for a supervised learning task, so we can use grid search to select the kernel and hyperparameters that lead to the best performance on that task. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_seleciton <span class="token keyword">import</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipelineclf <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">"kcpa"</span><span class="token punctuation">,</span> KernelPCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"log_reg"</span><span class="token punctuation">,</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>param_grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"kpca_gamma"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.03</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"kpca_kernel"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"rbf"</span><span class="token punctuation">,</span> <span class="token string">"sigmoid"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;]</span>grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>clf<span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>grid_search<span class="token punctuation">.</span>best_params<span class="token punctuation">)</span></code></pre><p>Another approach, entirely unsupervised: select the combo that yields the lowest reconstruction error. Note that reconstruction is not as easy as with linear PCA. We can ask scikit learn to take care of this for us. </p><pre class=" language-python"><code class="language-python">rbf_pca <span class="token operator">=</span> KernelPCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> kernel<span class="token operator">=</span><span class="token string">"rbf"</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.04</span><span class="token punctuation">,</span> fit_inverse_transform<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>X_reduced <span class="token operator">=</span> rbf_pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>X_preimage <span class="token operator">=</span> rbf_pca<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>X_reduced<span class="token punctuation">)</span>mean_squared_error<span class="token punctuation">(</span>X<span class="token punctuation">,</span> X_preimage<span class="token punctuation">)</span></code></pre><h1 id="Locally-Linear-Embedding-LLE"><a href="#Locally-Linear-Embedding-LLE" class="headerlink" title="Locally Linear Embedding (LLE)"></a>Locally Linear Embedding (LLE)</h1><p>Another powerful nonlinear dimensionality reduction technique. It is a manifold learning technique that does not rely on projections. It first measures how each training instance linearly relates to its closest neighbors, and then looking for a low dim representation of the training set where these local relationships are best preserved. This makes it particularly good at unrolling twisted manifolds. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>manifold <span class="token keyword">import</span> LocallyLinearEmbeddinglle <span class="token operator">=</span> LocallyLinearEmbedding<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n_neighbors<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>X_reduced <span class="token operator">=</span> lle<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><p>Scikit-learn’s LLE implementation has the following computational complexity: $O(m log(m)n log(k))$ for finding the k nearest neighbors, $O(mnk^3)$ for optimizing the weights, and $O(dm^2)$ for constructing the low-dimensional representations. The last term makes this algorithm scale poorly. </p><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><h3 id="Random-Projections"><a href="#Random-Projections" class="headerlink" title="Random Projections"></a>Random Projections</h3><p>The quality of the dimensionality reduction depends on the number of instances and the target dimensionality, not on the initial dimensionality. </p><h3 id="Multidimensional-Scaling"><a href="#Multidimensional-Scaling" class="headerlink" title="Multidimensional Scaling"></a>Multidimensional Scaling</h3><p>Reduces dimensionality while trying to preserve the distances between the instances. </p><h3 id="Isomap"><a href="#Isomap" class="headerlink" title="Isomap"></a>Isomap</h3><p>Creates a graph by connecting each instance to its nearest neighbors, then reduces dim while trying to preserve the geodesic dist between the instances. </p><h3 id="t-Distributed-Stochastic-Neighbor-Embedding-t-SNE"><a href="#t-Distributed-Stochastic-Neighbor-Embedding-t-SNE" class="headerlink" title="t-Distributed Stochastic Neighbor Embedding (t-SNE)"></a>t-Distributed Stochastic Neighbor Embedding (t-SNE)</h3><p>Keep similar instances close and dissimilar instances apart. Mostly used for visualization. </p><h3 id="Linear-Discriminant-Analysis-LDA"><a href="#Linear-Discriminant-Analysis-LDA" class="headerlink" title="Linear Discriminant Analysis (LDA)"></a>Linear Discriminant Analysis (LDA)</h3><p>Learns the most discriminative axes between the classes, and these axes can then be used to define a hyperplane onto which to project the data. The projection will keep classes as far apart as possible. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 09 unsupervised</title>
      <link href="/Blog/2020/07/22/hands-on-09-unsupervised/"/>
      <url>/Blog/2020/07/22/hands-on-09-unsupervised/</url>
      
        <content type="html"><![CDATA[<h1 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h1><p>Identify similar instances and assign them to clusters. </p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><ul><li><p>customer segmentation</p><p>Cluster customers based on their purchases. Recommender system. </p></li><li><p>data analysis</p><p>Analyze each cluster separately. </p></li><li><p>dimensionality reduction</p><p>See prev article. </p></li><li><p>anomaly detection</p><p>Unusual behavior. For example, fraud detection.  </p></li><li><p>semi-supervised learning</p><p>If we only have a few labels, we can perform clustering and propagate the labels to all the instances in the same cluster. </p></li><li><p>search engines</p><p>Search for images that are similar to a reference image. </p></li><li><p>segment an image</p><p>By clustering pixels according to color and replacing each pixel’s color with the mean color of its cluster, we can reduce the number of different colors in the image. We can detect the contour of each object. </p></li></ul><h3 id="K-Means"><a href="#K-Means" class="headerlink" title="K-Means"></a>K-Means</h3><p>Find each blob’s center and assign each instance to the closest blob.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeansk <span class="token operator">=</span> <span class="token number">5</span>kmeans <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span>k<span class="token punctuation">)</span>y_pred <span class="token operator">=</span> kmeans<span class="token punctuation">.</span>fit_predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>kmeans<span class="token punctuation">.</span>cluster_centers_</code></pre><p>Instead of assigning each instance to a single cluster, which is called hard clustering, it can be useful to give each instance a score per cluster (soft clustering). The score can be the distance between the instance and the centroid, or can be a similarity score. </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># measures distance</span>kmeans<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><p>If we have a high dimensional dataset, we end up with a k-dim dataset. </p><h4 id="Alg"><a href="#Alg" class="headerlink" title="Alg"></a>Alg</h4><p>The computational complexity is generally linear with respect to the number of instances m, the number of clusters k, and the number of dimensions n, if data has a clustering structure. Complexity if O(m*n*k*l). l is number of iteration. </p><h4 id="Centroid-Init"><a href="#Centroid-Init" class="headerlink" title="Centroid Init"></a>Centroid Init</h4><p>If we happen to know approximately where the centroids should be, we can set the <strong>init</strong> hyperparam to a numpy array. </p><pre class=" language-python"><code class="language-python">good_init <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>kmeans <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> init<span class="token operator">=</span>good_init<span class="token punctuation">,</span> n_init<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>Besides, we can run the alg multiple times with different random init and keep the best solution. The number of random init is controlled by <strong>n_init</strong> hyperparam: by default is 10. The metric to measure how good the model is is inertia: mean squared distance between each instance and its closest centroid. </p><h4 id="Accelerated-K-Means-and-mini-batch-k-Means"><a href="#Accelerated-K-Means-and-mini-batch-k-Means" class="headerlink" title="Accelerated K-Means and mini-batch k-Means"></a>Accelerated K-Means and mini-batch k-Means</h4><p>It accelerate the alg by avoiding many unnecessary distance calculations. It achieved this by using triangle inequality. This is used by default, unless we set <strong>algorithm</strong> to “full”.</p><p>Moreover, we can use mini-batches, moving the centroids just slightly  at each iteration. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> MiniBatchKMeansminibatch_km <span class="token operator">=</span> MiniBatchKMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>minibatch_km <span class="token operator">=</span> fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><h4 id="Find-optimal-number-of-clusters"><a href="#Find-optimal-number-of-clusters" class="headerlink" title="Find optimal number of clusters"></a>Find optimal number of clusters</h4><p>The inertia decreases when k increases, and thus is not a good measurement for choosing good k. A solution is to plot the inertia as a function of the number of clusters k, and choose the elbow point. This tech for choosing best k is rather coarse. </p><pre class=" language-python"><code class="language-python">kmeans_per_k <span class="token operator">=</span> <span class="token punctuation">[</span>KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span>k<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>inertias <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">.</span>inertia_ <span class="token keyword">for</span> model <span class="token keyword">in</span> kmeans_per_k<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inertias<span class="token punctuation">,</span> <span class="token string">"bo-"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"$k$"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Inertia"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'Elbow'</span><span class="token punctuation">,</span> xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> inertias<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.55</span><span class="token punctuation">,</span> <span class="token number">0.55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             textcoords<span class="token operator">=</span><span class="token string">'figure fraction'</span><span class="token punctuation">,</span>             fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>             arrowprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> shrink<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1300</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"inertia_vs_k_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>A more precise approach (computationally expensive) is to use the silhouette score, which is the mean silhouette coefficient over all the instances. The coefficient is (b-a)/max(a,b); a is the mean distance to the other instances in the same cluster, and b is the mean nearest cluster distance. The coefficient varies between -1 and +1. Close to +1 means that the instance is well inside its own cluster and far from other clusters, 0 means close to cluster boundary, -1 means may have been assigned wrongly. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> silhouette_scoresilhouette_score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> kmeans<span class="token punctuation">.</span>labels_<span class="token punctuation">)</span>scores <span class="token operator">=</span> <span class="token punctuation">[</span>silhouette_score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> model<span class="token punctuation">.</span>labels_<span class="token punctuation">)</span> <span class="token keyword">for</span> model <span class="token keyword">in</span> kmeans_per_k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> silhouette_scores<span class="token punctuation">,</span> <span class="token string">"bo-"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"$k$"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Silhouette score"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">0.55</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"silhouette_score_vs_k_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Furthermore, we can plot every instances’ silhouette coefficient, sorted by the cluster they are assigned to and by the value of the coefficient. This is called a silhouette diagram. The vertical dashed lines represent the silhouette score for each number of clusters. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> silhouette_samples<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>ticker <span class="token keyword">import</span> FixedLocator<span class="token punctuation">,</span> FixedFormatter<span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> kmeans_per_k<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>labels_    silhouette_coefficients <span class="token operator">=</span> silhouette_samples<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>    padding <span class="token operator">=</span> len<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">30</span>    pos <span class="token operator">=</span> padding    ticks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        coeffs <span class="token operator">=</span> silhouette_coefficients<span class="token punctuation">[</span>y_pred <span class="token operator">==</span> i<span class="token punctuation">]</span>        coeffs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        color <span class="token operator">=</span> mpl<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Spectral<span class="token punctuation">(</span>i <span class="token operator">/</span> k<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>fill_betweenx<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>pos<span class="token punctuation">,</span> pos <span class="token operator">+</span> len<span class="token punctuation">(</span>coeffs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> coeffs<span class="token punctuation">,</span>                          facecolor<span class="token operator">=</span>color<span class="token punctuation">,</span> edgecolor<span class="token operator">=</span>color<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">)</span>        ticks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pos <span class="token operator">+</span> len<span class="token punctuation">(</span>coeffs<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>        pos <span class="token operator">+=</span> len<span class="token punctuation">(</span>coeffs<span class="token punctuation">)</span> <span class="token operator">+</span> padding    plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>FixedLocator<span class="token punctuation">(</span>ticks<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_formatter<span class="token punctuation">(</span>FixedFormatter<span class="token punctuation">(</span>range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> k <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Cluster"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> k <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Silhouette Coefficient"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>labelbottom<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span>x<span class="token operator">=</span>silhouette_scores<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"$k=&amp;#123;&amp;#125;$"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"silhouette_analysis_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="Limits-of-K-Means"><a href="#Limits-of-K-Means" class="headerlink" title="Limits of K-Means"></a>Limits of K-Means</h4><p>We need to run the alg several times to avoid suboptimal, and we need to specify the number of clusters. Moreover, it does not behave well when the clusters have varying sizes, different densities or nonspherical shapes. </p><p>It is important to scale the input features before we run K-Means. It does not guarantee that all the clusters will be nice and spherical, but it generally improves things. </p><h3 id="Usage-for-Image-Segmentation"><a href="#Usage-for-Image-Segmentation" class="headerlink" title="Usage for Image Segmentation"></a>Usage for Image Segmentation</h3><p>Color segmentation. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>image <span class="token keyword">import</span> imreadimage <span class="token operator">=</span> imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">,</span> <span class="token string">"unsupervised_learning"</span><span class="token punctuation">,</span> <span class="token string">"ladybug.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span>shape<span class="token comment" spellcheck="true"># there are RGB channels</span>X <span class="token operator">=</span> image<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>kmeans <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clsters<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>segmented_img <span class="token operator">=</span> kmeans<span class="token punctuation">.</span>cluster_centers_<span class="token punctuation">[</span>kmeans<span class="token punctuation">.</span>labels_<span class="token punctuation">]</span>segmented_img <span class="token operator">=</span> segmented_img<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><h3 id="Preprocessing"><a href="#Preprocessing" class="headerlink" title="Preprocessing"></a>Preprocessing</h3><p>An efficient approach to dim reduction. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_digits<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCVX_digits<span class="token punctuation">,</span> y_digits <span class="token operator">=</span> load_digits<span class="token punctuation">(</span>return_X_y<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>xtrain<span class="token punctuation">,</span> xtest<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> ytest <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_digits<span class="token punctuation">,</span> y_digits<span class="token punctuation">)</span>pipeline <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">"kmeans"</span><span class="token punctuation">,</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"log_reg"</span><span class="token punctuation">,</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pipeline<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span>pipeline<span class="token punctuation">.</span>score<span class="token punctuation">(</span>xtest<span class="token punctuation">,</span> ytest<span class="token punctuation">)</span>param_grid <span class="token operator">=</span> dict<span class="token punctuation">(</span>kmeans_n_clusters<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>grid_clf <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>grid_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span>grid_clf<span class="token punctuation">.</span>best_params_grid_clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>xtest<span class="token punctuation">,</span> ytest<span class="token punctuation">)</span></code></pre><h3 id="Semi-Supervised-Learning"><a href="#Semi-Supervised-Learning" class="headerlink" title="Semi-Supervised Learning"></a>Semi-Supervised Learning</h3><p>We can find the image closest to the centroid (representative images).</p><pre class=" language-python"><code class="language-python">k <span class="token operator">=</span> <span class="token number">50</span>kmeans <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span>k<span class="token punctuation">)</span>X_digits_dist <span class="token operator">=</span> kmenas<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span>representative_digit_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>X_digits_dist<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>X_representative_digits <span class="token operator">=</span> xtrain<span class="token punctuation">[</span>representative_digit_idx<span class="token punctuation">]</span></code></pre><p>We can look at each image and manually label it, and then fit these representative images. </p><pre class=" language-python"><code class="language-python">y_representative_digits <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>log_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_representative_digits<span class="token punctuation">,</span> y_representative_digits<span class="token punctuation">)</span></code></pre><p>Furthermore, we can use label propagation. </p><pre class=" language-python"><code class="language-python">y_train_propagated <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span>len<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_train_propagated<span class="token punctuation">[</span>kmeans<span class="token punctuation">.</span>labels_<span class="token operator">==</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y_representative_digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span>log_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain_propagated<span class="token punctuation">)</span></code></pre><p>The problem is that we propagated each representative instances’ label to all the instances in the same cluster, including those located close to the cluster boundaries. We should try only propagate the labels to instances that are closest to the centroids. </p><pre class=" language-python"><code class="language-python">percentile_closest <span class="token operator">=</span> <span class="token number">20</span>X_cluster_dist <span class="token operator">=</span> X_digits_dist<span class="token punctuation">[</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kmeans<span class="token punctuation">.</span>labels_<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    in_cluster <span class="token operator">=</span><span class="token punctuation">(</span>kmeans<span class="token punctuation">.</span>labels_ <span class="token operator">==</span> i<span class="token punctuation">)</span>    cluster_dist <span class="token operator">=</span> X_cluster_dist<span class="token punctuation">[</span>in_cluster<span class="token punctuation">]</span>    cutoff_dist <span class="token operator">=</span> np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>cluster_dist<span class="token punctuation">,</span> percentile_closest<span class="token punctuation">)</span>    above_cutoff <span class="token operator">=</span> <span class="token punctuation">(</span>X_cluster_dist <span class="token operator">></span> cutoff_distance<span class="token punctuation">)</span>    X_cluster_dist<span class="token punctuation">[</span>in_cluster <span class="token operator">&amp;</span> above_cutoff<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>partially_propagated <span class="token operator">=</span> <span class="token punctuation">(</span>X_cluster_dist <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>Xtrain_partial <span class="token operator">=</span> xtrain<span class="token punctuation">[</span>partially_propagated<span class="token punctuation">]</span>ytrain_partial <span class="token operator">=</span> ytrain<span class="token punctuation">[</span>partally_propagated<span class="token punctuation">]</span></code></pre><h4 id="Active-Learning"><a href="#Active-Learning" class="headerlink" title="Active Learning"></a>Active Learning</h4><p>When a human expert interacts with the learning algorithm, providing labels for specific instances when the alg requests them. </p><p>The model is trained on the labeled instances gathered so far, and makes predictions on all unlabeled instances. Then the instances for which the model is most uncertain are given to the expert to be labeled. Iterate until the performance improvement stops being worth the labeling effort. </p><h3 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h3><p>Defines clusters as continuous regions of high density. </p><h4 id="Alg-1"><a href="#Alg-1" class="headerlink" title="Alg"></a>Alg</h4><p>For each instance, the alg counts how many instances are located within a small distance $\epsilon$ from it, and the region is called the instance’s $\epsilon-neighborhood$. </p><p>If an instance has at least <strong>min_samples</strong> instances in its $\epsilon-neighborhood$, then it is considered a core instance. </p><p>All instances in the neighborhood of a core instance belong to the same cluster. This neighborhood may include other core instances; therefore, a long sequence of neighboring core instances forms a single cluster. </p><p>Other instances are considered an anomaly. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> DBSCAN<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_moonsX<span class="token punctuation">,</span> y <span class="token operator">=</span> make_moons<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">)</span>dbscan <span class="token operator">=</span> DBSCAN<span class="token punctuation">(</span>eps<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> min_samples<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>dbscan<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># idx of core instance</span>dbscan<span class="token punctuation">.</span>core_sample_indices<span class="token comment" spellcheck="true"># core instances </span>dbscan<span class="token punctuation">.</span>componenets_</code></pre><p>However, the DBSCAN class does not have a predict() method, only a fit_predict() method. So we need to choose appropriate classification alg. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifierknn <span class="token operator">=</span> KneighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>dbscan<span class="token punctuation">.</span>components_<span class="token punctuation">,</span> dbscan<span class="token punctuation">.</span>labels_<span class="token punctuation">[</span>dbscan<span class="token punctuation">.</span>core_sample_indices_<span class="token punctuation">]</span><span class="token punctuation">)</span>knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span>knn<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span></code></pre><p>We only trained the classifier on the core instances, but we could also trained it on all instances (includes/excludes the anomalies).</p><p>We can introduce a max distance so that instances that are far away from clusters are classified as anomalies. </p><pre class=" language-python"><code class="language-python">y_dist<span class="token punctuation">,</span> y_pred_idx <span class="token operator">=</span> knn<span class="token punctuation">.</span>kneighbors<span class="token punctuation">(</span>X_new<span class="token punctuation">,</span> n_neighbors<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>y_pred <span class="token operator">=</span> dbscan<span class="token punctuation">.</span>labels_<span class="token punctuation">[</span>dbscan<span class="token punctuation">.</span>core_sample_indices_<span class="token punctuation">]</span><span class="token punctuation">[</span>y_pred_idx<span class="token punctuation">]</span>y_pred<span class="token punctuation">[</span>y_dist <span class="token operator">></span> <span class="token number">0.2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>y_pred<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>DBSCAN is robust to outliers and has just two hyperparams. </p><p>However, if the density varies significantly across the clusters, it can be impossible for it to capture all clusters. Its computational complexity is $O(m log m)$.</p><h1 id="Other-Clustering-Alg"><a href="#Other-Clustering-Alg" class="headerlink" title="Other Clustering Alg"></a>Other Clustering Alg</h1><h3 id="Agglomerative-clustering"><a href="#Agglomerative-clustering" class="headerlink" title="Agglomerative clustering"></a>Agglomerative clustering</h3><p>At each iteration, it connects the nearest pair of clusters. If we draw a tree with a branch of every pair of clusters that merged, we can get a binary tree of clusters. </p><h3 id="BIRCH"><a href="#BIRCH" class="headerlink" title="BIRCH"></a>BIRCH</h3><p>Balanced Iterative Reducing and Clustering using Hierarchies. Designed specifically for very large datasets. During training, it builds a tree structure containing enough info to quickly assign each new instance to a cluster, w/o storing all the instances in the tree: only use limited memory. </p><h3 id="Mean-Shift"><a href="#Mean-Shift" class="headerlink" title="Mean-Shift"></a>Mean-Shift</h3><p>The alg starts by placing a circle centered on each instance; then for each circle it computes the mean of all instances located within it, and it shifts the circle so that it is centered on the mean. It shifts the circles in the direction of higher density, until each of them find a local density max. Unlike DBSCAN, mean-shift tends to chop clusters into pieces when they have internal density variations. The time complexity is $O(m^2)$.</p><h3 id="Affinity-Propagation"><a href="#Affinity-Propagation" class="headerlink" title="Affinity Propagation"></a>Affinity Propagation</h3><p>Uses a voting system, where instances vote for similar instances to be their representatives. Can detect any number of clusters of different sizes. The time complexity is $O(m^2)$.</p><h3 id="Spectral-Clustering"><a href="#Spectral-Clustering" class="headerlink" title="Spectral Clustering"></a>Spectral Clustering</h3><p>Takes a similarity matrix between the instances and creates a low-dimensional embedding from it. Then, it use another clustering alg in this low-dim space. It can capture complex cluster structures, and it can also be used to cut graphs. It does not scale well to large numbers of instances, and it does not behave well when the clusters have very different size. </p><h1 id="Gaussian-Mixtures"><a href="#Gaussian-Mixtures" class="headerlink" title="Gaussian Mixtures"></a>Gaussian Mixtures</h1><p>A probabilistic model that assumes that the instances were generated from a mixture of several Gaussian distributions whose params are unknow. All instances generated from a single Gaussian dist form a cluster that typically looks like an ellipsoid. </p><p>In the simplest GMM, we must know in advance the number k of Gaussian distributions. For each instance, a cluster is picked randomly from among k clusters. The probability of choosing the j-th cluster is defined by the cluster’s weight $\phi^{(j)}$. The index of the cluster chosen for the i-th instance is noted $z^{(i)}$. If this index equals j, meaning assigned to the j-th cluster, the location $x^{(i)}$ of this instance is sampled randomly from Gaussian distribution with mean $\mu^{(j)}$ and covariance matrix $\Sigma^{(j)}$. </p><p>We want to start by estimating the weights $\Phi$ and all the distribution params. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>mixture <span class="token keyword">import</span> GaussianMixturegm <span class="token operator">=</span> GaussianMixture<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> n_init<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>gm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>gm<span class="token punctuation">.</span>weights_gm<span class="token punctuation">.</span>means_gm<span class="token punctuation">.</span>covariances_</code></pre><p>This class relies on the Expectation-Maximization alg, which can be treated as an extension of K-Means: not only finds cluster centers, but also their size, shape, and orientation, as well as their relative weights ($\phi$). EM uses soft cluster assignments. </p><p>We can check whether the alg converged and how many iterations it took. </p><pre class=" language-python"><code class="language-python">gm<span class="token punctuation">.</span>converged_gm<span class="token punctuation">.</span>n_iter_</code></pre><p>We can then assign instance to cluster. </p><pre class=" language-python"><code class="language-python">gm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>gm<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><p>GMM is a generative model, so we can sample new instances from it (ordered by cluster index). </p><pre class=" language-python"><code class="language-python">xnew<span class="token punctuation">,</span> ynew <span class="token operator">=</span> gm<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>We can estimate the density of the model at any given location using score_samples(). </p><pre class=" language-python"><code class="language-python">gm<span class="token punctuation">.</span>score_samples<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><p>These are probability densities: take on any positive value. To estimate the prob that an instance will fall within a region, we have to integrate the PDF over that region. </p><p>For higher-dim data, we want to limit the number of params that the alg has to learn. One way is to limit the range of shapes and orientations that the clusters can have. </p><p>Set <strong>covariance_type</strong> hyperparam.</p><p>“spherical”: all clusters must be spherical, but they can have different diameters. </p><p>“diag”: clusters can take on any ellipsoidal shape of any size, but the axes must be parallel to the coordinate axes. </p><p>“tied”: all clusters must have the same ellipsoidal shape, size and orientation. </p><p>If the param is “tied” or “full”, the time complexity is $O(kmn^2+kn^3)$.</p><h3 id="Anomaly-Detection-using-GM"><a href="#Anomaly-Detection-using-GM" class="headerlink" title="Anomaly Detection using GM"></a>Anomaly Detection using GM</h3><p>We need to define what density threshold we want to use. IN manufacturing, the ratio of defective products is usually know. </p><pre class=" language-python"><code class="language-python">densities <span class="token operator">=</span> gm<span class="token punctuation">.</span>score_samples<span class="token punctuation">(</span>X<span class="token punctuation">)</span>density_threshold <span class="token operator">=</span> np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>densities<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>anomalies <span class="token operator">=</span> X<span class="token punctuation">[</span>densities <span class="token operator">&lt;</span> density_threshold<span class="token punctuation">]</span></code></pre><p>A closely related task is novelty detection: it differs from anomaly detection in that the algorithm is assumed to be trained on a clean dataset, uncontaminated by outliers, whereas anomaly detection does not make this assumption. </p><h3 id="Select-the-number-of-clusters"><a href="#Select-the-number-of-clusters" class="headerlink" title="Select the number of clusters"></a>Select the number of clusters</h3><p>We should find the model that minimizes a theoretical information criterion, such as the Bayesian info criterion or the Akaike info criterion. </p><p>$BIC = log(m)p - 2 log(\hat{L})$</p><p>$AIC = 2p - 2 log(\hat{L})$</p><p>m is the # instances, p is the # parameters learned by the model, L is the maximized value of the likelihood function of the model. </p><p>Both BIC and AIC penalize models that have more params to learn and reward models that fit the data well. </p><pre class=" language-python"><code class="language-python">gm<span class="token punctuation">.</span>bic<span class="token punctuation">(</span>X<span class="token punctuation">)</span>gm<span class="token punctuation">.</span>aic<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><h3 id="Bayesian-Gaussian-Mixture-Models"><a href="#Bayesian-Gaussian-Mixture-Models" class="headerlink" title="Bayesian Gaussian Mixture Models"></a>Bayesian Gaussian Mixture Models</h3><p>Gives weights equal (or close) to zero to unnecessary clusters. So, we set the number of clusters to a value greater than the optimal number of clusters. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>mixture <span class="token keyword">import</span> BayesianGaussianMixturebgm <span class="token operator">=</span> BayesianGaussianMixture<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> n_init<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>bgm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>np<span class="token punctuation">.</span>round<span class="token punctuation">(</span>bgm<span class="token punctuation">.</span>weights_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>In this model, the cluster params are treated as latent random variables. So $z$ now includes both the cluster parameters and the cluster assignments. </p><p>The beta distribution is commonly used to model random variables whose values lie within a fixed range. In this case, the range is from 0 to 1. The Stick-Breaking Process is best explained through an example. This process is good when new instances are more likely to join large clusters. </p><p>Prior knowledge about the latent variables $z$ can be encoded in a prob dist $p(z)$ called the prior. We can set the <strong>weight_concentration_prior</strong> param. </p><p>For Bayes’ rule, posterior = likelihood*prior/evidence. In GM, evidence p(X) is intractable, since it requires considering all possible combo of cluster param and cluster assignments. </p><p>One solution is variational inference. It picks a family of distributions $q(z;\lambda)$ with its own variational param $\lambda$, then optimize these params to make $q(z)$ a good approx of p(z|X). This is achieved by finding the value of lambda that minimizes the KL divergence from  $q(z)$ to $p(z|X)$.  The KL divergence equation can be written as the log of the evidence minus the evidence lower bound (ELBO). In the end, we want to maximize ELBO. </p><h1 id="Other-Alg-for-Anomaly-and-Novelty-Detection"><a href="#Other-Alg-for-Anomaly-and-Novelty-Detection" class="headerlink" title="Other Alg for Anomaly and Novelty Detection"></a>Other Alg for Anomaly and Novelty Detection</h1><h3 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h3><p>If we compare the reconstruction error of a normal instance with the reconstruction error of an anomaly, the latter will usually be much larger. </p><h3 id="Fast-MCD"><a href="#Fast-MCD" class="headerlink" title="Fast  - MCD"></a>Fast  - MCD</h3><p>It assumes that the normal instances are generated from a single Gaussian distribution (not a mixture). It also assumes that he dataset is contaminated with outliers that were not generated from this Gaussian distribution.</p><h3 id="Isolation-Forest"><a href="#Isolation-Forest" class="headerlink" title="Isolation Forest"></a>Isolation Forest</h3><p>Works well in hi-dim. It builds a RF in which each DT is grown randomly: each node picks a feature randomly, then it picks a random threshold value to split the dataset in two. Anomalies are usually far from other instances, so tend to get isolated in fewer steps than normal instances. </p><h3 id="Local-Outlier-Factor"><a href="#Local-Outlier-Factor" class="headerlink" title="Local Outlier Factor"></a>Local Outlier Factor</h3><p>Compares the density of instances around a given instance to the density around its neighbors. An anomaly is often more isolated than its k nearest neighbors.</p><h3 id="One-class-SVM"><a href="#One-class-SVM" class="headerlink" title="One class SVM"></a>One class SVM</h3><p>Better suit for novelty detection. A kernelized SVM classifier separates two classes by first mapping all the instances to a hi-dim space, then separating the two classes using a linear SVM. Since we have one class only, this alg separates the instances in hi-dim from the origin. In the original space, this corresponds to finding a small region that encompasses all the instances. If a new instance does not fall within the region, it is an anomaly. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 14 cnn</title>
      <link href="/Blog/2020/07/22/hands-on-14-cnn/"/>
      <url>/Blog/2020/07/22/hands-on-14-cnn/</url>
      
        <content type="html"><![CDATA[<h1 id="Conv-Layers"><a href="#Conv-Layers" class="headerlink" title="Conv Layers"></a>Conv Layers</h1><p>In turn, each neuron in the second conv layer is connected only to neurons located within a small rectangle in the first layer. </p><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Also called convolution kernels. </p><p>A layer full of neurons using the same filters outputs a feature map. </p><p>During training, the conv layer will automatically learn the most useful filters for its task, and the layers above will learn to combine them into more complex patterns. </p><h3 id="Stacking-Multiple-Feature-Maps"><a href="#Stacking-Multiple-Feature-Maps" class="headerlink" title="Stacking Multiple Feature Maps"></a>Stacking Multiple Feature Maps</h3><p>It has one neuron per pixel in each feature map, and all neurons within a given feature map share the same parameters. (dramatically reduces the number of parameters)</p><p>Input images are composed of multiple sublayers: one per color channel (RGB). </p><p>A neuron located in $(i, j)$ in feature map $k$ in a given conv layer $l$ is connected to the outputs of the neurons in the previous layer $l-1$, located in rows $i<em>s_h$ to $i</em>s_h+f_h-1$ and columns  $i<em>s_w$ to $i</em>s_w+f_w-1$ across all feature maps. </p><h3 id="TensorFlow-Implementation"><a href="#TensorFlow-Implementation" class="headerlink" title="TensorFlow Implementation"></a>TensorFlow Implementation</h3><p>Each input image is represented as a 3D tensor of shape [height, width, channels]. A mini-batch is represented as a 4D tensor [mini-batch size, height, width, channels]. The weights of a conv layer are represented as a 4D tensor of shape $[f_h, f_w, f_{n’}, f_n]$. </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># loads two color image</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_sample_imagechina <span class="token operator">=</span> load_sample_image<span class="token punctuation">(</span><span class="token string">"china.jpg"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span>flower <span class="token operator">=</span> load_sample_image<span class="token punctuation">(</span><span class="token string">"flower.jpg"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span>images <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>china<span class="token punctuation">,</span> flower<span class="token punctuation">]</span><span class="token punctuation">)</span>batch_size<span class="token punctuation">,</span> height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> channels <span class="token operator">=</span> images<span class="token punctuation">.</span>shape<span class="token comment" spellcheck="true"># create 2 filters</span>filters <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>channels<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>filters<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># vertical line</span>filters<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># horizontal line</span>outputs <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>images<span class="token punctuation">,</span> filters<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot 1st image's 2nd feature map </span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"gray"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>The pixel intensity for each color channel is represented as byte from 0 to 255, so we scale these features by dividing 255 to get flats ranging from 0 to 1.</p><p>We create two 7*7 filters.  The tf.nn.conv2d() is part of TF’s low-level deep learning API. Images is the input mini-batch. <strong>strides</strong> can also be a 1D array with four elements, where the two central elements are the vertical and horizontal strides, and the first and last elements must be equal to 1. </p><p>In a real CNN, we normally define filters as trainable variables. </p><pre class=" language-python"><code class="language-python">conv <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>filters<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span></code></pre><h3 id="Mem-Requirements"><a href="#Mem-Requirements" class="headerlink" title="Mem Requirements"></a>Mem Requirements</h3><p>Requires a huge amount of RAM. During inference the RAM occupied by one layer can be released as soon as the next layer has been computed, so we only need as much RAM as required by two consecutive layers. But during training everything computed during the FP needs to preserved for the reverse pass. If training crashes because of an out-of-mem error, we can try reducing mini-batch size. Alternatively, we can try reducing dimensionality using a stride, or removing a  few layers. </p><h1 id="Pooling-Layers"><a href="#Pooling-Layers" class="headerlink" title="Pooling Layers"></a>Pooling Layers</h1><p>Goal is to subsample the input image to reduce the computational load, the mem usage, and the number of parameters. </p><p>A pooling neuron has no weights. A pooling layer typically works on every input channel independently, so the output depth is the same as the input depth. </p><p><strong>Down side</strong></p><ol><li>even with a 2*2 kernel and a stride of 2, the output will be 2 times smaller in both direction (dropping 75% of the input values in total)</li><li>Invariance to small translations is not desirable sometimes</li></ol><h3 id="TF-Implementation"><a href="#TF-Implementation" class="headerlink" title="TF Implementation"></a>TF Implementation</h3><pre class=" language-python"><code class="language-python">max_pool <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>To create an average pooling layer, just use AvgPool2D instead of MaxPool2D.  </p><p>MaxPooling preserves only the strongest features, getting rid of all the meaningless ones, so the next layers get a cleaner signal to work with. </p><p>Pooling can also be performed along the depth dimension rather than the spatial dimensions, although this is not as common. This allows the CNN to learn to be invariant to various features. For example, it could learn multiple filters, each detecting a different rotation of the same pattern (e.g.: hand-written digits), and the depthwise max pooling layer would ensure that the output is the same regardless of the rotation. The CNN could similarly learn to be invariant to anything else: thickness, brightness, skew, color, and so on. </p><p>Keras does not include a depthwise max pooling layer, but TF’s low-level API does. </p><pre class=" language-python"><code class="language-python">output <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>images<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       padding<span class="token operator">=</span><span class="token string">"valid"</span><span class="token punctuation">)</span></code></pre><p>The first three values of kernel size and strides should be 1. The last value should be whatever kernel size and stride we want along the depth dimension (must be a divisor of the input depth). </p><p>We can wrap this in our Keras models using Lambda layer. </p><pre class=" language-python"><code class="language-python">depth_pool <span class="token operator">=</span> keras<span class="token punctuation">.</span>Layers<span class="token punctuation">.</span>Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> X<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>X<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"valid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>One last type of pooling layer is global average pooling layer. It computes the mean of each entire feature map (outputs a single number per feature map and per instance). </p><pre class=" language-python"><code class="language-python">global_avg_pool <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>GlobalAvgPool2D<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>It is equivalent to the following Lambda layer. </p><pre class=" language-python"><code class="language-python">global_avg_pool <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> X<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="CNN-Architectures"><a href="#CNN-Architectures" class="headerlink" title="CNN Architectures"></a>CNN Architectures</h1><p>The image gets smaller and smaller as it progresses through the network, but also deeper (with more feature maps).</p><p>A common mistake is to use conv kernels that are too large. </p><p>The following code can be used to tackle Fashion MNIST. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MaxPooling2D<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     MaxPooling2D<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span>     Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     MaxPooling2D<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>The first layer uses 64 large filters but no stride, because the input images are not very large. The input shape is [28,28,1] because the images are 28*28 pixels, with a single color channel. </p><p>We repeat the same structure twice: two conv layers followed by a max pooling layer. For larger images, we could repeat this structure several more times. </p><p>The number of filters grows as we climb up the CNN toward the output layer. The number of low-level features is often fairly low, but there are many different ways to combine them into higher level  features. It is a common practice to double the number of filters after each pooling layer, since a pooling layer divides each spatial dimension by a factor of 2, we can afford to double the number of feature maps in the next layer without fear of exploding the number of parameters, mem usage, or computational load. </p><h3 id="LeNet-5"><a href="#LeNet-5" class="headerlink" title="LeNet-5"></a>LeNet-5</h3><p>Most widely known CNN architecture. It is used to tackle MNIST handwritten number. </p><img src="1401.PNG" height="200" width="400"><p>MNIST images are 28*28 pixels, but they are zero-padded to 32*32 pixels and normalized before being fed to the network. The rest of the network does not use padding. </p><p>The average pooling layers are slightly more complex than usual: each neuron computes the mean of its inputs, then multiplies the result by a learnable coefficient (one per map) and adds a learnable bias term. </p><p>Most neurons in C3 maps are connected to neurons in only three or four S2 maps. </p><p>The output layer is a bit special: instead of computing the matrix multiplication of the inputs and the weight vector, each neuron outputs the square of the Euclidian distance between its input vector and its weight vector. Each output measures how much the image belongs to a particular digit class. </p><h3 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h3><p>Similar to LeNet-5, but larger and deeper. The first to stack conv layers directly on top of one another, instead of stacking a pooling layer on top of each conv layer. </p><img src="1402.PNG" height="300" width="500"><p>To reduce overfitting, the authors used reg tech. First, they applied dropout during training to the outputs of layers F9 and F10. Second, they performed data augmentation by randomly shifting the training images by various offset, flipping and changing the lighting conditions. </p><p><strong>data aug</strong></p><p>The generated instances should be as realistic as possible: human should not be able to tell whether it augmented. Simply adding white noise will not help; the modifications should be learnable. </p><p>ALexNet also uses a competitive normalization step immediately after the ReLU step of layers C1 and C3, called local response normalization (LRN): the most strongly activated neurons inhibit other neurons located at the same position in neighboring feature maps. This encourages different feature maps to specialize, pushing them apart and forcing them to explore a wider range of features. </p><p>$b_i = a_i(k+\alpha\sum_{j=j_{low}}^{j_{high}}\alpha_j^2)^{-\beta}$. </p><p>$j_{low} = max(0, i-r/2)$</p><p>$j_{high} = min(i+r/2, f_n - 1)$</p><p>In the equation, $b_i$ is the normalized output of the neuron located in feature map i, at some row u and column v. $a_i$ is the activation of that neuron after the ReLU step, but before normalization. $k$ is bias, $r$ is depth radius, $f_n$ is the number of feature maps.  </p><p>This step can be implemented using the tf.nn.local_response_normalization() function. </p><h3 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h3><p>The network was much deeper than previous CNNs, which was made possible by subnetworks called inception modules, which allow GoogLeNet to use parameters much more efficiently than previous architectures (has 10 times fewer param than AlexNet). </p><p>Below is the arch for inception modules. The notation “3*3+1(S)” means that the layer uses a 3*3 kernel, stride 1, and same padding. The input signal is first copied and fed to four different layers. All conv layers use ReLU activation function. The second set of conv layers uses different kernel sizes, allowing them to capture patterns at different scales. Every single layer uses a stride of 1 and same padding (even the max pooling layer), so their outputs all have the same height and width as their inputs. </p><img src="1403.PNG" height="300" width="500"><p>There are some 1*1 kernel conv layer. First, although they cannot capture spatial patterns, they can capture patterns along the depth dimension. Second, they are configured to output fewer feature maps than their inputs, so they serve as bottleneck layers, meaning they reduce dimensionality. Third, each pair of conv layers acts like a single powerful conv layer, capable of capturing more complex patterns. </p><p>The architecture is so deep that it has to be represented in three columns, but GoogLeNet is actually one tall stack, including nine inception modules. The six numbers in the inception modules represent the number of feature maps output by each conv layer in the module. </p><img src="1404.PNG" height="400" width="500"><p>Input images are typically expected to be 224*224 pixels. </p><p>The first two layers divide the image’s height and width by 4 (so area is divided by 16) to reduce the computational load. The first layer uses a large kernel size so that much of the info is preserved. </p><p>The local response normalization layer ensures that the previous layers learn a wide variety of features. </p><p>Two conv layers follows, where the first acts like a bottleneck layer. Think of this pair as a single smarter conv layer. </p><p>Max pooling layer reduces the image height and width by 2, again to speed up computations. </p><p>Tall stack of nine inception modules. </p><p>The global average pooling layer outputs the mean of each feature map. This drops any remaining spatial info (not much is left at that point). Moreover, it is a classification task, not localization, so it does not matter where the object is. Thanks to the dim reduction brought by this layer, there is no need to have several fully connected layers at the top of the CNN. </p><p>The original GoogLeNet  architecture also included two auxiliary classifiers plugged on top of the third and sixth inception modules. They were composed of one average pooling layer, one conv layer, two fully connected layers, and a softmax activation layer. During training, their loss scaled down by 70% was added to the overall loss. The goal was to fight the vanishing gradients problem and regularize the network. (Later shown that their effect was relatively minor). </p><h3 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h3><p>Developed Karen Simonyan and Andrew Zisserman from the Visual Geometry Group (VGG) research lab at Oxford Univ. </p><p>Architecture: 2 or 3 conv layers and a pooling layer, then again 2 or 3 conv layers and a pooling layer, and so on. Plus a final dense network with 2 hidden layers and the output layer. It used only 3*3 filters, but many filters. </p><h3 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h3><p>It confirmed the general trend: models are getting deeper and deeper, with fewer and fewer params. The key is to use skip connections. </p><p>When training a neural network, the goal is target function h(x). If you add the input x to the output of the network, then the network will be forced to model f(x) = h(x) - x rather than h(x). This is called residual learning. If the target function is fairly close to the identity function (which is often the case), this will speed up training considerably.  </p><img src="1405.PNG" height="200" width="400"><p>Moreover, if we add many skip connections, the network can start making progress even if several layers have not started learning yet. The deep residual network can be seen as a stack of residual units(RUs), where each RU is a small NN with a skip connection. </p><p>Each RU is composed of two conv layers (no pooling), with Batch Normalization and ReLU activation, using 3*3 and preserving spatial dimensions. </p><img src="1406.PNG" height="300" width="500"><p>Note that the number of feature maps is doubled every few RN, at the same time as their height and width are halved. The inputs cannot be added directly to the outputs of the RU because they don’t have the same shape. To solve this problem, the inputs are passed through a 1*1 conv layer with stride 2 and the right number of output feature maps. </p><h3 id="Xception"><a href="#Xception" class="headerlink" title="Xception"></a>Xception</h3><p>Extreme Inception. It replaces the inception modules with a special type of layer called a depthwise separable conv layer. While a regular conv layer uses filters that try to simultaneously capture spatial patterns and cross channel patterns (e.g., mouth+nose+eyes=face), a separable conv layer makes the strong assumption that spatial patterns and cross-channel patterns can be modeled separately. Thus, it is composed of two parts: first part applies a single spatial filter for each input feature map, second part looks exclusively for cross channel patterns. </p><p>Since separable conv layers only have one spatial filter per input channel, we should avoid using them after layers that have too few channels. </p><h3 id="SENet"><a href="#SENet" class="headerlink" title="SENet"></a>SENet</h3><p>Squeeze and Excitation Network. The extended versions of inception networks and ResNets are called SE-Inception and SE-ResNet. </p><p>An SE block analyzes the output of the unit it is attached to, focusing exclusively on the depth dimension. For example, an SE block may learn that mouths, noses, and eyes usually appear together in pictures. So, if the block sees a strong activation in the mouth and nose feature maps, but only mild activation in the eye feature map, it will boost the eye feature. (recalibrated feature maps)</p><p>An SE block is composed of just 3 layers: a global average pooling layer, a hidden dense layer using ReLU, and a dense output layer using sigmoid. The first dense layer is used to reduce dim (usually 16 times fewer than the number of feature maps): using low-dim vector representation of the distribution of feature responses. Finally the output layer takes the embedding and outputs a recalibration vector containing one number per feature map (same depth as the input), each between 0 and 1. </p><h3 id="Implement-ResNet-34-CNN-using-Keras"><a href="#Implement-ResNet-34-CNN-using-Keras" class="headerlink" title="Implement ResNet-34 CNN using Keras"></a>Implement ResNet-34 CNN using Keras</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResidualUnit</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filters<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>activation <span class="token operator">=</span> keras<span class="token punctuation">.</span>activations<span class="token punctuation">.</span>get<span class="token punctuation">(</span>activation<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>main_layers <span class="token operator">=</span> <span class="token punctuation">[</span>            Conv2D<span class="token punctuation">(</span>filters<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span>stride<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             self<span class="token punctuation">.</span>activation<span class="token punctuation">,</span>             Conv2D<span class="token punctuation">(</span>filters<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>skip_layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> stride <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            slef<span class="token punctuation">.</span>skip_layers <span class="token operator">=</span> <span class="token punctuation">[</span>                Conv2D<span class="token punctuation">(</span>filters<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> strides<span class="token operator">=</span>stride<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        Z <span class="token operator">=</span> inputs        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>main_layers<span class="token punctuation">:</span>            Z <span class="token operator">=</span> layer<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        skip_Z <span class="token operator">=</span> inputs        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>skip_layers<span class="token punctuation">:</span>            skip_Z <span class="token operator">=</span> layer<span class="token punctuation">(</span>skip_Z<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>Z <span class="token operator">+</span> skip_Z<span class="token punctuation">)</span></code></pre><p>Next, we can build ResNet 34 using Sequential model. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>prev_filters <span class="token operator">=</span> <span class="token number">64</span><span class="token keyword">for</span> filters <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">:</span>    strides <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> filters <span class="token operator">==</span> prev_filters <span class="token keyword">else</span> <span class="token number">2</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ResidualUnit<span class="token punctuation">(</span>filters<span class="token punctuation">,</span> strides<span class="token operator">=</span>strides<span class="token punctuation">)</span><span class="token punctuation">)</span>    prev_filters <span class="token operator">=</span> filtersmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>GlobalAvgPool2D<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="Using-Pretrained-Models-from-Keras"><a href="#Using-Pretrained-Models-from-Keras" class="headerlink" title="Using Pretrained Models from Keras"></a>Using Pretrained Models from Keras</h1><p>We can load standard models from Keras. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>resnet50<span class="token punctuation">.</span>ResNet50<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">"imagenet"</span><span class="token punctuation">)</span></code></pre><p>We need to ensure our images have the right size. A ResNet-50 model expects 224*224 pixel images. </p><pre class=" language-python"><code class="language-python">images_resized <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>images<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># To preserve the aspect ratio, use the following</span><span class="token comment" spellcheck="true"># tf.image.crop_and_resize()</span></code></pre><p>The pretrained models assume the images are preprocessed in a specific way. </p><pre class=" language-python"><code class="language-python">inputs <span class="token operator">=</span> keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>resnet50<span class="token punctuation">.</span>preprocess_input<span class="token punctuation">(</span>images_resized<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span></code></pre><p>Now we can use the pretrained model to make predictions. </p><pre class=" language-python"><code class="language-python">y_proba <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span></code></pre><p>If we want to display the top K predictions, including the class name and the estimated proba of each predicted class, use the decode_predictions() function. </p><pre class=" language-python"><code class="language-python">top_K <span class="token operator">=</span> keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>resnet50<span class="token punctuation">.</span>decode_preditions<span class="token punctuation">(</span>y_proba<span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> image_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Image #&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>image_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> class_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> y_p <span class="token keyword">in</span> top_K<span class="token punctuation">[</span>image_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" &amp;#123;&amp;#125; - &amp;#123;:12s&amp;#125; &amp;#123;:.2f&amp;#125;%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>class_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> y_p<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Pretrained-Models-for-Transfer-Learning"><a href="#Pretrained-Models-for-Transfer-Learning" class="headerlink" title="Pretrained Models for Transfer Learning"></a>Pretrained Models for Transfer Learning</h3><p>Load dataset. If we want to get information about the dataset, set <strong>with_info</strong>=True. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow_datasets <span class="token keyword">as</span> tfdsdataset<span class="token punctuation">,</span> info <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"tf_flowers"</span><span class="token punctuation">,</span> as_supervised<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> with_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataset_size <span class="token operator">=</span> info<span class="token punctuation">.</span>splits<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>num_examplesclass_names <span class="token operator">=</span> info<span class="token punctuation">.</span>features<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>namesn_classes <span class="token operator">=</span> info<span class="token punctuation">.</span>features<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num_class</code></pre><p>We want to split the training set. </p><pre class=" language-python"><code class="language-python">test_split<span class="token punctuation">,</span> valid_split<span class="token punctuation">,</span> train_split <span class="token operator">=</span> tfds<span class="token punctuation">.</span>Split<span class="token punctuation">.</span>TRAIN<span class="token punctuation">.</span>subsplit<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_set <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"tf_flowers"</span><span class="token punctuation">,</span> split<span class="token operator">=</span>test_split<span class="token punctuation">,</span> as_supervised<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>valid_set <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"tf_flowers"</span><span class="token punctuation">,</span> split<span class="token operator">=</span>valid_split<span class="token punctuation">,</span> as_supervised<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train_set <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"tf_flowers"</span><span class="token punctuation">,</span> split<span class="token operator">=</span>train_split<span class="token punctuation">,</span> as_supervised<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>Nest, preprocess the images. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>    resized_image <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    final_image <span class="token operator">=</span> keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>xception<span class="token punctuation">.</span>preprocess_input<span class="token punctuation">(</span>resized_image<span class="token punctuation">)</span>    <span class="token keyword">return</span> final_image<span class="token punctuation">,</span> label</code></pre><p>Apply the preprocess to all datasets. </p><pre class=" language-python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">32</span>train_set <span class="token operator">=</span> train_set<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>train_set <span class="token operator">=</span> train_set<span class="token punctuation">.</span>map<span class="token punctuation">(</span>preprocess<span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>valid_set <span class="token operator">=</span> valid_set<span class="token punctuation">.</span>map<span class="token punctuation">(</span>preprocess<span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>test_set <span class="token operator">=</span> test_set<span class="token punctuation">.</span>map<span class="token punctuation">(</span>preprocess<span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>We can also perform data augmentation, change the preprocessing function for the training set, adding some random transformations to the training images. Use tf.image.random_crop() to randonly flip the images horizontally, and so on. The keras.preprocessing.image.ImageDataGenerator class makes it easy to do data augmentation. However, building a tf.data pipeline reads the images efficiently. </p><p>Load models. We exclude the top: excludes the global average pooling layer and the dense output layer. </p><pre class=" language-python"><code class="language-python">base_model <span class="token operator">=</span> keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>xception<span class="token punctuation">.</span>Xception<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">"imagenet"</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>avg <span class="token operator">=</span> GlobalAveragePooling2D<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>base_model<span class="token punctuation">.</span>output<span class="token punctuation">)</span>out <span class="token operator">=</span> Dense<span class="token punctuation">(</span>n_classes<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>base_model<span class="token punctuation">.</span>input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>out<span class="token punctuation">)</span></code></pre><p>Freeze the weights. Since our model uses the base model’s layers directly, rather than the base_model object itself, setting <code>base_model.trainable = False</code> would have no effect. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> layer <span class="token keyword">in</span> base_model<span class="token punctuation">.</span>layers<span class="token punctuation">:</span>    layer<span class="token punctuation">.</span>trainable <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><p>Compile the model. </p><pre class=" language-python"><code class="language-python">optm <span class="token operator">=</span> SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> decay<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"sparse_categorical_crossentropy"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optimizer<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"accuracy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> validation_cata<span class="token operator">=</span>valid_set<span class="token punctuation">)</span></code></pre><p>After training the model for a few epochs, its validation accuracy should reach about 80%. We should unfreeze all layers and continue training. Use a lower learning rate to avoid damaging the pretrained weights. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> layer <span class="token keyword">in</span> base_model<span class="token punctuation">.</span>layers<span class="token punctuation">:</span>    layer<span class="token punctuation">.</span>trainable <span class="token operator">=</span> <span class="token boolean">True</span>optm <span class="token operator">=</span> SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> decay<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"sparse_categorical_crossentropy"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optimizer<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"accuracy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> validation_cata<span class="token operator">=</span>valid_set<span class="token punctuation">)</span></code></pre><h1 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h1><p>Can be seen as regression. Train with MSE. </p><pre class=" language-python"><code class="language-python">base_model <span class="token operator">=</span> keras<span class="token punctuation">.</span>applications<span class="token punctuation">.</span>xception<span class="token punctuation">.</span>Xception<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">"imagenet"</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>avg <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>GlobalAveragePooling2D<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>base_model<span class="token punctuation">.</span>output<span class="token punctuation">)</span>class_output <span class="token operator">=</span> Dense<span class="token punctuation">(</span>n_classes<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span>loc_output <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>base_model<span class="token punctuation">.</span>input<span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>class_output<span class="token punctuation">,</span> loc_output<span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"sparse_categorical_crossentropy"</span><span class="token punctuation">,</span> <span class="token string">"mse"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loss_weights<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optm<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"accuracy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Sometimes, the dataset does not have bounding boxes, and we need to add them ourselves. We can use an open source image labeling tool like VGG Image Annotator, LabelImg, OpenLabeler, or ImgLab. </p><p>Each item should be a tuple of the form (images, (class_labels, bounding_boxes)). The bounding boxes should be normalized so that the horizontal and vertical coordinates range from 0 to 1. Also, it is common to predict the sqrt of the height and width rather than the height and width directly: this way, a 10 pixel error for a large bounding box will not be penalized as much as a 10 pixel error for a small bounding box. </p><p>The most common metric for evaluating how well the model predicts bounding boxes is the Intersection over Union (IoU): the area of overlap between the predicted bounding box and the target, divided by the area of their union. It is implemented in <code>tf.keras.metrics.MeanIoU</code>. </p><h1 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h1><p>Non-max suppression</p><ol><li>We need to add an extra objectness output to our CNN, to estimate the prob that an object is indeed present in the image. It must use sigmoid activation (can be trained with binary cross-entropy loss). Then get rid of all bounding boxes for which the objectness score is below threshold. </li><li>Find the bounding box with highest objectness score, and get rid of all other boxes that overlap a lot with it (IoU &gt;= 60%). </li><li>Repeat until there are no more bounding boxes to get rid of</li></ol><h1 id="Fully-Conv-Networks-FCN"><a href="#Fully-Conv-Networks-FCN" class="headerlink" title="Fully Conv Networks (FCN)"></a>Fully Conv Networks (FCN)</h1><p>The idea of FCNs was introduced for semantic segmentation (classifying every pixel in an image according to the class of the object it belongs to).</p><p>To convert a dense layer to a conv layer, the number of filters in the conv layer must be equal to the number of units in the dense layer, the filter size must be equal to the size of the input feature maps with “valid” padding.</p><p>A dense layer expects a specific input size, whereas a conv layer will happily process images of any size. Since FCN contains only conv layers and pooling layers, it can be trained on images of any size.  </p><h1 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h1><p>Yolo3</p><ol><li>output five bounding boxes for each grid cell (instead of one), and 20 class proba per grid cell. In total, 45 numbers per grid cell: 5 bounding boxes (*4 coordinate), plus 5 objectness scores, plus 20 class proba. </li><li>predicts an offset relative to the coordinates of the grid cell. (0, 0) means the top left. </li><li>Before training the NN, finds five representative bounding box dimensions, called anchor boxes, by applying K-Means to the height and width of bounding boxes. For each grid cell and each anchor box, predicts the log of the vertical and horizontal rescaling factors. </li><li>trained using images of diff scales: every few batches during training, the network choose a new image dimension (330 - 608). </li></ol><p><strong>mAP</strong></p><p>A metric used in object detection. </p><p>In AUC, there may contain a few sections where precision goes up when recall increases. We can get a fair idea of the model’s performance by computing max precision we can get with at least 0% recall then 10%, 20%… Calculate the mean of these maximum precisions (AP). When there are more than two classes, calculate AP for each class, and then compute mean AP. </p><h1 id="Semantic-Segmentation"><a href="#Semantic-Segmentation" class="headerlink" title="Semantic Segmentation"></a>Semantic Segmentation</h1><p>Each pixel is classified according to the class of the object it belongs to. Different objects of the same class are not distinguished. (e.g., bicycles on the right side of the segmented image end up as one big lump of pixels). The main difficulty is when images go through a CNN, they gradually lose their spatial resolution. </p><p>One solution for upsampling (increasing the size of an image) is to use transposed convolutional layer. It is equivalent to first stretching the image by inserting 0s, then performing a regular conv. Use <code>Conv2DTranspose</code> layer. </p><p><strong>dilation_rate</strong></p><p>value&gt;=2: using a regular conv layer with a filter dilated by inserting 0s. For example, <strong>dilation_rate</strong>=4, [[1,2,3]] will be converted to  [[1,0,0,0,2,0,0,0,3]]</p><p>Another solution is to add skip connections from lower layers. Sometimes, we can scale up beyond the size of the original image, called super-resolution. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ml basic: 02 feature engineering</title>
      <link href="/Blog/2020/07/22/ml-basic-02-feature-engineering/"/>
      <url>/Blog/2020/07/22/ml-basic-02-feature-engineering/</url>
      
        <content type="html"><![CDATA[<h1 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h1><h2 id="2-1-特征提取"><a href="#2-1-特征提取" class="headerlink" title="2.1 特征提取"></a>2.1 特征提取</h2><p>将原始数据转化为实向量之后，为了 让模型更好地学习规律，对特征做进一步的变换。首先，要理解业务数据和业务逻辑。 其次，要理解模型和算法，清楚模型需要什么样的输入才能有精确的结果。</p><h3 id="2-1-1-探索性数据分析"><a href="#2-1-1-探索性数据分析" class="headerlink" title="2.1.1 探索性数据分析"></a>2.1.1 探索性数据分析</h3><p>Exploratory Data Analysis (EDA)</p><p>在尽量少的先验假设条件下，探索数据内部结构和规律。是一种方法论而不是特点技术。</p><p><strong>可视化</strong></p><p>箱型图、直方图、多变量图、散点图…</p><p><strong>定量技术</strong></p><p>样本均值、方差、分位数、峰度、偏度。</p><h3 id="2-1-2-数值特征"><a href="#2-1-2-数值特征" class="headerlink" title="2.1.2 数值特征"></a>2.1.2 数值特征</h3><h4 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h4><p>太多的精度有可能是噪声。长尾数据可以先进行对数转换，然后截断。</p><h4 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h4><p>标识是否存在。</p><h4 id="分桶"><a href="#分桶" class="headerlink" title="分桶"></a>分桶</h4><p>如果跨越不同的数量级，则不是一个好特征。对于逻辑回归模型，一个特征对应一个系数，模型会对较大特征值敏感。</p><p><strong>平均分桶</strong></p><p>固定宽度的分桶。</p><p><strong>幂分桶</strong></p><p>根据10的幂来分桶，和对数变换相关。</p><p><strong>分位数分桶</strong></p><p>数值变量的取值存在很大间隔时候采用。</p><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><p><strong>标准化缩放</strong></p><p>将数值变量均值变为0，方差变为1。对目标变量为输入特征的光滑函数的模型，如线性回归和逻辑回归比较有效。</p><p>$x’ = \frac{x - avg(x)}{\sigma}$</p><p><strong>健壮缩放</strong></p><p>标准化缩放变种，采用中位数而非均值，对于有异常点的数据有用。</p><p>$x’ = \frac{x - median(x)}{IQR(x)}$</p><p><strong>均值归一化</strong></p><p>将数值范围缩放到 [-1, 1] 区间里，且数据的均值变为0。</p><p>$x’ = \frac{x - avg(x)}{max(x) - min(x)}$</p><p><strong>最大最小值缩放</strong></p><p>将数值范围缩放到 [0, 1] 区间里。</p><p>$x’ = \frac{x - min(x)}{max(x) - min(x)}$</p><p><strong>最大绝对值缩放</strong></p><p>This estimator scales and translates each feature individually such that the maximal absolute value of each feature in the training set will be 1.0. It does not shift/center the data, and thus does not destroy any sparsity.将数值范围缩放到 [-1, 1] 区间里。</p><p>$x’ = \frac{x}{|max(x)|}$</p><p><strong>范数归一化</strong></p><p>将数值变量某一范数变为1。</p><p><strong>平方根缩放或对数缩放</strong></p><p>对数缩放可处理长尾分且取值为正数的特征。</p><p>平方根缩放是方差稳定的变换。</p><h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><p>补值：均值，中位数，预测缺失值</p><p>忽略：将缺失作为一种信息进行编码直接喂给模型</p><h4 id="特征交叉"><a href="#特征交叉" class="headerlink" title="特征交叉"></a>特征交叉</h4><p>数值特征之间的相互作用。对多个变量进行加减乘除等操作，在线性模型中引入非线性性质，提升模型表达能力。</p><h4 id="非线性编码"><a href="#非线性编码" class="headerlink" title="非线性编码"></a>非线性编码</h4><p>线性模型很难学到非线性关系，采用非线性编码提升模型效果。</p><p>多项式核，高斯核</p><p>基因算法、局部特性嵌入、t-SNE等等。</p><h4 id="行统计量"><a href="#行统计量" class="headerlink" title="行统计量"></a>行统计量</h4><p>空值的个数，0的个数，正负值的个数等等。</p><h3 id="2-1-3-类别特征"><a href="#2-1-3-类别特征" class="headerlink" title="2.1.3 类别特征"></a>2.1.3 类别特征</h3><p>也叫做定性数据。没有数学意义。</p><h4 id="自然数编码-label-encoding"><a href="#自然数编码-label-encoding" class="headerlink" title="自然数编码 label encoding"></a>自然数编码 label encoding</h4><p>每一个类别分配一个编号。对类别编号进行洗牌，训练多个模型进行融合。</p><h4 id="独热编码-one-hot-encoding"><a href="#独热编码-one-hot-encoding" class="headerlink" title="独热编码 one-hot encoding"></a>独热编码 one-hot encoding</h4><p>每一个特征取值对应一维特征，得到稀疏的特征矩阵。</p><h4 id="分层编码"><a href="#分层编码" class="headerlink" title="分层编码"></a>分层编码</h4><p>取不同位数进行分层。可用于邮政编码、身份证号等有规律的特征。</p><h4 id="散列编码-hash-encoding"><a href="#散列编码-hash-encoding" class="headerlink" title="散列编码 hash encoding"></a>散列编码 hash encoding</h4><p>进行独热编码之前可以先对类别进行散列编码，避免矩阵过于系数。但是可能会导致特征取值冲突，影响模型效果。</p><h4 id="计数编码-count-encoding"><a href="#计数编码-count-encoding" class="headerlink" title="计数编码 count encoding"></a>计数编码 count encoding</h4><p>将类别特征用对应的计数来代替。（就是根据每一个类别特征的类别对二分类标签进行sum求和得到每个类别中样本标签为1的总数）。对异常值敏感。特征取值可能冲突。</p><h4 id="计数排名编码"><a href="#计数排名编码" class="headerlink" title="计数排名编码"></a>计数排名编码</h4><p>将类别特征用对应的计数排名来代替。对异常值不敏感。特征取值不会冲突。</p><h4 id="目标编码-target-encoding"><a href="#目标编码-target-encoding" class="headerlink" title="目标编码 target encoding"></a>目标编码 target encoding</h4><p>基于目标变量对类别特征进行编码。</p><p>对于C分类问题,目标编码后只需要增加C−1个属性列，如果C远远小于特征类别数量，则相对one-hot-encoding可以节省很多内存。用概率$P(y=y_i|x=x_i)$代替属性值x。</p><p>$f(y_j,x_i) = \lambda(n_i)P(y=y_j|x=x_i) + (1 - \lambda(n_i))P(y = y_j)$</p><p>$n_i$是训练集中$x_i$的样本个数。$\lambda(n_i)$用于计算概率值的可靠性（有可能特征包含$x_i$的样本数量比较小），取值范围是[0,1]。</p><h3 id="2-1-4-时间特征"><a href="#2-1-4-时间特征" class="headerlink" title="2.1.4 时间特征"></a>2.1.4 时间特征</h3><p>可提取信息：季度（初/末）、闰年、周末、节假日、营业时间。</p><p><strong>滞后特征 lag</strong></p><p>将时间序列预测问题转化为监督学习问题的一种经典方法。</p><p><strong>滑动窗口统计特征</strong></p><p>计算前n个值的均值。上面的滞后特征是一个特例，对应时间窗口宽度是1。另一种特殊的窗口设置包含所有历史数据，称为扩展窗口统计。</p><h3 id="2-1-5-空间特征"><a href="#2-1-5-空间特征" class="headerlink" title="2.1.5 空间特征"></a>2.1.5 空间特征</h3><p>可提取信息：经纬度、行政区ID、城市、两个位置之间的距离。</p><h3 id="2-1-6-文本特征"><a href="#2-1-6-文本特征" class="headerlink" title="2.1.6 文本特征"></a>2.1.6 文本特征</h3><p>自然语言处理，有字符转化小写等手段。</p><h4 id="语料构建"><a href="#语料构建" class="headerlink" title="语料构建"></a>语料构建</h4><p>构建一个由文档或者短语组成的矩阵，每一行是一个文档，每一列是单词。</p><h4 id="文本清洗"><a href="#文本清洗" class="headerlink" title="文本清洗"></a>文本清洗</h4><p>剔除爬虫抓取文本的HTML标记。剔除停止词。统一编码。取出标点符号、数字、空格。还原为词根。</p><h4 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h4><h5 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h5><p>名词动词形容词。</p><h5 id="词形还原和词干提取"><a href="#词形还原和词干提取" class="headerlink" title="词形还原和词干提取"></a>词形还原和词干提取</h5><p>抽取词的词干和词根形式。</p><h5 id="文本统计特征"><a href="#文本统计特征" class="headerlink" title="文本统计特征"></a>文本统计特征</h5><p>不需要考虑词序信息。文本长度、单词个数、特殊字符占比等等。</p><h5 id="N-Gram模型"><a href="#N-Gram模型" class="headerlink" title="N-Gram模型"></a>N-Gram模型</h5><p>将文本转换成连续序列，包含那个元素。</p><h4 id="Skip-Gram模型"><a href="#Skip-Gram模型" class="headerlink" title="Skip-Gram模型"></a>Skip-Gram模型</h4><h5 id="词级模型"><a href="#词级模型" class="headerlink" title="词级模型"></a>词级模型</h5><p>向量的每个分量取值0或1，代表是否在文档中出现。</p><h5 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h5><p>向量的每个分量取值词语出现次数，为了减小维度，可以过滤掉词频太小的单词。</p><h5 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h5><p>Term Frequency词频：单词的重要性随其在文中出现次数的增加而上升。</p><p>Inverse Document Frequency逆文档频率：单词的重要性随其在语料库出现频率的增加而下降。</p><p>TF-IDF模型是经典的向量空间模型(Vector Space Model)。</p><h4 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h4><p>计算检索词之间的相关性。</p><h4 id="Jaccard相似度"><a href="#Jaccard相似度" class="headerlink" title="Jaccard相似度"></a>Jaccard相似度</h4><p>两个文档中相交的单词个数除以出现单词的总合</p><p>$J(d_1,d_2) = \frac{d_1 \bigcap d_2}{d_1 \bigcup d_2}$</p><h4 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h4><p>Levenshtein。两个字符串由一个转成另外一个所需要的最少操作次数。</p><h4 id="隐形语义分析"><a href="#隐形语义分析" class="headerlink" title="隐形语义分析"></a>隐形语义分析</h4><p>把高维向量空间模型表示的文档映射到低维的潜在语义空间。可以使用SVD。</p><h4 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h4><p>最常用的单词嵌入，包含单词的语义信息（分布式表示）。单词所在空间映射到低维的向量空间，每一个词对应一个向量，通过计算向量之间的余弦相似度可以得到单词间相似度。</p><h2 id="2-2-特征选择"><a href="#2-2-特征选择" class="headerlink" title="2.2 特征选择"></a>2.2 特征选择</h2><p>从原始数据的特征集合中选出一个子集。</p><p>目的：</p><ul><li>简化模型，便于理解</li><li>改善性能</li><li>降低过拟合风险</li></ul><p>前提：训练数据中包含冗余或者无关特征，移除之后不会导致信息丢失。</p><p>冗余：和无用有区别。一个特征本身有用，但与另外一个有用的特征强相关，则这个特征可能就是冗余的。</p><h3 id="2-2-1-过滤方法-Filter"><a href="#2-2-1-过滤方法-Filter" class="headerlink" title="2.2.1 过滤方法 Filter"></a>2.2.1 过滤方法 Filter</h3><h4 id="单变量过滤"><a href="#单变量过滤" class="headerlink" title="单变量过滤"></a>单变量过滤</h4><p>不需要考虑特征之间的相互关系，基于特征变量和目标变量之间的相关性和互信息。</p><p>按照相关性对特征进行排序，过滤掉最不相关的特征。</p><p><strong>优点</strong></p><ul><li>计算效率高</li><li>不易过拟合</li><li>可扩展</li></ul><p><strong>缺点</strong></p><ul><li>忽略特征之间的关系</li><li>忽略特征和模型之间的关系</li></ul><p><strong>举例</strong></p><p>卡方检验，信息增益，相关系数</p><p>Pearson积差相关系数</p><p>用于量度两个变量X和Y之间的线性相关。 两个变量分别服从正态分布，通常用t检验检查相关系数的显著性；两个变量的标准差不为0。取值是[-1, +1]，其中1是总正线性相关性，0是非线性相关性，并且-1是总负线性相关性。</p><p>​    $\rho_{X,Y} = {\mathrm {cov} (X,Y) \over \sigma _{X}\sigma _{Y}}={E[(X-\mu _{X})(Y-\mu _{Y})] \over \sigma _{X}\sigma _{Y}} = \frac{∑_1^n(X_i−\bar{X})(Y_i−\bar{Y})} {\sqrt{∑_1^n(Xi−\bar{X})^2∑_1^n(Yi−\bar{Y})^2}}$</p><p>Spearman秩相关系数</p><p>利用两变量的秩次大小作线性相关分析，对原始变量的分布不做要求，属于非参数统计方法。因此它的适用范围比Pearson相关系数要广的多。斯皮尔曼等级相关系数同时也被认为是经过排行的两个随机变量的皮尔逊相关系数，以下实际是计算x、y的皮尔逊相关系数。</p><p><img src="https://pic2.zhimg.com/80/v2-fdd4fdb80002ece8d070b828ce900123_1440w.png" alt="img"></p><p>Kendall秩相关系数</p><p>是一种秩相关系数，用于反映分类变量相关性的指标，适用于两个变量均为<strong>有序分类</strong>的情况。</p><p><img src="https://pic3.zhimg.com/80/v2-2864875581ea4d2ada86b71ceb8275e4_1440w.jpg" alt="img"></p><h4 id="多变量过滤"><a href="#多变量过滤" class="headerlink" title="多变量过滤"></a>多变量过滤</h4><p><strong>优点</strong></p><ul><li>考虑特征之间的关系</li><li>计算复杂度适中</li></ul><p><strong>缺点</strong></p><ul><li>忽略特征和模型之间的关系</li></ul><p><strong>举例</strong></p><p>CFS, MBF, FCBF</p><h5 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h5><p>计算每个特征在训练集中出现比例。覆盖率太小的特征可以剔除。</p><h5 id="皮尔森相关系数"><a href="#皮尔森相关系数" class="headerlink" title="皮尔森相关系数"></a>皮尔森相关系数</h5><p>度量两个变量之间的线性相关性。</p><p>$P_{X,Y} = \frac{cov(X,Y)}{\sigma_X\sigma_Y} = \frac{E[(X-\mu_X)(Y-\mu_Y)]}{\sigma_X\sigma_Y}$</p><h5 id="Fisher得分"><a href="#Fisher得分" class="headerlink" title="Fisher得分"></a>Fisher得分</h5><p>好的特征在同一个类别中取值相似，不同类别之间取值差异较大。</p><h5 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h5><p>假设特征和目标之间相互独立，作为H0假设。根据统计量确定p值。</p><h5 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h5><p>互信息越大，两个变量相关性越高。</p><h5 id="最小冗余最大相关性-Minimum-Redundancy-Maximum-Relevance"><a href="#最小冗余最大相关性-Minimum-Redundancy-Maximum-Relevance" class="headerlink" title="最小冗余最大相关性 Minimum Redundancy Maximum Relevance"></a>最小冗余最大相关性 Minimum Redundancy Maximum Relevance</h5><p>mRMR使用多种相关性的度量指标。是一种贪心策略，某个特征一旦被选择，在之后不会删除。</p><h5 id="相关特征选择-Correlation-Feature-Selection"><a href="#相关特征选择-Correlation-Feature-Selection" class="headerlink" title="相关特征选择 Correlation Feature Selection"></a>相关特征选择 Correlation Feature Selection</h5><p>CFS假设好的特征集合跟目标变量非常相关，但特征之间彼此不想关。</p><h3 id="2-2-2-封装方法-Wrapper"><a href="#2-2-2-封装方法-Wrapper" class="headerlink" title="2.2.2 封装方法 Wrapper"></a>2.2.2 封装方法 Wrapper</h3><p>过滤方法与具体的机器学习算法相互独立，因此过滤方法没有考虑选择的特征集合在具体机器学习算法上的效果。封装方法直接使用机器学习算法评估特征子集的效果。可以检测两个或多个特征之间的交互关系。</p><p><strong>优点</strong></p><ul><li>让模型效果达到最优</li><li>有可能会卡在局部最优</li></ul><p><strong>缺点</strong></p><ul><li>计算量大</li><li>样本不够充分的情况下容易过拟合</li></ul><p><strong>举例</strong></p><p>序列向前SFS，序列向后SBE，增q删r，随机爬山，基因算法</p><h4 id="完全搜索"><a href="#完全搜索" class="headerlink" title="完全搜索"></a>完全搜索</h4><p>有穷举和非穷举。分支定界搜索配合剪枝比较实用。其他还有定向搜索，先选择N个得分最高的特征作为子集，将其加入一个限制最大长度的优先队列，每次从队列中取出得分最高的子集，然后穷举向该子集加入一个特征后产生所有特征集，将这些特征集加入队列。最优优先搜索在定向搜索的基础上，不限制队列长度。</p><h4 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h4><p>序列向前/后选择。双向搜索同时使用向前向后选择，在两者搜索到相同子集的时候停止。</p><h4 id="随机搜索"><a href="#随机搜索" class="headerlink" title="随机搜索"></a>随机搜索</h4><p>执行序列向前/后选择，算法随机选择特征子集。</p><h3 id="2-2-3-嵌入方法-Embedded"><a href="#2-2-3-嵌入方法-Embedded" class="headerlink" title="2.2.3 嵌入方法 Embedded"></a>2.2.3 嵌入方法 Embedded</h3><p><strong>优点</strong></p><ul><li>计算效率高</li><li>考虑了机器学习算法的特点</li></ul><p><strong>缺点</strong></p><ul><li>依赖机器学习模型</li></ul><p><strong>举例</strong></p><p>决策树，随机森林，梯度提升树，SVM，LASSO</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 06 decision tree</title>
      <link href="/Blog/2020/07/21/hands-on-06-decision-tree/"/>
      <url>/Blog/2020/07/21/hands-on-06-decision-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="Train-and-Visualize-a-Decision-Tree"><a href="#Train-and-Visualize-a-Decision-Tree" class="headerlink" title="Train and Visualize a Decision Tree"></a>Train and Visualize a Decision Tree</h1><p>Try to understand how it makes predictions. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> export_graphviziris <span class="token operator">=</span> load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> iris<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># petal len and wid</span>y <span class="token operator">=</span> iris<span class="token punctuation">.</span>targettree_clf <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>tree_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>export_graphviz<span class="token punctuation">(</span>tree_clf<span class="token punctuation">,</span> out_file<span class="token operator">=</span>image_path<span class="token punctuation">(</span><span class="token string">"tree.dot"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> feature_names<span class="token operator">=</span>iris<span class="token punctuation">.</span>feature_names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rounded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> filled<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>Then, we can use the dot command line too from the Graphviz package to convert the file to other formats. </p><pre class=" language-shell"><code class="language-shell">dot -Tpng tree.dot -o iris_tree.png</code></pre><p>Decision Trees are intuitive, thus are called white box models. Random Forests or NN are considered black box models. </p><h1 id="Making-Predictions"><a href="#Making-Predictions" class="headerlink" title="Making Predictions"></a>Making Predictions</h1><p>Decision Tree models do not require much data preparation (feature scaling or centering).</p><p>A node’s <strong>samples</strong> attribute counts how many training instances it applies to; <strong>value</strong> attribute tells you how many training instances of each class this node applies to; <strong>gini</strong> attribute measures its impurity: a node is pure if all training instances it applies to belong to the same class. </p><p>Gini impurity $G_i = 1 - \sum_{k=1}^n p_{i,k}^2$</p><p>$p_{i,k}$ is the ratio of class k instances among the training instances in the i-th node.  </p><h3 id="Estimating-Class-Prob"><a href="#Estimating-Class-Prob" class="headerlink" title="Estimating Class Prob"></a>Estimating Class Prob</h3><p>To estimate the probability that an instance belongs to a particular class k, a DT traverses the tree to find the leaf node for this instance, and then it returns the ration of training instances of class k in this node. </p><h3 id="CART-Training-Alg"><a href="#CART-Training-Alg" class="headerlink" title="CART Training Alg"></a>CART Training Alg</h3><p>CART: Classification and Regression Tree</p><p>Scikit-Learn uses the CART algorithm, which produces only binary trees. The alg works by first splitting the training set into two subsets using a single feature k and a threshold $t_k$. It searches for the pair (k, $t_k$) that produces the purest subsets. </p><p>Cost function for classification</p><p>$J(k, t_k) = \frac{1}{m}(m_{left}*G_{left}+m_{right}*G_{right})$</p><p>It stops recursion once it reaches the maximum depth or if it cannot find a split that will reduce impurity. This is a greedy algorithm: it does not check whether the split will lead to the lowest possible impurity several levels down. </p><h3 id="Computational-Complexity"><a href="#Computational-Complexity" class="headerlink" title="Computational Complexity"></a>Computational Complexity</h3><p>Making prediction requires traversing the DT requires roughly $O(log_2(m))$. The training algorithm compares all features on all samples at each other, which results in $O(n<em>m</em>log_2(m))$. $n$ stands for the number of features, $m$ stands for the number of data samples. </p><h3 id="Gini-Impurity-or-Entropy"><a href="#Gini-Impurity-or-Entropy" class="headerlink" title="Gini Impurity or Entropy"></a>Gini Impurity or Entropy</h3><p>By default, the Gini impurity measure is used. We can also use entropy impurity measure by setting the <strong>criterion</strong> to “entropy”. </p><p>Entropy</p><p>$H_i = -\sum_{k=1, p_{i,k}\ne0}^n p_{i,k} log_2(p_{i,k})$</p><p>In most cases, they produce similar trees. When they differ, Gini impurity tends to isolate the most frequent class in its own branch of the tree, while entropy tends to produce slightly more balanced trees. </p><h3 id="Regularization-Hyperparameter"><a href="#Regularization-Hyperparameter" class="headerlink" title="Regularization Hyperparameter"></a>Regularization Hyperparameter</h3><p>A parametric model, such as a linear model, has a predetermined number of parameters, so its degree of freedom is limited. DT is a nonparametric model, which is more likely to overfit training data.</p><p>Increasing min_* hyperparams or reduce max_* hyperparams will regularize the model. Other alg work by first training DT w/o restrictions, then pruning unnecessary nodes. Standard statistical tests such as chi-squared test can be used to estimate the nodes’ significance. </p><h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressortree_reg <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>tree_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>The CART tries to split the training set in a way that minimizes the MSE. </p><h3 id="Instability"><a href="#Instability" class="headerlink" title="Instability"></a>Instability</h3><p>DT love orthogonal decision boundaries, making them sensitive to training set rotation. One solution is to use PCA, which often results in a better orientation. </p><p>The main issue with DT is that they are sensitive to small variations. Besides, we can get very different models even on the same training data. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 05 svm</title>
      <link href="/Blog/2020/07/21/hands-on-05-svm/"/>
      <url>/Blog/2020/07/21/hands-on-05-svm/</url>
      
        <content type="html"><![CDATA[<h1 id="Linear-SVM-Classification"><a href="#Linear-SVM-Classification" class="headerlink" title="Linear SVM Classification"></a>Linear SVM Classification</h1><p>SVM are sensitive to the feature scales. </p><h3 id="Soft-Margin-Classification"><a href="#Soft-Margin-Classification" class="headerlink" title="Soft Margin Classification"></a>Soft Margin Classification</h3><p>If we strictly impose that all instances must be on one side, it is called hard margin classification. There are two main issue: 1) only works if the data is linearly separable 2) sensitive to outliers. </p><p>To avoid these issues, use a more flexible model. The objective is to find a good balance between keeping the margin large and limiting the margin violations. It is called soft margin classification.</p><p>If our SVM is overfitting, try reducing <strong>C</strong>. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> LinearSVCiris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> iris<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># petal length, petal width</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>iris<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Iris virginica</span>svm_clf <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"scaler"</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"linear_svc"</span><span class="token punctuation">,</span> LinearSVC<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">"hinge"</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>svm_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>SVM classifiers do not output probabilities for each class. </p><p>The LinearSVC class regularizes the bias term, so we should center the training set first by subtracting its mean. For better performance, we need to set <strong>dual</strong> to False, unless there are more features than training instances. </p><h1 id="Nonlinear-SVM-Classification"><a href="#Nonlinear-SVM-Classification" class="headerlink" title="Nonlinear SVM Classification"></a>Nonlinear SVM Classification</h1><p>For some datasets that are not even close to being linearly separable, one approach is to add more features (e.g., polynomial features). </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_moons<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeaturespolynomial_svm_clf <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly_features"</span><span class="token punctuation">,</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"scaler"</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"svm_clf"</span><span class="token punctuation">,</span> LinearSVC<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">"hinge"</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>polynomial_svm_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><h3 id="Polynomial-Kernel"><a href="#Polynomial-Kernel" class="headerlink" title="Polynomial Kernel"></a>Polynomial Kernel</h3><p>There is a trick in SVM called kernel trick, which makes it possible to get the same result as if we add many poly features. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVCpoly_kernel_svm_clf <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"scaler"</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"svm_clf"</span><span class="token punctuation">,</span> SVC<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">"poly"</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> coef0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>poly_kernel_svm_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>The hyperparam <strong>coef0</strong> controls how much the model is influenced by high-degree poly versus low-degree poly. </p><p>A common approach to find the right hyperparam values is to use grid search. It is often faster to first do a very coarse grid search, then a finer grid search around the best values found. </p><h3 id="Similarity-Features"><a href="#Similarity-Features" class="headerlink" title="Similarity Features"></a>Similarity Features</h3><p>Another tech to tackle nonlinear problems is to add features computed using a similarity function, measuring how much each instance resembles a particular landmark. </p><p>Gaussian Radial Basis Function (RBF)</p><p>$\phi_\gamma(x, l)=exp(-\gamma||x-l||^2)$</p><p>This is a bell-shaped function varying from 0 (far from landmark) to 1. </p><p>The simplest approach to select the landmarks: create a landmark at the location of each and every instance in the dataset. The downside is that a training set of size m*n will be turned to size m*m (assuming drop the original features).</p><h3 id="Gaussian-RBF-Kernel"><a href="#Gaussian-RBF-Kernel" class="headerlink" title="Gaussian RBF Kernel"></a>Gaussian RBF Kernel</h3><pre class=" language-python"><code class="language-python">rbf_kernel_svm_clf <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"scaler"</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"svm_clf"</span><span class="token punctuation">,</span> SVC<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">"rbf"</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>rbf_kernel_svm_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>Increasing $\gamma$ makes the curve narrower, each instance’s range of influence is smaller: the decision boundary becomes more irregular. If our model is overfitting, reduce it. </p><h3 id="Computational-Complexity"><a href="#Computational-Complexity" class="headerlink" title="Computational Complexity"></a>Computational Complexity</h3><p>The LinearSVC class is based on liblinear library, which implements an optimized alg for linear SVM. It does not support the kernel trick, but scales well. $O(m*n)$</p><p>The SVC class is based on libsvm library, supporting kernel trick.  $O(m^2<em>n)$ to $O(m^3</em>n)$. This alg suits complex small or medium-sized training sets. It scales well with the number of features, especially with sparse features. </p><h1 id="SVM-Regression"><a href="#SVM-Regression" class="headerlink" title="SVM Regression"></a>SVM Regression</h1><p>The objective is reversed: fit as many instances as possible on the street while limiting margin violations. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> LinearSVRsvm_reg <span class="token operator">=</span> LinearSVR<span class="token punctuation">(</span>epsilon<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>svm_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>To tackle nonlinear regression tasks, use kernelized SVM. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVRsvm_poly_reg <span class="token operator">=</span> SVR<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">"poly"</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> epsilon<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token string">"scale"</span><span class="token punctuation">)</span>svm_poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><h1 id="Under-the-Hood"><a href="#Under-the-Hood" class="headerlink" title="Under the Hood"></a>Under the Hood</h1><p>Compute $w^Tx+b$ . The slope is w, the smaller the slope, the larger the margin. </p><h3 id="Dual"><a href="#Dual" class="headerlink" title="Dual"></a>Dual</h3><p>Given a constrained optimization problem, know as the primal problem, it is possible to express a different but closely related problem, called its dual problem. The solution to the dual problem typically gives a lower bound to the solution of the primal problem. Sometimes, it provides the same solution. </p><h3 id="Kernelized-SVM"><a href="#Kernelized-SVM" class="headerlink" title="Kernelized SVM"></a>Kernelized SVM</h3><p>Suppose we want to apply a second-degree poly transformation to a two-dimensional training set, then train a linear SVM classifier on the transformed data. </p><p>The term of $\phi(a)$ includes $x_1^2, \sqrt{2}x_1x_2, x_2^2$. If we apply this mapping to two 2D vectors, and compute the dot product. We will get  $\phi(a)^T\phi(b) = (a^Tb)^2$</p><p>In ML, a kernel is a function capable of computing the dot product $\phi(a)^T\phi(b)$ based only on the original vectors a and b, without having to compute the transformation. </p><p>Mercer’s Theorem: if a function K(a, b) respects a few mathematical conditions called Mercer’s conditions (e.g., K must be continuous and symmetrical: K(a, b) = K(b, a)) then there exists a function $\phi$ that maps a and b into another space (possibly much higher dim) such that K(a, b) = $\phi(a)^T\phi(b)$. We can use K as a kernel even if we do not know what $\phi$ is. </p><h3 id="Online-SVM"><a href="#Online-SVM" class="headerlink" title="Online SVM"></a>Online SVM</h3><p>One method is to use GD. But it converges more slowly than the methods based on QP. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ml basic: 01 problem modeling</title>
      <link href="/Blog/2020/07/21/ml-basic-01-problem-modeling/"/>
      <url>/Blog/2020/07/21/ml-basic-01-problem-modeling/</url>
      
        <content type="html"><![CDATA[<h1 id="问题建模"><a href="#问题建模" class="headerlink" title="问题建模"></a>问题建模</h1><h2 id="1-1-评估指标"><a href="#1-1-评估指标" class="headerlink" title="1.1 评估指标"></a>1.1 评估指标</h2><p>线下使用机器学习评估指标，线上使用的是业务指标。需要进行多轮模型迭代使两个指标变化趋势相同。  </p><h3 id="1-1-1-分类指标"><a href="#1-1-1-分类指标" class="headerlink" title="1.1.1 分类指标"></a>1.1.1 分类指标</h3><p><strong>精确率和召回率</strong>  </p><p>用于二分类问题，结合混淆矩阵。   </p><p>精确率 P = $\frac{TP}{TP+FP}$<br>召回率 R = $\frac{TP}{TP+FN}$  </p><p>精确率：也称作查准率。在被识别为正类别的样本中，确实是正类别的比例。</p><p>召回率：也成为查全率。在所有正类别样本中，被正确识别为正类别的比例</p><p>以召回率R为横轴，以精确率P为纵轴画P-R曲线，越靠近右上角性能越好。曲线下的面积为AP分数(Average Precision Score)  。</p><img src="prcurve.png"><p>如果一个PR曲线完全包含另一个，则前者性能更优。如果两个曲线发生交叉，则比较平衡点，远离原点的更好。</p><p><strong>F值</strong></p><p>$\frac{2}{F_1} = \frac{1}{P} + \frac{1}{R}$</p><p>可泛化成为$F_\alpha = \frac{(1+\alpha^2)<em>P</em>R}{\alpha^2*P+R}$</p><p>在不同的情况下，对精准率和召回率的偏重是不一样的，如在推荐系统中，为了尽可能少打扰用户，更希望推荐的内容是用户喜欢的，这时，精准率比较重要；而在逃犯检索系统中，更希望尽可能少漏掉逃犯，此时召回率比较重要。</p><p>当参数$\alpha$&gt;1时，召回率有更大影响，可以考虑为，$\alpha$无穷大时，分母中的R和分子中的1都可忽略不计，则F=R，只有召回率起作用。</p><p><strong>准确率和错误率</strong></p><p>不要将精确率和准确率搞混。准确率是模型预测正确的结果所占的比例。</p><p>而且精确率仅仅适用于二分类概念。</p><p><strong>ROC和AUC</strong></p><p>接受者操作特征 Receiver Operating Characteristic (ROC)</p><p>解决了使用精确率等指标进行模型评估时，需要对预测概率设分类阈值，增添超参数，的问题。</p><p>真正率 TPR = $\frac{TP}{TP+FN}$  </p><p>假正率 FPR = $\frac{FP}{FP+TN}$   </p><p>以假正率为x轴，以真正率为y轴，ROC曲线越靠近左上角越好。此时TPR=1，FPR=0。在采用有限测试样例绘制ROC图时，无法画出光滑曲线。过程：给定$m_1$个正例和$m_2$个反例，根据预测结果对样例进行排序，把分类阈值设为最大，即把所有样例均预测成为反例，此时TPR=FPR=0，在(0,0)处标记一个点。然后，将分类阈值依次设为每个样例的预测值，依次将每个样例划分为正例。设前一个标记点坐标为$(x,y)$，当前若为真正例，则对应标记点坐标为$(x,y+\frac{1}{m_1})$，否则对应标记点坐标为$(x+\frac{1}{m_2},y)$。用线段连接相邻点。</p><p>Area Under ROC Curve (AUC)是指ROC曲线下的面积。取值越大，说明模型越可能将正样本放在负样本前面。AUC计算主要与排序有关，对预测分数没那么敏感。</p><p>$l_{rank}  = \frac{1}{m_1+m_2} \sum_{x^+}\sum_{x^-} I(f(x^+)&lt;f(x^-) + 0.5I(f(x^+) = f(x^-)))$</p><p>$AUC = 1-l_{rank}$</p><p>在非均等代价下，ROC曲线不能直接反映出学习器的期望总体代价，而代价曲线可以。横轴是取值为[0,1]的正例概率代价，纵轴是取值为[0,1]的归一化代价。</p><p>$cost_{01}, cost_{10}$ 分别代表type one error和type two error。</p><p>$P(+)cost = \frac{p<em>cost_{01}}{p</em>cost_{01} + (1-p)*cost_{10}}$</p><p>$cost_{norm} = \frac{FNR<em>p</em>cost_{01} + FPR*(1-p)<em>cost_{10}}{p</em>cost_{01} + (1-p)*cost_{10}}$</p><p><strong>对数损失</strong></p><p>logistic loss = $-logP(Y|X)$ = $-\frac{1}{NC}\sum_{i=0}^N\sum_{j=0}^C{y_{ij}*logp_{ij}}$</p><p>衡量预测概率分布和真实概率分布的差异性。取值越小越好。对预测概率敏感。</p><h3 id="1-1-2-回归指标"><a href="#1-1-2-回归指标" class="headerlink" title="1.1.2 回归指标"></a>1.1.2 回归指标</h3><p><strong>平均绝对误差</strong></p><p>平均绝对误差Mean Absolute Error，也称为L1范数损失。</p><p>MAE = $\frac{1}{N}\sum_{i=0}^N{|y_i-p_i|}$</p><p>对数据分布的中值进行拟合。</p><p>缺点：</p><ul><li>有些模型（如XGBoost）必须要求损失函数有二阶导，不能直接优化MAE。</li></ul><p>加权平均绝对误差Weighted Mean Absolute Error是其变种。比如可以考虑时间因素。</p><p>WMAE = $\frac{1}{N}\sum_{i=0}^N{w_i|y_i-p_i|}$</p><p><strong>平均绝对百分误差</strong></p><p>MAPE = $\frac{100}{N}\sum_{i=0}^N{\frac{|y_i-p_i|}{y_i}}$，要求$y_i\neq0$</p><p>优点：</p><ul><li>其计算与量纲无关，易于比较。</li></ul><p>缺点：</p><ul><li>对负值误差的惩罚大于正值误差（因为分母y小了）。</li><li>在$y_i$ = 0处无定义，或者太小的时候导致MAPE过大</li></ul><p><strong>均方根误差</strong></p><p>对数据分布的平均值进行拟合。</p><p>RMSE = $\sqrt{\frac{1}{N}\sum_{i=0}^N{(y_i-p_i)^2}}$</p><p>缺点：</p><ul><li>对大误差样本有更大惩罚。</li><li>对离群点敏感，健壮性不如MAE</li></ul><p>均方根对数误差Root Mean Squared Logarithmic Error (RMSLE)</p><p>RMSLE = $\sqrt{\frac{1}{N}\sum_{i=0}^N{(log(y_i+1)-log(p_i+1))^2}}$</p><p>缺点：</p><ul><li><p>对预测值偏小的样本惩罚比对预测值偏大的样本惩罚更大。</p></li><li><p>有可能无法直接优化RMSLE，但是若可以优化RMSE，可以先对预测目标进行对数变换$y_{new}=log(y+1)$。</p></li></ul><h3 id="1-1-3-排序指标"><a href="#1-1-3-排序指标" class="headerlink" title="1.1.3 排序指标"></a>1.1.3 排序指标</h3><p>// TODO</p><p><strong>平均准确率均值</strong></p><p>Mean Average Precision (MAP)</p><p>公式分两部分计算</p><p>AP@K = </p><p><strong>归一化贴现累计收益</strong> NDCG</p><p>Normalized Discounted Cumulative Gain</p><h3 id="1-1-4-比较检验"><a href="#1-1-4-比较检验" class="headerlink" title="1.1.4 比较检验"></a>1.1.4 比较检验</h3><h4 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h4><p>我们不知道学习器泛化错误率，只能知道测试错误率。设泛化错误率是$\epsilon$，测试错误率是$\hat\epsilon$, 测试样本为m，其中有e个样本被误分类。则该学习器被测出来测试错误率为$\hat\epsilon$的概率是$P(\hat\epsilon;\epsilon)=C(m, \hat\epsilon<em>m)\epsilon^{\hat\epsilon</em>m}(1-\epsilon)^{m-\hat\epsilon}$. </p><h4 id="交叉验证t-test"><a href="#交叉验证t-test" class="headerlink" title="交叉验证t test"></a>交叉验证t test</h4><p>可采用5*2交叉验证：做5次2折交叉验证。每次2折交叉验证之前随即将数据打乱。</p><p>$t = \frac{\mu}{\sqrt{0.2\sum_{i=1}^5\sigma_i^2}}$</p><h4 id="McNemar检验"><a href="#McNemar检验" class="headerlink" title="McNemar检验"></a>McNemar检验</h4><p>若我们假设两学习器性能相同，应该有$e_{01}$ = $e_{10}$（下标分别表示两个学习器分类是否正确的情况）. 变量|$e_{01}$-$e_{10}$|应当服从正态分布，均值为1，方差为$e_{01}$+$e_{10}$。称作卡方分布。</p><h4 id="Friedman检验与Nemenyi后续检验"><a href="#Friedman检验与Nemenyi后续检验" class="headerlink" title="Friedman检验与Nemenyi后续检验"></a>Friedman检验与Nemenyi后续检验</h4><p>在一组数据集上比较多组算法。</p><h2 id="1-2-样本选择"><a href="#1-2-样本选择" class="headerlink" title="1.2 样本选择"></a>1.2 样本选择</h2><p>选择最少量的训练集S$\sub$完整训练集T，模型效果不会变差。</p><p>优势：</p><ul><li>缩减模型计算时间</li><li>相关性太低的数据对解决问题没有帮助，直接剔除</li><li>去除噪声</li></ul><h3 id="1-2-1-数据去噪"><a href="#1-2-1-数据去噪" class="headerlink" title="1.2.1 数据去噪"></a>1.2.1 数据去噪</h3><p><strong>噪声数据</strong></p><ol><li>特征值不对（缺失、超出值域范围），可能提升模型健壮性</li><li>标注不对，降低数据质量。</li></ol><p><strong>处理方法</strong></p><p>基于融合或者投票的思想</p><ol><li>集成过滤法Ensemble Filter</li><li>交叉验证委员会过滤法Cross-Validated Committees Filter</li><li>迭代分割过滤法Iterative-Partitioning Filter</li></ol><p>基于业务本身</p><ol><li>清洗爬虫数据</li><li>过滤掉无效曝光</li><li>过滤掉最后一次点击之后的展示（用户可能没看到）</li></ol><h3 id="1-2-2-采样"><a href="#1-2-2-采样" class="headerlink" title="1.2.2 采样"></a>1.2.2 采样</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>克服高维特征以及大量数据导致的问题，缩短时间</li><li>在不平衡分类问题中帮助平衡样本比例</li></ul><h4 id="计算样本大小"><a href="#计算样本大小" class="headerlink" title="计算样本大小"></a>计算样本大小</h4><p>$P(|e-e_0|\geq\epsilon) \leq \delta$</p><p>e代表样本的估计，通常是样本大小n的函数。</p><p>$e_0$代表真实样本，一般未知</p><h4 id="采样方法"><a href="#采样方法" class="headerlink" title="采样方法"></a>采样方法</h4><p>目标：无偏性Unbiasedness + 小样本方差 Sampling Variance</p><ol><li>无放回简单随机抽样</li><li>有放回简单随机抽样</li><li>平衡采样</li><li>整群采样</li><li>分层采样</li></ol><h3 id="1-2-3-原型选择和悬链及选择"><a href="#1-2-3-原型选择和悬链及选择" class="headerlink" title="1.2.3 原型选择和悬链及选择"></a>1.2.3 原型选择和悬链及选择</h3><p>原型选择</p><p>在样本选择过程中不需要训练模型，只选取相似度指标来找到分类精度和数据量最佳的训练集，多采用KNN算法。</p><p>训练集</p><p>构建预测模型来进行样本选择的方法，比如决策树和SVM等算法。</p><h2 id="1-3-交叉验证"><a href="#1-3-交叉验证" class="headerlink" title="1.3 交叉验证"></a>1.3 交叉验证</h2><h3 id="1-3-1-留出法"><a href="#1-3-1-留出法" class="headerlink" title="1.3.1 留出法"></a>1.3.1 留出法</h3><p>概念：</p><p>随机划分成两份互斥的数据集。</p><p>优点：</p><ul><li>时间序列数据可用早一些的数据做训练集，晚一些的做测试集</li></ul><p>缺点：</p><ul><li>不能充分利用数据训练模型</li><li>划分结果严重影响最终结果</li></ul><p>解决方案：</p><ul><li>多次留出，将多次得到的实验结论进行平均</li></ul><h3 id="1-3-2-K折交叉验证"><a href="#1-3-2-K折交叉验证" class="headerlink" title="1.3.2 K折交叉验证"></a>1.3.2 K折交叉验证</h3><p>概念：</p><p>平均分成K份，每次用一份数据测试，其余数据训练。K=N时，就是留一法Leave One Out (LOO)。还有一种变体是分层K折，适用于不均衡分类问题。</p><p>优点：</p><ul><li>数据利用率高</li></ul><p>缺点：</p><ul><li>稳定性和K取值有关。太小则稳定性偏低，太大则实验成本搞。</li></ul><h3 id="1-3-3-自助法-Bootstrapping"><a href="#1-3-3-自助法-Bootstrapping" class="headerlink" title="1.3.3 自助法 Bootstrapping"></a>1.3.3 自助法 Bootstrapping</h3><p>概念：</p><p>自主采样，有放回的重复采样，构建n条样本的训练集。一些样本在训练集重复出现，另一些没有出现的作为测试集。适用于数据量比较小。</p><p>每条样本没被采到的概率$P_0 =  1 - \frac{1}{n}$，经过n次采样还没有采到的概率是$lim_{n-&gt;+\infty}(1-\frac{1}{n})^n = e^{-1} = 0.368$</p><p>优点：</p><ul><li>解决了其他采样得到的模型会因为训练集大小不一致产生一定偏差的问题</li></ul><p>缺点：</p><ul><li>改变了初始数据集分布，引入估计偏差</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>《美团机器学习实践》by美团算法团队，第一章</li><li>《机器学习》by周志华，第二章</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tree</title>
      <link href="/Blog/2020/07/21/tree/"/>
      <url>/Blog/2020/07/21/tree/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树-Tree"><a href="#二叉树-Tree" class="headerlink" title="二叉树 Tree"></a>二叉树 Tree</h1><ol><li>先问清楚是不是二叉树？二叉搜索树？子节点到父节点的指针？  </li><li>大部分题目可以通过递归解决  </li><li>掌握四种遍历树的方法inorder, preorder, postorder, level order  </li><li>配合遍历的顺序，有可能需要借助额外的数据结构，比如栈  </li></ol><h2 id="one-root"><a href="#one-root" class="headerlink" title="one root"></a>one root</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Node <span class="token function">solve</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>    Node l <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    Node r <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="two-roots"><a href="#two-roots" class="headerlink" title="two roots"></a>two roots</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">solve</span><span class="token punctuation">(</span>Node p<span class="token punctuation">,</span> Node q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!=</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> l <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> r <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="前缀树-Trie"><a href="#前缀树-Trie" class="headerlink" title="前缀树 Trie"></a>前缀树 Trie</h1><ol><li>终点节点的处理（这里的终点节点并不一定是叶子节点）</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      TrieNode<span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> isWord<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          isWord <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h1 id="树状数组-二元索引树-Binary-Indexed-Tree"><a href="#树状数组-二元索引树-Binary-Indexed-Tree" class="headerlink" title="树状数组/二元索引树 Binary Indexed Tree"></a>树状数组/二元索引树 Binary Indexed Tree</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BIT</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BIT</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> diff<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sum<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> diff<span class="token punctuation">;</span>            i <span class="token operator">+=</span> i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">-=</span> i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="线段树-Segment-Tree"><a href="#线段树-Segment-Tree" class="headerlink" title="线段树 Segment Tree"></a>线段树 Segment Tree</h1><ol><li>Each leaf node represents an element in the array.<br>Each non leaf node covers the union of its children’s range.</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// can be max or min</span>    SegmentTreeNode left<span class="token punctuation">;</span>    SegmentTreeNode right<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// time: O(n)</span><span class="token keyword">public</span> SegmentTreeNode <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vals<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> vals<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    SegmentTreeNode left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> vals<span class="token punctuation">)</span><span class="token punctuation">;</span>    SegmentTreeNode right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> vals<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">.</span>sum<span class="token operator">+</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// time: O(log n)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>SegmentTreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">==</span> root<span class="token punctuation">.</span>end <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>start <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a leaf node</span>        root<span class="token punctuation">.</span>sum <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>sum <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// time: O(log n + k)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>SegmentTreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">==</span> l <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>end <span class="token operator">==</span> j<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> mid<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>花花酱 算法/数据结构 特辑 SP <a href="https://www.youtube.com/playlist?list=PLLuMmzMTgVK5Hy1qcWYZcd7wVQQ1v0AjX">https://www.youtube.com/playlist?list=PLLuMmzMTgVK5Hy1qcWYZcd7wVQQ1v0AjX</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> tree </tag>
            
            <tag> Trie </tag>
            
            <tag> Segment Tree </tag>
            
            <tag> BIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>greedy</title>
      <link href="/Blog/2020/07/21/greedy/"/>
      <url>/Blog/2020/07/21/greedy/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><ol><li>排序！如果是内置数据结构，直接使用自定义排序。排序之后考虑能否使用binary search。</li></ol><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>list</title>
      <link href="/Blog/2020/07/21/list/"/>
      <url>/Blog/2020/07/21/list/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>链表存储空间不一定连续，是临时分配的，所以不能像数组一样用索引提取元素。</p><p>大量链表问题可以使用额外数据结构简化。但是最优解一般不使用额外数据结构。</p><h2 id="解题要点"><a href="#解题要点" class="headerlink" title="解题要点"></a>解题要点</h2><ol><li>单向/双向？有环/无环？</li><li>翻转链表、交换两个节点是基础</li><li>头节点有可能发生变动的，考虑创建dummy head</li><li>考虑新开一个链表</li><li>快慢指针</li><li>发生指针变动的可能需要分情况讨论</li><li>把需要改变的节点存起来</li><li>链表调整函数的返回值类型，一般是节点类型</li><li>先画图理清思路</li><li>边界条件：头尾节点、空节点</li></ol>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>graph</title>
      <link href="/Blog/2020/07/21/graph/"/>
      <url>/Blog/2020/07/21/graph/</url>
      
        <content type="html"><![CDATA[<h1 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图 Graph"></a>图 Graph</h1><ol><li>图形题不一定需要建图</li><li>如果需要建图，考虑边是否具有方向</li><li>考虑节点到本身是否有边</li></ol><p><strong>建图方式</strong>  </p><ul><li><p>邻接矩阵 Adjacency matrix  </p><p>space: O(|V|^2)  </p><p>search: O(1)</p></li><li><p>邻接表 Adjacency list  </p><p>space: O(|V|+|E|) = O(|V|^2) for dense graph  </p><p>search: O(|L|) 只和该节点的neighbor数量有关   </p></li><li><p>边表 Edge list  </p><p>space: O(|E|)  </p><p>search: O(|E|)   </p></li></ul><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><ol><li>记得还原每一步所做的改动</li><li>添加结果的时候不能只是添加引用，要重新创建对象</li><li>不符合要求的进行剪枝</li><li>考虑输入变量是否需要排序</li></ol><h2 id="深度优先-DFS"><a href="#深度优先-DFS" class="headerlink" title="深度优先 DFS"></a>深度优先 DFS</h2><ol><li>只需找到多组解其中一种的，首先考虑DFS  </li><li>找环首先考虑DFS  </li><li>递归调用第一步就是判断输入是否合法  </li><li>类似 preorder traversal  </li><li>如果只需要一组解，或者题目保证只有一组解，那么dfs的返回类型可以是boolean，这样能减少递归次数。如果题目要求返回所有满足条件的解，那么返回类型应当是void。  </li></ol><pre class=" language-java"><code class="language-java">visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">|</span>V<span class="token operator">|</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node v<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Node child<span class="token operator">:</span> v<span class="token punctuation">.</span>neighbors<span class="token punctuation">)</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="广度优先-BFS"><a href="#广度优先-BFS" class="headerlink" title="广度优先 BFS"></a>广度优先 BFS</h2><ol><li>找最短路径，首先考虑BFS   </li><li>类似 level order traversal  </li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Node v<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Queue q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node child<span class="token operator">:</span> cur<span class="token punctuation">.</span>neighbors<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Spanning-Tree"><a href="#Spanning-Tree" class="headerlink" title="Spanning Tree"></a>Spanning Tree</h2><p>If tree T is a subgraph of G, and it contains all vertices of G<br>设Spanning Tree的顶点和边分别是V’和E’  </p><p>|V’| = |V|, |E’| = |V| - 1, E’ $\subset$ E  </p><h3 id="最小生成树-Minimum-Spanning-Tree"><a href="#最小生成树-Minimum-Spanning-Tree" class="headerlink" title="最小生成树 Minimum Spanning Tree"></a>最小生成树 Minimum Spanning Tree</h3><p>每一条边都有权重，使权重之后最小<br>Prim’s  alg: pick a start vertex, treat it as root;  at each iteration, choose lowest weighted edge that connects a vertex without creating any cycles.  本质上是先形成一棵树，慢慢添加节点，向外扩展。   </p><p>time: O(|E|*log|V|), binary heap + adjacency list  </p><pre class=" language-python"><code class="language-python">T <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cost <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">=</span> getMinEdge<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># u $\in$ T, v $\notin$ T</span>    T<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    cost <span class="token operator">+=</span> w<span class="token keyword">return</span> cost</code></pre><p>Kruskal’s  alg: add all vertices to MST, sort edges by weights;  at each iteration, add edge with minimum weight that does not create a cycle.  pick a vertex to be root.  本质上是构建一棵树的一部分，最后进行连通，使之成为一棵树。需要用到并查集的思想。  </p><p>time: O(|E|*log|V|)  </p><pre class=" language-python"><code class="language-python">cost <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">=</span> getMinEdge<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># !connected(u,v) </span>    merge<span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    cost <span class="token operator">+=</span> w<span class="token keyword">return</span> cost</code></pre><h2 id="拓扑排序-Topological-Order"><a href="#拓扑排序-Topological-Order" class="headerlink" title="拓扑排序 Topological Order"></a>拓扑排序 Topological Order</h2><p>BFS或者DFS都可解 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toporder</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Node<span class="token operator">></span> nodes<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Stack st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    Node<span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Node v<span class="token operator">:</span> nodes<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPredecessor</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> childrenVisited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        Node unvisitedChild <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node child<span class="token operator">:</span> cur<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                unvisitedChild <span class="token operator">=</span> child<span class="token punctuation">;</span>                childrenVisited <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenVisited<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            idx<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>unvisitedChild<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>unvisitedChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="并查集-Union-Find"><a href="#并查集-Union-Find" class="headerlink" title="并查集 Union Find"></a>并查集 Union Find</h2><ol><li>找一个共同的祖先或者连接，可以使用并查集  </li><li>如果题目没有给出一个明确的n，很可能是并查集的变体  </li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UFS</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parents<span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ranks<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">UFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          ranks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>              ranks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> parents<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              parents<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> parents<span class="token punctuation">[</span>parents<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              u <span class="token operator">=</span> parents<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> u<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> ru <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> rv <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ru <span class="token operator">==</span> rv<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>ru<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>rv<span class="token punctuation">]</span><span class="token punctuation">)</span>              parents<span class="token punctuation">[</span>rv<span class="token punctuation">]</span> <span class="token operator">=</span> ru<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>rv<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>ru<span class="token punctuation">]</span><span class="token punctuation">)</span>              parents<span class="token punctuation">[</span>ru<span class="token punctuation">]</span> <span class="token operator">=</span> rv<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              parents<span class="token punctuation">[</span>ru<span class="token punctuation">]</span> <span class="token operator">=</span> rv<span class="token punctuation">;</span>              ranks<span class="token punctuation">[</span>rv<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dp</title>
      <link href="/Blog/2020/07/19/dp/"/>
      <url>/Blog/2020/07/19/dp/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划-Dynamic-Programming"><a href="#动态规划-Dynamic-Programming" class="headerlink" title="动态规划 Dynamic Programming"></a>动态规划 Dynamic Programming</h1><ol><li>检查能不能拆分成子问题，且是否会被求解多次  </li><li>四大要素：状态，初始化，状态转移方程，结果  </li><li>优化空间，规律交错的题目尝试声明两个变量来存（一维DP两种状态）  </li><li>优化时间主要看内层循环的起始位置  </li><li>不一定会根据index做dp的索引，有可能是根据value。比如背包问题，dp[n][W]。<br>内层循环w时候，不需要从0开始，可以从w[i]开始即可。  </li></ol><h2 id="depend-on-constant-number-of-its-sub-problems"><a href="#depend-on-constant-number-of-its-sub-problems" class="headerlink" title="depend on constant number of its sub-problems"></a>depend on constant number of its sub-problems</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// T(n), S(n)->S(1)</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span> to n<span class="token operator">:</span>     dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h2 id="depend-on-all-its-sub-problems"><a href="#depend-on-all-its-sub-problems" class="headerlink" title="depend on all its sub-problems"></a>depend on all its sub-problems</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// T(n^2), S(n)</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span> to n<span class="token operator">:</span>  <span class="token comment" spellcheck="true">// problem size</span>    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span> to i <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">// sub-problem size</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h2 id="two-inputs"><a href="#two-inputs" class="headerlink" title="two inputs"></a>two inputs</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// T(mn), S(mn)</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span> to m<span class="token operator">:</span>    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span> to n<span class="token operator">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// T(n^3), S(n^2)</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">for</span> l <span class="token operator">=</span> <span class="token number">1</span> to n<span class="token operator">:</span>  <span class="token comment" spellcheck="true">// problem size</span>    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token function">to</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">// sub-problem start point</span>        j <span class="token operator">=</span> i<span class="token operator">+</span>l<span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">// end point</span>        <span class="token keyword">for</span> k <span class="token operator">=</span> i to j<span class="token operator">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h2 id="input-has-two-dimensions"><a href="#input-has-two-dimensions" class="headerlink" title="input has two dimensions"></a>input has two dimensions</h2><p>Personally, this is very similar to two inputs.   </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// T(mn), S(mn)</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span> to m<span class="token operator">:</span>    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span> to n<span class="token operator">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h2 id="input-has-two-dimensions-depends-on-some-sub-problems"><a href="#input-has-two-dimensions-depends-on-some-sub-problems" class="headerlink" title="input has two dimensions, depends on some sub-problems"></a>input has two dimensions, depends on some sub-problems</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// T(kmn), S(kmn)->S(mn)</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span> to K<span class="token operator">:</span>    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span> to m<span class="token operator">:</span>        <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span> to n<span class="token operator">:</span>            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>di<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dj<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>花花酱 算法/数据结构 特辑 SP <a href="https://www.youtube.com/playlist?list=PLLuMmzMTgVK5Hy1qcWYZcd7wVQQ1v0AjX">https://www.youtube.com/playlist?list=PLLuMmzMTgVK5Hy1qcWYZcd7wVQQ1v0AjX</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> dynamic programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>combination permutation</title>
      <link href="/Blog/2020/07/19/combination-permutation/"/>
      <url>/Blog/2020/07/19/combination-permutation/</url>
      
        <content type="html"><![CDATA[<h1 id="Combination"><a href="#Combination" class="headerlink" title="Combination"></a>Combination</h1><ol><li><p>如果需要返回的组合长度不一样，则需要在外层调用dfs时加循环</p></li><li><p>注意去重</p><p>time: O(2^n)</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// C(m, n)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> subset<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> subset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>subset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// remove duplicates</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        subset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> subset<span class="token punctuation">)</span><span class="token punctuation">;</span>        subset<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>subset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>    n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Permutation"><a href="#Permutation" class="headerlink" title="Permutation"></a>Permutation</h1><ol><li><p>如果有重复数字，需要先排序，且不能使用HashSet记录是否被使用过，<br>需要用一个boolean数组。    </p></li><li><p>注意去重   </p><p>time: O(n!)</p></li></ol><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// help remove duplicates later</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> cur<span class="token punctuation">,</span> HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> used<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// remove duplicates</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        used<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>花花酱 算法/数据结构 特辑 SP <a href="https://www.youtube.com/playlist?list=PLLuMmzMTgVK5Hy1qcWYZcd7wVQQ1v0AjX">https://www.youtube.com/playlist?list=PLLuMmzMTgVK5Hy1qcWYZcd7wVQQ1v0AjX</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> combination </tag>
            
            <tag> permutation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 13 preprocess</title>
      <link href="/Blog/2020/07/19/hands-on-13-preprocess/"/>
      <url>/Blog/2020/07/19/hands-on-13-preprocess/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-API"><a href="#Data-API" class="headerlink" title="Data API"></a>Data API</h1><p>Load data from disk. </p><pre class=" language-python"><code class="language-python">dataset <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">,</span> target<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Just use the below as an example. Easier to understand. </p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> tf<span class="token punctuation">.</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><h3 id="Chaining-Transformation"><a href="#Chaining-Transformation" class="headerlink" title="Chaining Transformation"></a>Chaining Transformation</h3><p>Apply transformations.</p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p>We first call repeat() method, which returns a new dataset that will repeat the items of the original one three times. </p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>unbatch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>Note that the function passed to map() must be convertible to a TF function. The map() method applies a transformation to each item, and the apply() method applies to the whole dataset. </p><p>If we want to look at first few items in the dataset, use take().</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><h3 id="Shuffling"><a href="#Shuffling" class="headerlink" title="Shuffling"></a>Shuffling</h3><p>GD works best when the instances in the training set are iid. Using shuffle() to create a new dataset that will start by filling up a buffer with the first items of the source dataset. Specify the buffer size and make sure it is large enough. </p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>buffer_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></code></pre><p>If the dataset is too large, this method may not be efficient. One solution is to shuffle the source data. Or, we can split the source data into multiple files, and then read them in a random order during training. To avoid the cases that instances located in the same file end up close to each other, pick multiple files randomly and read them simultaneously. </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># train_path contains a list of training file paths</span>file_set <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>list_files<span class="token punctuation">(</span>tran_filepaths<span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>n_readers <span class="token operator">=</span> <span class="token number">5</span><span class="token comment" spellcheck="true"># skip first line which is header row</span>data <span class="token operator">=</span> file_set<span class="token punctuation">.</span>interleave<span class="token punctuation">(</span><span class="token keyword">lambda</span> path<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>TextLineDataset<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          cycle_length<span class="token operator">=</span>n_readers<span class="token punctuation">)</span></code></pre><p>For interleaving to work best, it is preferable to have files of identical length; otherwise the ends of the longest files will not be interleaved. </p><h3 id="Preprocess"><a href="#Preprocess" class="headerlink" title="Preprocess"></a>Preprocess</h3><pre class=" language-python"><code class="language-python">n_inputs <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>    defs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n_input <span class="token operator">+</span> <span class="token punctuation">[</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">]</span>     fields <span class="token operator">=</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>decode_csv<span class="token punctuation">(</span>line<span class="token punctuation">,</span> record_defaults<span class="token operator">=</span>defs<span class="token punctuation">)</span>    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> tf<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>x_mean<span class="token punctuation">)</span><span class="token operator">/</span>x_std<span class="token punctuation">,</span> y</code></pre><p>tf.io.decode_csv() takes two arguments: the line to parse and an array containing the default value for each column in the csv file. For the target column, out code tells TF that this column contains floats, but that there is no default value. It will raise an exception if it encounters a missing value. This function returns a list of scalar tensors (one per column). </p><p>We need to stack all tensors into a 1D array. The y is a 1D tensor array with a single value rather than a scalar tensor. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">csv_reader_dataset</span><span class="token punctuation">(</span>filepaths<span class="token punctuation">,</span> rep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_reader<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> n_read_threads<span class="token operator">=</span>None<span class="token punctuation">,</span> shuffle_buf_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> n_parse_threads<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>list_files<span class="token punctuation">(</span>filepaths<span class="token punctuation">)</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>interleave<span class="token punctuation">(</span><span class="token keyword">lambda</span> path<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>TextLineDataset<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cycle_length<span class="token operator">=</span>n_readers<span class="token punctuation">,</span> num_parallel_calls<span class="token operator">=</span>n_read_threads<span class="token punctuation">)</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span>preprocess<span class="token punctuation">,</span> num_parallel_calls<span class="token operator">=</span>n_parse_threads<span class="token punctuation">)</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>shuffle_buf_size<span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>rep<span class="token punctuation">)</span>    <span class="token keyword">return</span> dataset<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="Prefetch"><a href="#Prefetch" class="headerlink" title="Prefetch"></a>Prefetch</h3><p>While out training algorithm is working on one batch, the dataset will already be working in parallel on getting the next batch ready. </p><p>If data can fit in memory, we can speed up training by using cache() method. Do this after loading and preprocessing, but before shuffling, repeating, batching, and prefetching. </p><h3 id="Using-dataset"><a href="#Using-dataset" class="headerlink" title="Using dataset"></a>Using dataset</h3><pre class=" language-python"><code class="language-python">train_set <span class="token operator">=</span> csv_reader_dataset<span class="token punctuation">(</span>train_filepaths<span class="token punctuation">)</span>valid_set <span class="token operator">=</span> csv_reader_dataset<span class="token punctuation">(</span>valid_filepaths<span class="token punctuation">)</span>test_set <span class="token operator">=</span> csv_reader_dataset<span class="token punctuation">(</span>test_filepaths<span class="token punctuation">)</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> validation_data<span class="token operator">=</span>valid_set<span class="token punctuation">)</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_set<span class="token punctuation">)</span>new_set <span class="token operator">=</span> test_set<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token punctuation">)</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>new_set<span class="token punctuation">)</span></code></pre><p>We can also create a TF function performing the whole training loop. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> optm<span class="token punctuation">,</span> loss_fn<span class="token punctuation">,</span> n_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    train_set <span class="token operator">=</span> csv_reader_dataset<span class="token punctuation">(</span>train_filepaths<span class="token punctuation">,</span> repeat<span class="token operator">=</span>n_epochs<span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> train_set<span class="token punctuation">:</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tape<span class="token punctuation">:</span>            y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            main_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>loss_fn<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>add_n<span class="token punctuation">(</span><span class="token punctuation">[</span>main_loss<span class="token punctuation">]</span><span class="token operator">+</span>model<span class="token punctuation">.</span>losses<span class="token punctuation">)</span>            grads <span class="token operator">=</span> tape<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> model<span class="token punctuation">.</span>trainable_variables<span class="token punctuation">)</span>            optm<span class="token punctuation">.</span>apply_gradients<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>grads<span class="token punctuation">,</span> model<span class="token punctuation">.</span>trainable_variables<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="TF-Record-Format"><a href="#TF-Record-Format" class="headerlink" title="TF Record Format"></a>TF Record Format</h1><p>TF’s preferred format for storing large amounts of data and reading it efficiently. Binary format. We can create and read a TFRecord file using codes below.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>TFRecordWriter<span class="token punctuation">(</span><span class="token string">"data.tfrecord"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">"this is the first"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">"this is the second"</span><span class="token punctuation">)</span>filepaths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"data.tfrecord"</span><span class="token punctuation">]</span>data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>TFRecordDataset<span class="token punctuation">(</span>filepaths<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p>We can compress them if they are large. </p><pre class=" language-python"><code class="language-python">options <span class="token operator">=</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>TFRecordOptions<span class="token punctuation">(</span>compression_type<span class="token operator">=</span><span class="token string">"GZIP"</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>TFRecordWriter<span class="token punctuation">(</span><span class="token string">"data.tfrecord"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    write<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>TFRecordDataset<span class="token punctuation">(</span>filepaths<span class="token punctuation">,</span> compression_type<span class="token operator">=</span><span class="token string">"GZIP"</span><span class="token punctuation">)</span></code></pre><h3 id="protocol-buffers"><a href="#protocol-buffers" class="headerlink" title="protocol buffers"></a>protocol buffers</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> perso_pb2 <span class="token keyword">import</span> Personp <span class="token operator">=</span> Person<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Al"</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a@b.com"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>person<span class="token punctuation">.</span>email<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"c@d.com"</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>person<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>ParseFromString<span class="token punctuation">(</span>s<span class="token punctuation">)</span>p <span class="token operator">==</span> p2 <span class="token comment" spellcheck="true"># return true</span></code></pre><p>The main protobuf used in TFRecord is Example protobuf. The definition is below</p><pre class=" language-python"><code class="language-python">syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span>message BytesList <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;repeated bytes value = 1;&amp;#125; </span>message FloatList <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;repeated float value = 1 [packed=true];&amp;#125; </span>message Int64List <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;repeated int64 value = 1 [packed=true];&amp;#125;</span>message Feature <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    oneof kind <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        BytesList bytes_list <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        FloatList float_list <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        Int64List int64_list <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span>message Features <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;map&lt;string, Feature> feature = 1;&amp;#125;;</span>message Example <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Features features = 1;&amp;#125;;</span></code></pre><p>[packed=true] is used for repeated numerical fields, for a more efficient encoding. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>train <span class="token keyword">import</span> BytesList<span class="token punctuation">,</span> FloatList<span class="token punctuation">,</span> Int64List<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>train <span class="token keyword">import</span> Feature<span class="token punctuation">,</span> Features<span class="token punctuation">,</span> Exampleperson_example <span class="token operator">=</span> Example<span class="token punctuation">(</span>features<span class="token operator">=</span>Features<span class="token punctuation">(</span>    feature<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> Feature<span class="token punctuation">(</span>byte_list<span class="token operator">=</span>BytesList<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>b<span class="token string">"Al"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"id"</span><span class="token punctuation">:</span> Feature<span class="token punctuation">(</span>int64_list<span class="token operator">=</span>Int64List<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"emails"</span><span class="token punctuation">:</span> Feature<span class="token punctuation">(</span>byte_list<span class="token operator">=</span>BytesList<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>b<span class="token string">"a@b.com"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;))</span></code></pre><h3 id="load-and-parse-examples"><a href="#load-and-parse-examples" class="headerlink" title="load and parse examples"></a>load and parse examples</h3><p>The code below defines a description dictionary, then iterates over the TFRecordDataset and parses the serialized Example protobuf in the dataset. </p><pre class=" language-python"><code class="language-python">feature_description <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>string<span class="token punctuation">,</span> default_value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"id"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int64<span class="token punctuation">,</span> default_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"emails"</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>VarLenFeature<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">for</span> serialized_example <span class="token keyword">in</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>TFRecordDataset<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"contacts.tfrecord"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parsed <span class="token operator">=</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>parse_single_example<span class="token punctuation">(</span>serialized_example<span class="token punctuation">,</span> feature_description<span class="token punctuation">)</span></code></pre><p>We can parse batch by batch. </p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>TFRecordDataset<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"c.tfrecord"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> serialized_examples <span class="token keyword">in</span> data<span class="token punctuation">:</span>    parsed <span class="token operator">=</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>parse_example<span class="token punctuation">(</span>serialized_examples<span class="token punctuation">,</span> feature_description<span class="token punctuation">)</span></code></pre><h3 id="SequenceExample-protobuf"><a href="#SequenceExample-protobuf" class="headerlink" title="SequenceExample protobuf"></a>SequenceExample protobuf</h3><p>Deigned to handle lists of lists. </p><p>Below is the definition. </p><pre class=" language-python"><code class="language-python">message FeatureList <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;repeated Feature feature = 1;&amp;#125;</span>message FeatureLists <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;map&lt;string, FeatureList> feature_list = 1;&amp;#125;;</span>message SequenceExample <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    Features context <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    FeatureLists feature_lists <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;;</span></code></pre><p>If the feature lists contain seqs of varying sizes, we may want to convert to ragged tensors. </p><pre class=" language-python"><code class="language-python">parsed_context<span class="token punctuation">,</span> parsed_feature_lists <span class="token operator">=</span> tf<span class="token punctuation">.</span>io<span class="token punctuation">.</span>parse_single_sequence_example<span class="token punctuation">(</span>    serialized_sequence_example<span class="token punctuation">,</span>     context_feature_descriptions<span class="token punctuation">,</span>     sequence_feature_descriptions<span class="token punctuation">)</span>parsed_content <span class="token operator">=</span> tf<span class="token punctuation">.</span>RaggedTensor<span class="token punctuation">.</span>from_sparse<span class="token punctuation">(</span>parsed_feature_lists<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h1 id="Preprocess-the-Input-Features"><a href="#Preprocess-the-Input-Features" class="headerlink" title="Preprocess the Input Features"></a>Preprocess the Input Features</h1><p>Preprocessing includes converting all features into numerical features, generally normalizing them, and more. We can include a preprocessing layer. </p><h3 id="standardize"><a href="#standardize" class="headerlink" title="standardize"></a>standardize</h3><pre class=" language-python"><code class="language-python">means <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>std <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>eps <span class="token operator">=</span> keras<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>epsilon<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> inputs<span class="token punctuation">:</span> <span class="token punctuation">(</span>inputs<span class="token operator">-</span>means<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>std<span class="token operator">+</span>eps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Or, we can use a nice self-contained custom layer. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Standardization</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">adapt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mean_ <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>data_sample<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>std_ <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>data_sample<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>inputs<span class="token operator">-</span>self<span class="token punctuation">.</span>mean_<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>std_<span class="token operator">+</span>keras<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>epsilon<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Before we use the layer, we need to adapt it to our dataset. </p><pre class=" language-python"><code class="language-python">std_layer <span class="token operator">=</span> Standardization<span class="token punctuation">(</span><span class="token punctuation">)</span>std_layer<span class="token punctuation">.</span>adapt<span class="token punctuation">(</span>data_sample<span class="token punctuation">)</span></code></pre><p>The data sample must be large enough to be representative of our dataset, but does not need to be he full set. </p><h3 id="one-hot-encoding"><a href="#one-hot-encoding" class="headerlink" title="one hot encoding"></a>one hot encoding</h3><pre class=" language-python"><code class="language-python">vocab <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"c1"</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">,</span> <span class="token string">"c3"</span><span class="token punctuation">]</span>indices <span class="token operator">=</span> tf<span class="token punctuation">.</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>table_init <span class="token operator">=</span> tf<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span>KeyValueTensorInitializer<span class="token punctuation">(</span>vocab<span class="token punctuation">,</span> indices<span class="token punctuation">)</span>num_oov_buckets <span class="token operator">=</span> <span class="token number">2</span>table <span class="token operator">=</span> tf<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span>StaticVocabularyTable<span class="token punctuation">(</span>table_init<span class="token punctuation">,</span> num_oov_buckets<span class="token punctuation">)</span></code></pre><p>The reason we use oov buckets: the number of categories is large, or the dataset keeps changing. One solution is to define the vocab based on a data sample (not whole training set) and add some oov buckets for other categories that were not in the sample. </p><p>We can look up in the table to encode in one-hot vectors. </p><pre class=" language-python"><code class="language-python">categories <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"c3"</span><span class="token punctuation">,</span> <span class="token string">"c4"</span><span class="token punctuation">,</span> <span class="token string">"c1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cat_indices <span class="token operator">=</span> table<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span>categories<span class="token punctuation">)</span>cat_one_hot <span class="token operator">=</span> tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>cat_indices<span class="token punctuation">,</span> depth<span class="token operator">=</span>len<span class="token punctuation">(</span>vocab<span class="token punctuation">)</span><span class="token operator">+</span>num_oov_buckets<span class="token punctuation">)</span></code></pre><h3 id="embedding"><a href="#embedding" class="headerlink" title="embedding"></a>embedding</h3><p>An embedding is a trainable dense vector that represents a category. Training tends to make embeddings useful representations of the categories (representation learning).</p><pre class=" language-python"><code class="language-python">embedding_dim <span class="token operator">=</span> <span class="token number">2</span>embed_init <span class="token operator">=</span> tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>vocab<span class="token punctuation">)</span> <span class="token operator">+</span> num_oov<span class="token punctuation">]</span><span class="token punctuation">,</span> embedding_dim<span class="token punctuation">)</span>embedding_matrix <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>embed_init<span class="token punctuation">)</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>embedding_lookup<span class="token punctuation">(</span>embedding_matrix<span class="token punctuation">,</span> cat_indices<span class="token punctuation">)</span></code></pre><p>Embedding layer can handle the embedding matrix. When the layer is created, it initializes the embedding matrix randomly, and then when it is called with some category indices, it returns the rows at those indices in the matrix. </p><pre class=" language-python"><code class="language-python">embedding <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>input_dim<span class="token operator">=</span>len<span class="token punctuation">(</span>vocab<span class="token punctuation">)</span> <span class="token operator">+</span> num_oov<span class="token punctuation">,</span> output_dim <span class="token operator">=</span> embedding_dim<span class="token punctuation">)</span>embedding<span class="token punctuation">(</span>Cat_indices<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">regular_inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>categories <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span>cat_indices <span class="token operator">=</span> Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> c<span class="token punctuation">:</span> table<span class="token punctuation">.</span>lookup<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>categories<span class="token punctuation">)</span>cat_embed <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cat_indices<span class="token punctuation">)</span>encoded_inputs <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>reular_inputs<span class="token punctuation">,</span> cat_embed<span class="token punctuation">]</span><span class="token punctuation">)</span>outputs <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>encoded_inputs<span class="token punctuation">)</span>model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>regular_inputs<span class="token punctuation">,</span> categories<span class="token punctuation">]</span><span class="token punctuation">,</span>             outputs<span class="token operator">=</span><span class="token punctuation">[</span>outputs<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>One hot encoding followed by a Dense layer without activation function and biases is equivalent to an Embedding layer. However, the latter uses fewer computations. </p><h3 id="Keras-Prep-Layers"><a href="#Keras-Prep-Layers" class="headerlink" title="Keras Prep Layers"></a>Keras Prep Layers</h3><p>Normalization: standardization</p><p>TextVectorization: encoding. Also have an option to output word-count vectors instead of word indices. </p><p>Discretization: chop continuous data into different bins and encode each bin as a one-hot vector. </p><h1 id="TF-Transform"><a href="#TF-Transform" class="headerlink" title="TF Transform"></a>TF Transform</h1><p>If preprocessing is computationally expensive, we can handle it before training. In this way, the data will be preprocessed just once per instance before training, rather than once per instance and per epoch during training. </p><p>Consider the case where we wanna deploy the model to mobile and web browsers. Use TensorFlow Extended (TFX). </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow_transform <span class="token keyword">as</span> tft<span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    median_age <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token string">"housing_median_age"</span><span class="token punctuation">]</span>    ocean_proximity <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token string">"ocean_proximity"</span><span class="token punctuation">]</span>    standardized_age <span class="token operator">=</span> tft<span class="token punctuation">.</span>scale_to_z_score<span class="token punctuation">(</span>median_age<span class="token punctuation">)</span>    ocean_proximity_id <span class="token operator">=</span> tft<span class="token punctuation">.</span>compute_and_apply_vocabulary<span class="token punctuation">(</span>ocean_proximity<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"standadized_median_age"</span><span class="token punctuation">:</span> standardized_age<span class="token punctuation">,</span>         <span class="token string">"ocean_proximity_id"</span><span class="token punctuation">:</span> ocean_proximity_id    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>We can apply this function to the whole training set using Apache Beam. </p><h1 id="TensorFlow-Datasets-Project"><a href="#TensorFlow-Datasets-Project" class="headerlink" title="TensorFlow Datasets Project"></a>TensorFlow Datasets Project</h1><p>TFDS is not bundled with TF. </p><p>Every item in the dataset is a dictionary containing both the features and labels. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow_datasets <span class="token keyword">as</span> tfdsdataset <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"mnist"</span><span class="token punctuation">)</span>train<span class="token punctuation">,</span> test <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dataset<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span>train <span class="token operator">=</span> train<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>train <span class="token operator">=</span> train<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> item<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train <span class="token operator">=</span> train<span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>We can also ask the load function to do this for us. </p><pre class=" language-python"><code class="language-python">dataset <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"mnist"</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>                     as_supervised<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      </code></pre>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 04 loss</title>
      <link href="/Blog/2020/07/16/hands-on-04-loss/"/>
      <url>/Blog/2020/07/16/hands-on-04-loss/</url>
      
        <content type="html"><![CDATA[<h1 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h1><p>The normal equation. </p><p>$w = (X^TX)^{-1}X^Ty$</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionlin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>intercept_<span class="token punctuation">,</span> lin_reg<span class="token punctuation">.</span>coef_</code></pre><p>The <code>LinearRegression</code> class is based on the <code>scipy.linalg.lstsq()</code> function (the name stands for “least squares”). </p><pre class=" language-python"><code class="language-python">theta_best_svd<span class="token punctuation">,</span> residuals<span class="token punctuation">,</span> rank<span class="token punctuation">,</span> s <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>lstsq<span class="token punctuation">(</span>X_b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> rcond<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span>theta_best_svd</code></pre><p>This function computes $\hat{\theta} = X^+y$, where $X^+$ is the pseudoinverse of X. </p><h3 id="Computational-Complexity"><a href="#Computational-Complexity" class="headerlink" title="Computational Complexity"></a>Computational Complexity</h3><p>The SVD approach used by LinearRegression class is about $O(n^2)$, where n is the number of features. </p><h1 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h1><p>To implement GD, we need to compute the gradient of the cost function with regard to each model parameter $\theta_j$. </p><h3 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h3><p>Picks a random instance in the training set at every step. </p><h3 id="Mini-batch-GD"><a href="#Mini-batch-GD" class="headerlink" title="Mini-batch GD"></a>Mini-batch GD</h3><p>Computes  the gradients on small random sets of instances called mini-batches. </p><h1 id="Polynomial-Regression"><a href="#Polynomial-Regression" class="headerlink" title="Polynomial Regression"></a>Polynomial Regression</h1><p>Add powers of each feature as new features. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeaturespoly_features <span class="token operator">=</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> include_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>X_poly <span class="token operator">=</span> poly_features<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>lin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_poly<span class="token punctuation">,</span> y<span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>intercept_<span class="token punctuation">,</span> lin_reg<span class="token punctuation">.</span>coef_</code></pre><p>When there are multiple features, Polynomial Regression is capable of finding relationships between features. </p><h1 id="Learning-Curves"><a href="#Learning-Curves" class="headerlink" title="Learning Curves"></a>Learning Curves</h1><p>We need to know if our model is overfitting/underfitting. We can plot model’s performance on the training set and val set as a function of the training set size or training iteration. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">def</span> <span class="token function">plot_learning_curves</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    X_train<span class="token punctuation">,</span> X_val<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_val <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    train_errors<span class="token punctuation">,</span> val_errors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> y_train<span class="token punctuation">[</span><span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>        y_train_predict <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>        y_val_predict <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span>                                                          train_errors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_train<span class="token punctuation">[</span><span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> y_train_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>        val_errors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_val<span class="token punctuation">,</span> y_val_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>train_errors<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r-+"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>val_errors<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"b-"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"upper right"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>       plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Training set size"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"RMSE"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>             </code></pre><p>We can use a plain LR model. </p><pre class=" language-python"><code class="language-python">lin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>plot_learning_curves<span class="token punctuation">(</span>lin_reg<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                         plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                                      </code></pre><p>Both curves reached a plateau. They are close and high. Underfit. </p><p>Now we try a 10th-degree polynomial model. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipelinepolynomial_regression <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly_features"</span><span class="token punctuation">,</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> include_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>plot_learning_curves<span class="token punctuation">(</span>polynomial_regression<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    </code></pre><p>The error on the training data is much lower than with the LR model. There is a gap between two curves. Overfit. </p><h1 id="Regularized-Linear-Models"><a href="#Regularized-Linear-Models" class="headerlink" title="Regularized Linear Models"></a>Regularized Linear Models</h1><h3 id="Ridge-Regression"><a href="#Ridge-Regression" class="headerlink" title="Ridge Regression"></a>Ridge Regression</h3><p>The regularization term should only be added to the cost function during training. It is important to scale the data before performing Ridge Reg, as it is sensitive to the scale of the input features. </p><p>We can use a closed-form solution. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Ridgeridge_reg <span class="token operator">=</span> Ridge<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">"cholesky"</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>ridge_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>ridge_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Or, we can use SGD. </p><pre class=" language-python"><code class="language-python">sgd_reg <span class="token operator">=</span> SGDRegressor<span class="token punctuation">(</span>penalty<span class="token operator">=</span><span class="token string">"l2"</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> tol<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>sgd_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sgd_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Lasso-Regression"><a href="#Lasso-Regression" class="headerlink" title="Lasso Regression"></a>Lasso Regression</h3><p>It tends to eliminate the weights of the least important features. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Lassolasso_reg <span class="token operator">=</span> Lasso<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span>lasso_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><h3 id="Elastic-Net"><a href="#Elastic-Net" class="headerlink" title="Elastic Net"></a>Elastic Net</h3><p>A middle ground between Ridge and Lasso Regression. We can control the mix ration r. When r = 0, Elastic Net is equivalent to Ridge Regression. </p><p>In general, Elastic Net is preferred over Lasso because Lasso may behave erratically when the number of features is greater than the number of training instances or when several features are strongly correlated. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> ElasticNete_net <span class="token operator">=</span> ElasticNet<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> l1_ratio<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><h3 id="Early-Stopping"><a href="#Early-Stopping" class="headerlink" title="Early Stopping"></a>Early Stopping</h3><p>Stop training as soon as the val error reaches a minimum. </p><h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><h3 id="Estimate-Prob"><a href="#Estimate-Prob" class="headerlink" title="Estimate Prob"></a>Estimate Prob</h3><p>$\sigma(t) = \frac{1}{1+exp(-t)}$</p><h3 id="Training-and-cost-func"><a href="#Training-and-cost-func" class="headerlink" title="Training and cost func"></a>Training and cost func</h3><p>$cost = -log(\hat{p})<em>y -log(1-\hat{p})</em>(1-y)$</p><p>The reason why we are using log loss instead of MSE here is that it is a convex function. In addition, it will give larger updates when the error is larger. </p><h3 id="Decision-Boundaries"><a href="#Decision-Boundaries" class="headerlink" title="Decision Boundaries"></a>Decision Boundaries</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasetsiris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> iris<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># petal width</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>iris<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1 if Iris virginica, else 0</span>X <span class="token operator">=</span> iris<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># petal length and width</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>iris<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span>log_reg <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>solver<span class="token operator">=</span><span class="token string">"lbfgs"</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">10</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>log_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>x0<span class="token punctuation">,</span> x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>        np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>X_new <span class="token operator">=</span> np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>x0<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x1<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>y_proba <span class="token operator">=</span> log_reg<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_new<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">[</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"bs"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">[</span>y<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span>y<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"g^"</span><span class="token punctuation">)</span>zz <span class="token operator">=</span> y_proba<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x0<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>contour <span class="token operator">=</span> plt<span class="token punctuation">.</span>contour<span class="token punctuation">(</span>x0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> zz<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>brg<span class="token punctuation">)</span>left_right <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>boundary <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>log_reg<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> left_right <span class="token operator">+</span> log_reg<span class="token punctuation">.</span>intercept_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> log_reg<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>clabel<span class="token punctuation">(</span>contour<span class="token punctuation">,</span> inline<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>left_right<span class="token punctuation">,</span> boundary<span class="token punctuation">,</span> <span class="token string">"k--"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token string">"Not Iris virginica"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">6.5</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token string">"Iris virginica"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"g"</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Petal length"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Petal width"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"logistic_regression_contour_plot"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>LR has been added l2 penalty by default. The hyperparam controlling the regularization strength of LR is not alpha, but its inverse: C. The smaller, the regularization strength is stronger. </p><h1 id="Softmax-Regression"><a href="#Softmax-Regression" class="headerlink" title="Softmax Regression"></a>Softmax Regression</h1><p>LR can be generalized to support multiple classes directly -&gt; softmax regression. </p><p>Cross entropy gradient vector for class k</p><p>$\nabla_{\theta^{(k)}} = \sum_{i=1}^m (\hat{p}_k^{(i)} - y_k^{(i)})x^{(i)}$</p><pre class=" language-python"><code class="language-python">X <span class="token operator">=</span> iris<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># petal length, petal width</span>y <span class="token operator">=</span> iris<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span>softmax_reg <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>multi_class<span class="token operator">=</span><span class="token string">"multinomial"</span><span class="token punctuation">,</span>solver<span class="token operator">=</span><span class="token string">"lbfgs"</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>softmax_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 02 e2e ml</title>
      <link href="/Blog/2020/07/16/hands-on-02-e2e-ml/"/>
      <url>/Blog/2020/07/16/hands-on-02-e2e-ml/</url>
      
        <content type="html"><![CDATA[<p>A piece of info fed to a ML system is called a <strong>signal</strong>. We want a high signal-to-noise ratio. </p><p>A sequence of data processing components is called a data <strong>pipeline</strong>. </p><h1 id="Get-the-data"><a href="#Get-the-data" class="headerlink" title="Get the data"></a>Get the data</h1><h3 id="Create-a-Test-set"><a href="#Create-a-Test-set" class="headerlink" title="Create a Test set"></a>Create a Test set</h3><p>Sometimes, we want to reduce a sampling bias produced by random sampling methods. We should try stratified sampling: the pplt is divided into homogeneous subgroups called strata, and the right number of instances are sampled from each stratum to guarantee that the test set is representative of the overall pplt. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> StratifiedShuffleSplithousing<span class="token punctuation">[</span><span class="token string">"income_cat"</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>housing<span class="token punctuation">[</span><span class="token string">"median_income"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>inf<span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>split <span class="token operator">=</span> StratifiedShuffleSplit<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token keyword">for</span> train_index<span class="token punctuation">,</span> test_index <span class="token keyword">in</span> split<span class="token punctuation">.</span>split<span class="token punctuation">(</span>housing<span class="token punctuation">,</span> housing<span class="token punctuation">[</span><span class="token string">"income_cat"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    strat_train_set <span class="token operator">=</span> housing<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>    strat_test_set <span class="token operator">=</span> housing<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Now remove the attribute so data is back to original state</span><span class="token keyword">for</span> set_ <span class="token keyword">in</span> <span class="token punctuation">(</span>strat_train_set<span class="token punctuation">,</span> strat_test_set<span class="token punctuation">)</span><span class="token punctuation">:</span>    set_<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"income_cat"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h1 id="Discover-and-Visualize-to-Gain-Insights"><a href="#Discover-and-Visualize-to-Gain-Insights" class="headerlink" title="Discover and Visualize to Gain Insights"></a>Discover and Visualize to Gain Insights</h1><h3 id="Visualize-Geographical-Data"><a href="#Visualize-Geographical-Data" class="headerlink" title="Visualize Geographical Data"></a>Visualize Geographical Data</h3><pre class=" language-python"><code class="language-python">housing<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>    kind<span class="token operator">=</span><span class="token string">"scatter"</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">"longitude"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"latitude"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span>    s<span class="token operator">=</span>housing<span class="token punctuation">[</span><span class="token string">"population"</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"population"</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c<span class="token operator">=</span><span class="token string">"median_house_value"</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">"jet"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colorbar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    sharex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>save_fig<span class="token punctuation">(</span><span class="token string">"housing_prices_scatterplot"</span><span class="token punctuation">)</span></code></pre><h3 id="Looking-for-Correlations"><a href="#Looking-for-Correlations" class="headerlink" title="Looking for Correlations"></a>Looking for Correlations</h3><p>If the dataset is not large, we can compute the standard correlation coefficient between every pair of attributes. The standard correlation only measures linear correlations. </p><pre class=" language-python"><code class="language-python">corr_mat <span class="token operator">=</span> housing<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span>corr_mat<span class="token punctuation">[</span><span class="token string">"house_value"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>Another way to check for correlation between attributes is to use pandas. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pd<span class="token punctuation">.</span>plotting <span class="token keyword">import</span> scatter_matrixattr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"house_value"</span><span class="token punctuation">,</span> <span class="token string">"income"</span><span class="token punctuation">,</span> <span class="token string">"total_room"</span><span class="token punctuation">]</span>scatter_matrix<span class="token punctuation">(</span>housing<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>We should choose the most promising attribute to take a closer look. </p><pre class=" language-python"><code class="language-python">housing<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">"scatter"</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">"income"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"house_value"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span></code></pre><p>If we find a few data quirks, we may want to clean them up. </p><h3 id="Attribute-Combinations"><a href="#Attribute-Combinations" class="headerlink" title="Attribute Combinations"></a>Attribute Combinations</h3><p>Similar to feature enginneering. </p><h1 id="Prepare-the-Data-for-ML"><a href="#Prepare-the-Data-for-ML" class="headerlink" title="Prepare the Data for ML"></a>Prepare the Data for ML</h1><h3 id="Data-Cleaning"><a href="#Data-Cleaning" class="headerlink" title="Data Cleaning"></a>Data Cleaning</h3><pre class=" language-python"><code class="language-python">housing<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"total_bedrooms"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>median <span class="token operator">=</span> housing<span class="token punctuation">[</span><span class="token string">"total_bedrooms"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>housing<span class="token punctuation">.</span>total_bedrooms<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>media<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>Scikit-learn provides a handy class to take care of missing values. The median can only be computed on numerical attributes, so we need to create a copy of the data w/o the text attr. SimpleImputer simply computed the median of each attribute and stored the result in its <strong>statistics_</strong> variable. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>impute <span class="token keyword">import</span> SimpleImputerimputer <span class="token operator">=</span> SimpleImputer<span class="token punctuation">(</span>strategy<span class="token operator">=</span><span class="token string">"median"</span><span class="token punctuation">)</span>housing_num <span class="token operator">=</span> housing<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"proximity"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>imputer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_num<span class="token punctuation">)</span>imputer<span class="token punctuation">.</span>statistics_<span class="token comment" spellcheck="true"># transform the training set by replacing missing val</span>X <span class="token operator">=</span> imputer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>housing_num<span class="token punctuation">)</span>housing_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>X<span class="token punctuation">,</span> columns<span class="token operator">=</span>housing_num<span class="token punctuation">.</span>columns<span class="token punctuation">,</span> index<span class="token operator">=</span>housing_num<span class="token punctuation">.</span>index<span class="token punctuation">)</span></code></pre><h3 id="Handling-Text-and-Categorical-Attributes"><a href="#Handling-Text-and-Categorical-Attributes" class="headerlink" title="Handling Text and Categorical Attributes"></a>Handling Text and Categorical Attributes</h3><p>First look at categorical attr. </p><pre class=" language-python"><code class="language-python">housing_cat <span class="token operator">=</span> housing<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"proximity"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>housing_cat<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>If we find that there are a limited number of possible values, convert from text to number. One solution is OrdinalEncoder. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> OrdinalEncoderordinal_enc <span class="token operator">=</span> OrdinalEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>housing_cat_encoded <span class="token operator">=</span> ordinal_enc<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>housing_cat<span class="token punctuation">)</span>ordinal_enc<span class="token punctuation">.</span>categories_</code></pre><p>One issue with this representation is that ML will assume that two nearby values are more similar than two distant values. This may be fine in some cases (e.g.: for ordered categories such as bad-average-good-excellent). </p><p>One solution is One Hot encoder. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> OneHotEncodercat_encoder <span class="token operator">=</span> OneHotEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>housing_cat_1hot <span class="token operator">=</span> cat_encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>housing_cat<span class="token punctuation">)</span>housing_cat <span class="token operator">=</span> housing_cat_1hot<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span>housing_cat_1hot<span class="token punctuation">.</span>categories_</code></pre><p>If we have a huge number of possible categories, then one-hot encoding will create too many input features. We can replace the categorical input with useful numerical features. We can replace each category with embedding. </p><h3 id="Custom-Transformer"><a href="#Custom-Transformer" class="headerlink" title="Custom Transformer"></a>Custom Transformer</h3><p>We can create a class and implement fit(), transform(), and fit_transform().</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseEstimator<span class="token punctuation">,</span> TansformerMixinrooms_idx<span class="token punctuation">,</span> bedroom_idx<span class="token punctuation">,</span> pplt_idx<span class="token punctuation">,</span> household_idx <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token keyword">class</span> <span class="token class-name">CombinedAttrAdder</span><span class="token punctuation">(</span>BaseEstimator<span class="token punctuation">,</span> TansformerMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> add_bedroom_per_room<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>add_bedroom_per_room <span class="token operator">=</span> add_bedroom_per_room    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>        rooms_per_household <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> rooms_idx<span class="token punctuation">]</span><span class="token operator">/</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> household_idx<span class="token punctuation">]</span>        pplt_per_household <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> pplt_idx<span class="token punctuation">]</span><span class="token operator">/</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> household_idx<span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>add_bedroom_per_room<span class="token punctuation">:</span>            bedroom_per_room <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> bedroom_idx<span class="token punctuation">]</span><span class="token operator">/</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> rooms_idx<span class="token punctuation">]</span>            <span class="token keyword">return</span> np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>X<span class="token punctuation">,</span> rooms_per_household<span class="token punctuation">,</span> pplt_per_household<span class="token punctuation">,</span> bedroom_per_room<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>X<span class="token punctuation">,</span> rooms_per_household<span class="token punctuation">,</span> pplt_per_household<span class="token punctuation">]</span>attr_adder <span class="token operator">=</span> CombinedAttrAdder<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>housing_extra_attr <span class="token operator">=</span> attr_adder<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>housing<span class="token punctuation">.</span>values<span class="token punctuation">)</span></code></pre><h3 id="Feature-Scaling"><a href="#Feature-Scaling" class="headerlink" title="Feature Scaling"></a>Feature Scaling</h3><h4 id="Min-max-scaling-normalization"><a href="#Min-max-scaling-normalization" class="headerlink" title="Min-max scaling (normalization)"></a>Min-max scaling (normalization)</h4><p>values are shifted and rescaled so that they end up ranging from 0 to 1. Use MinMaxScaler. </p><p>NN often expect an input value ranging from 0 to 1. </p><h4 id="Standardization"><a href="#Standardization" class="headerlink" title="Standardization"></a>Standardization</h4><p>subtracts the mean value and then divides by the std. Standardization is less affected by outliers. Use StandardScaler. </p><h3 id="Transformation-Pipelines"><a href="#Transformation-Pipelines" class="headerlink" title="Transformation Pipelines"></a>Transformation Pipelines</h3><p>Data transformation steps executed in the right order. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipelinenum_pipeline <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">'imputer'</span><span class="token punctuation">,</span> SimpleImputer<span class="token punctuation">(</span>strategy<span class="token operator">=</span><span class="token string">"median"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"attribs_adder"</span><span class="token punctuation">,</span> combinedAttrAdder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token string">"std_scaer"</span><span class="token punctuation">,</span> StandadScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>housing_df <span class="token operator">=</span> num_pipeline<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>housing<span class="token punctuation">)</span></code></pre><p>All but the last estimator must be transformers (they must have a fit_transform() method). </p><p>It would be convenient to have a single transformer to handle all columns (both categorical and numerical). Use ColumnTransformer. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>compose <span class="token keyword">import</span> ColumnTransformernum_attr <span class="token operator">=</span> list<span class="token punctuation">(</span>housing_num<span class="token punctuation">)</span>cat_attr <span class="token operator">=</span> list<span class="token punctuation">(</span>housing_cat<span class="token punctuation">)</span>full_pipeline <span class="token operator">=</span> ColumnTransformer<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> num_pipeline<span class="token punctuation">,</span> num_attr<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> OneHotEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cat_attribs<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>housing_prepared <span class="token operator">=</span> full_pipeline<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>housing<span class="token punctuation">)</span></code></pre><h1 id="Select-and-Train-a-model"><a href="#Select-and-Train-a-model" class="headerlink" title="Select and Train a model"></a>Select and Train a model</h1><h3 id="Training-Set"><a href="#Training-Set" class="headerlink" title="Training Set"></a>Training Set</h3><pre class=" language-python"><code class="language-python">lin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">,</span> housing_labels<span class="token punctuation">)</span>housing_pred <span class="token operator">=</span> lin_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">)</span>lin_rmse <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>housing_labels<span class="token punctuation">,</span> housing_predictions<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross-Validation"></a>Cross-Validation</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_scorescores <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>tree_reg<span class="token punctuation">,</span> housing_prepared<span class="token punctuation">,</span> housing_labels<span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">"neg_mean_squared_error"</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>tree_rmse_score <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token operator">-</span>scores<span class="token punctuation">)</span></code></pre><p>We should save every model so that we can come back later to find them. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> joblibjoblib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>my_model<span class="token punctuation">,</span> <span class="token string">"model.pkl"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># later</span>my_model <span class="token operator">=</span> joblib<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"model.pkl"</span><span class="token punctuation">)</span></code></pre><h3 id="Fine-Tune"><a href="#Fine-Tune" class="headerlink" title="Fine Tune"></a>Fine Tune</h3><h4 id="Grid-Search"><a href="#Grid-Search" class="headerlink" title="Grid Search"></a>Grid Search</h4><p>We can try out consecutive powers of 10. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCVparam_grid <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'n_estimators':[3, 10, 30], 'max_features':[2,4,6,8]&amp;#125;,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'bootstrap':[False], 'n_estimatrors':[3,10], 'max_features':[2,3,4]&amp;#125;</span><span class="token punctuation">]</span>forest_reg <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>forest_reg<span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">'neg_mean_squared_error'</span><span class="token punctuation">,</span> return_train_score<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>housing_prepared<span class="token punctuation">,</span> housing_labels<span class="token punctuation">)</span></code></pre><p>This tells the alg to first evaluate all 3*4 combo. Then, with the <strong>bootstrap</strong> = False, try out another 2*3 combo. </p><pre class=" language-python"><code class="language-python">grid_search<span class="token punctuation">.</span>best_estimator_cvres <span class="token operator">=</span> grid_search<span class="token punctuation">.</span>cv_results_<span class="token keyword">for</span> score<span class="token punctuation">,</span> params <span class="token keyword">in</span> zip<span class="token punctuation">(</span>cvres<span class="token punctuation">[</span><span class="token string">"mean_test_score"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cvres<span class="token punctuation">[</span><span class="token string">"params"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token operator">-</span>mean_score<span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span></code></pre><h4 id="Randomized-Search"><a href="#Randomized-Search" class="headerlink" title="Randomized Search"></a>Randomized Search</h4><p>When hyperparam search space is large, use Randomized search instead. </p><h4 id="Ensemble"><a href="#Ensemble" class="headerlink" title="Ensemble"></a>Ensemble</h4><p>Try to combine the models that perform best. </p><h3 id="Analyze-the-Best-Models"><a href="#Analyze-the-Best-Models" class="headerlink" title="Analyze the Best Models"></a>Analyze the Best Models</h3><pre class=" language-python"><code class="language-python">feature_importances <span class="token operator">=</span> grid_search<span class="token punctuation">.</span>best_estimator_<span class="token punctuation">.</span>feature_importances_feature_importancesextra_attr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"rooms_per_hold"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>cat_encoder <span class="token operator">=</span> full_pipeline<span class="token punctuation">.</span>named_transformers_<span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">]</span>cat_one_hot_attr <span class="token operator">=</span> list<span class="token punctuation">(</span>cat_enc<span class="token punctuation">.</span>categories_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>attributes <span class="token operator">=</span> num_attr <span class="token operator">+</span> extra_attr <span class="token operator">+</span> cat_one_hot_attrsorted<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>feature_importances<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h3 id="Evaluate-on-Test-Set"><a href="#Evaluate-on-Test-Set" class="headerlink" title="Evaluate on Test Set"></a>Evaluate on Test Set</h3><pre class=" language-python"><code class="language-python">final_model <span class="token operator">=</span> grid_search<span class="token punctuation">.</span>best_estimator_xtest_prepared <span class="token operator">=</span> full_pipeline<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span>final_pred <span class="token operator">=</span> final_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xtest_prepared<span class="token punctuation">)</span>final_mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>ytest<span class="token punctuation">,</span> final_pred<span class="token punctuation">)</span></code></pre><p>We can also compute a 95% CI for the generalization error using <code>scipy.stats.t.interval()</code>. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scipy <span class="token keyword">import</span> statsconfidence <span class="token operator">=</span> <span class="token number">0.95</span>sqr_err <span class="token operator">=</span> <span class="token punctuation">(</span>final_pred <span class="token operator">-</span> ytest<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>t<span class="token punctuation">.</span>interval<span class="token punctuation">(</span>confidence<span class="token punctuation">,</span> len<span class="token punctuation">(</span>sqr_err<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> loc<span class="token operator">=</span>sqr_err<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token operator">=</span>scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>sem<span class="token punctuation">(</span>sqr_err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 17 autoencoder</title>
      <link href="/Blog/2020/07/14/hands-on-17-autoencoder/"/>
      <url>/Blog/2020/07/14/hands-on-17-autoencoder/</url>
      
        <content type="html"><![CDATA[<h1 id="Performing-PCA-with-an-Undercomplete-Linear-Autoencoder"><a href="#Performing-PCA-with-an-Undercomplete-Linear-Autoencoder" class="headerlink" title="Performing PCA with an Undercomplete Linear Autoencoder"></a>Performing PCA with an Undercomplete Linear Autoencoder</h1><p>The following code builds a simple linear autoencoder to perform PCA on a 3D dataset projecting it to 2D. </p><pre class=" language-python"><code class="language-python">encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>Dense<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>Dense<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>autoencoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">]</span><span class="token punctuation">)</span>autoencoder<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"mse"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>The autoencoder’s number of outputs is equal to the inputs. To perform simple PCA, we do not use any activation function. </p><pre class=" language-python"><code class="language-python">hist <span class="token operator">=</span> autoencder<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> xtrain<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>codings <span class="token operator">=</span> encoder<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span></code></pre><h1 id="Stacked-Autoencoders"><a href="#Stacked-Autoencoders" class="headerlink" title="Stacked Autoencoders"></a>Stacked Autoencoders</h1><p>Stacked/deep autoencoders: have multiple hidden layers</p><p>The following one is built for MNIST. </p><pre class=" language-python"><code class="language-python">encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ae <span class="token operator">=</span> Sequantial<span class="token punctuation">(</span><span class="token punctuation">[</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">]</span><span class="token punctuation">)</span>ae<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"binary_crossentropy"</span><span class="token punctuation">,</span>           optimizer<span class="token operator">=</span>SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> ae<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> xtrain<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>              validation_data<span class="token operator">=</span><span class="token punctuation">[</span>xvalid<span class="token punctuation">,</span> xvalid<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>When compiling the stacked autoencoder, we use binary cross-entropy loss rather than MSE. We are treating the reconstruction task as a multilabel binary classification problem. This makes the model converges faster. </p><h3 id="Visualize-the-Reconstructions"><a href="#Visualize-the-Reconstructions" class="headerlink" title="Visualize the Reconstructions"></a>Visualize the Reconstructions</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_image</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"binary"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_reconstructions</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> n_images<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    reconstr <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xval<span class="token punctuation">[</span><span class="token punctuation">:</span>n_images<span class="token punctuation">]</span><span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span>n_images<span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> image_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_images<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n_images<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span>image_idx<span class="token punctuation">)</span>        plot_image<span class="token punctuation">(</span>xval<span class="token punctuation">[</span>image_idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n_images<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span>n_images<span class="token operator">+</span>image_idx<span class="token punctuation">)</span>        plot_image<span class="token punctuation">(</span>reconstr<span class="token punctuation">[</span>image_idx<span class="token punctuation">]</span><span class="token punctuation">)</span>show_reconstructions<span class="token punctuation">(</span>ae<span class="token punctuation">)</span></code></pre><p>For visualization, autoencoder does not give great results, but it can handle large datasets. So one strategy is to use an autoencoder to reduce the dimensionality down to a reasonable level, then use another dimensionality reduction algorithm for visualization. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>manifold <span class="token keyword">import</span> TSNExval_compressed <span class="token operator">=</span> encoder<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xval<span class="token punctuation">)</span>tsne <span class="token operator">=</span> TSNE<span class="token punctuation">(</span><span class="token punctuation">)</span>xval_2d <span class="token operator">=</span> tsne<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>xval_compressed<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>xval_2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> xval_2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>yval<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>            cmap<span class="token operator">=</span><span class="token string">"tab10"</span><span class="token punctuation">)</span></code></pre><h3 id="Unsupervised-Pretraining-using-AE"><a href="#Unsupervised-Pretraining-using-AE" class="headerlink" title="Unsupervised Pretraining using AE"></a>Unsupervised Pretraining using AE</h3><img src="1701.PNG" alt="pretrain"><p>Having plenty of unlabeled data and a little labeled data. Use autoencoder to pretrain and copy the weights to new model which can be used to train labeled data. </p><h3 id="Tying-Weights"><a href="#Tying-Weights" class="headerlink" title="Tying Weights"></a>Tying Weights</h3><p>When an autoencoder is symmetrical, a common tech is to tie the weights of the decoder layers to the weights of the encoder. This halves the number of weights in the model, speeding up training and limiting the risk of overfitting. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DenseTranspose</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dense<span class="token punctuation">,</span> activation<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>dense <span class="token operator">=</span> dense        self<span class="token punctuation">.</span>activation <span class="token operator">=</span> keras<span class="token punctuation">.</span>activations<span class="token punctuation">.</span>get<span class="token punctuation">(</span>activation<span class="token punctuation">)</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_input_shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>biases <span class="token operator">=</span> self<span class="token punctuation">.</span>add_weight<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"bias"</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span><span class="token string">"zeros"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>dense<span class="token punctuation">.</span>input_shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>build<span class="token punctuation">(</span>batch_input_shape<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dense<span class="token punctuation">.</span>weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> transpose_b<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>z <span class="token operator">+</span> self<span class="token punctuation">.</span>biases<span class="token punctuation">)</span></code></pre><p>Next, we can build a new stacked AE. </p><pre class=" language-python"><code class="language-python">dense_1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span>dense_2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span>tied_encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dense_1<span class="token punctuation">,</span>     dense_2<span class="token punctuation">]</span><span class="token punctuation">)</span>tied_decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    DenseTranspose<span class="token punctuation">(</span>dense_2<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    DenseTranspose<span class="token punctuation">(</span>dense_1<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tied_ae <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>tied_encoder<span class="token punctuation">,</span> tied_decoder<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Training-One-AE-at-a-time"><a href="#Training-One-AE-at-a-time" class="headerlink" title="Training One AE at a time"></a>Training One AE at a time</h3><p>Rather than training the whole stacked autoencoder in one go, we can train one shallow autoencoder at a time and then stack all of them. </p><p>During the first phase of training, the first AE learns to reconstruct the inputs. We encode the whole training set using this AE to get a new compressed training set. During, second phase, we then train a second autoencoder on this new set. Finally, we build a big sandwich using all these AE. </p><h3 id="Convolutional-AE"><a href="#Convolutional-AE" class="headerlink" title="Convolutional AE"></a>Convolutional AE</h3><p>The encoder is a regular CNN composed of convolutional layers and pooling layers. It typically reduces the spatial dimensionality of the inputs while increasing the depth. The decoder must do the reverse. </p><p>Below is a example for Fashion MNIST. </p><pre class=" language-python"><code class="language-python">conv_encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2D<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> actvation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>conv_decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Conv2DTranspose<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"valid"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2DTranspose<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2DTranspose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>conv_ae <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>conv_encoder<span class="token punctuation">,</span> conv_decoder<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Recurrent-AE"><a href="#Recurrent-AE" class="headerlink" title="Recurrent AE"></a>Recurrent AE</h3><p>Build an autoencoder for sequences. The encoder is a sequence-to-vector RNN which compresses the input sequence down to a single vector. The decoder is a vector-to-sequence RNN that does the reverse. </p><pre class=" language-python"><code class="language-python">recurrent_encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    LSTM<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     LSTM<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>recurrent_decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    RepeatVector<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LSTM<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    TimeDistributed<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>recurrent_ae <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>recurrent_encoder<span class="token punctuation">,</span> recurrent_decoder<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>The recurrent autoencoder can process sequences of any length. We use a RepeatVector layer as the first layer of the decoder, to ensure that its input vector gets fed to the decoder at each time step. </p><h3 id="Denoising-AE"><a href="#Denoising-AE" class="headerlink" title="Denoising AE"></a>Denoising AE</h3><p>Another way to force the AE to learn useful features is to add noise to its inputs, training it to recover the original, noise-free inputs. The implementation is a regular stacked AE with an additional Dropout layer applied to the encoder’s inputs. </p><pre class=" language-python"><code class="language-python">dropout_encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dropout_decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dropout_ae <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>dropout_encoder<span class="token punctuation">,</span> dropout_decoder<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Sparse-AE"><a href="#Sparse-AE" class="headerlink" title="Sparse AE"></a>Sparse AE</h3><p>Sparsity often leads to good feature extraction. We can force the AE to represent each input as a combination of a small number of activations. As a result, each neuron in the coding layer typically ends up representing a useful feature. </p><pre class=" language-python"><code class="language-python">sparse_encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    ActivityRegularization<span class="token punctuation">(</span>l1<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sparse_decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sparse_ae <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>sparse_encoder<span class="token punctuation">,</span> sparse_decoder<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>The ActivityRegularization layer just return its inputs, but adds a training loss equal to the sum of absolute values of its input (only has an effect during training). Equivalently, we can remove this layer and set <strong>activity_regularizer=keras.regularizers.l1(1e-3)</strong> in the previous layer. </p><p>Another approach is to measure the actual sparsity of the coding layer at each training iteration, and penalize the model when the measured sparsity differs from a target sparsity. We can simply adding the squared error to the cost function, but it is better to use Kullback-Leibler divergence. We want to measure the divergence between the target probability p that a neuron in the coding layer will activate and the actual probability q (i.e., the mean activation over the training batch).</p><p>$D_{KL}(p||q) = p*log\frac{p}{q} + (1-p)*log\frac{1-p}{1-q}$</p><p>Once we have computed the sparsity loss for each neuron in the coding layer, we sum up these losses and add the result to the cost function. </p><pre class=" language-python"><code class="language-python">K <span class="token operator">=</span> keras<span class="token punctuation">.</span>backendkl_diver <span class="token operator">=</span> keras<span class="token punctuation">.</span>losses<span class="token punctuation">.</span>kullback_leibler_divergence<span class="token keyword">class</span> <span class="token class-name">KLDiverRegularizer</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>regularizers<span class="token punctuation">.</span>Regularizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> target<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight        self<span class="token punctuation">.</span>target <span class="token operator">=</span> target    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        mean_activities <span class="token operator">=</span> K<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>weight<span class="token operator">*</span><span class="token punctuation">(</span>kl_diver<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target<span class="token punctuation">,</span> mean_activities<span class="token punctuation">)</span><span class="token operator">+</span>kl_diver<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">-</span>selftarget<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">-</span>mean_activities<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Now we can build the sparse autoencoder. </p><pre class=" language-python"><code class="language-python">kld_reg <span class="token operator">=</span> KLDiverRegularizer<span class="token punctuation">(</span>weight<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> target<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>sparse_kl_encoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">,</span>          activity_regularizer<span class="token operator">=</span>kld_reg<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sparse_kl_decoder <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sparse_kl_ae <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>sparse_kl_encoder<span class="token punctuation">,</span> sparse_kl_decoder<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Variational-Autoencoders"><a href="#Variational-Autoencoders" class="headerlink" title="Variational Autoencoders"></a>Variational Autoencoders</h3><p>Difference:</p><ol><li>probabilistic autoencoders (outputs are partly determined by chance, even after training)</li><li>generative autoencoders (generate new instances that look like they were sampled from the training set)</li></ol><p>Instead of directly producing a coding for a given input, the encoder produces a mean coding and a std. The actual coding is then sampled randomly from a Gaussian distribution. </p><p>Cost function:</p><ol><li>reconstruction loss (push the AE to reproduce its inputs)</li><li>latent loss (push the AE to have codings that look as though they were sampled from a simple Gaussian distribution)</li></ol><p>Latent Loss: $L = -0.5\sum_{i=1}^K 1 + log(\sigma_i^2) - \sigma_i^2 - \mu_i^2$. </p><p>A common trick is to make the encoder output $\gamma = log(\sigma_i^2)$ instead of $\sigma$. It is more numerically stable and speeds up training. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Sampling</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        mean<span class="token punctuation">,</span> log_var <span class="token operator">=</span> inputs        <span class="token keyword">return</span> K<span class="token punctuation">.</span>random_normal<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>log_var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>K<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>log_var<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>mean</code></pre><p>When we create the encoder, we need Functional API, since the model is not entirely sequential. </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoder</span>coding_size <span class="token operator">=</span> <span class="token number">10</span>inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span>z <span class="token operator">=</span> Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>z <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>z <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>codings_mean <span class="token operator">=</span> Dense<span class="token punctuation">(</span>codings_size<span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>codings_log_var <span class="token operator">=</span> Dense<span class="token punctuation">(</span>codings_size<span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>codings <span class="token operator">=</span> Sampling<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>codings_mean<span class="token punctuation">,</span> codings_log_var<span class="token punctuation">]</span><span class="token punctuation">)</span>variational_encoder <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>inputs<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>codings_mean<span class="token punctuation">,</span> codings_log_var<span class="token punctuation">,</span> codings<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># decoder</span>decoder_inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>coding_size<span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>decoder_inputs<span class="token punctuation">)</span>x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>outputs <span class="token operator">=</span> Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>variational_decoder <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>decoder_inputs<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>outputs<span class="token punctuation">]</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> codings <span class="token operator">=</span> variational_encoder<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>reconstructions <span class="token operator">=</span> variational_decoder<span class="token punctuation">(</span>codings<span class="token punctuation">)</span>variational_ae <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>inputs<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>reconstructions<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Lastly, we must add the latent loss and the reconstruction loss. </p><pre class=" language-python"><code class="language-python">latent_loss <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token operator">*</span>K<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>codings_log_var<span class="token operator">-</span>K<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>codings_log_var<span class="token punctuation">)</span><span class="token operator">-</span>K<span class="token punctuation">.</span>square<span class="token punctuation">(</span>codings_mean<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>variational_ae<span class="token punctuation">.</span>add_loss<span class="token punctuation">(</span>K<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>latent_loss<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">784</span><span class="token punctuation">.</span><span class="token punctuation">)</span>variational_ae<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"binary_crossentropy"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"rmsprop"</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> variational_ae<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> xtrain<span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">[</span>xval<span class="token punctuation">,</span> xval<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>We can generate images that look like fashion items by sampling random codings from a Gaussian distribution and decode them. </p><pre class=" language-python"><code class="language-python">codings <span class="token operator">=</span> tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> codings_size<span class="token punctuation">]</span><span class="token punctuation">)</span>images <span class="token operator">=</span> variational_decoder<span class="token punctuation">(</span>codings<span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Variational AE make it possible to perform semantic interpolation. </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># organized in a 3*4 grid and then resize to 5*7</span>codings_grid <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>codings<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>codings_size<span class="token punctuation">]</span><span class="token punctuation">)</span>larger_grid <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>codings_grid<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>interpolated_codings <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>larger_grid<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> codings_size<span class="token punctuation">]</span><span class="token punctuation">)</span>images <span class="token operator">=</span> variational_decoder<span class="token punctuation">(</span>interpolated_codings<span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="Generative-Adversarial-Networks"><a href="#Generative-Adversarial-Networks" class="headerlink" title="Generative Adversarial Networks"></a>Generative Adversarial Networks</h1><p>Make NN compete against each other in the hope that this will push them to excel. </p><p>Generator: takes a random distribution as input and outputs some data (typically an image). It tries to produce images that look real enough to trick the discriminator. </p><p>Discriminator: takes either a fake image from the generator or a real image from the training set as input, and must guess whether the input image is fake or real. </p><p>Training iteration:</p><ol><li>train the discriminator. A batch of real images is sampled from the training set and is completed with an equal number of fake images produced by the generator. The loss is binary cross-entropy. BP only optimizes the weights of the discriminator during this phase.</li><li>train the generator. The generator produce another batch of fake images, and set all labels to 1, which means we want the generator to produce images that the discriminator will wrongly believe to be real. BP only optimizes the weights of the generator during this phase. </li></ol><p>The generator never actually sees any real images, and it only gets the gradients flowing back through the discriminator. However, the better the discriminator gets, the more info about the real images is contained in these secondhand gradients. </p><pre class=" language-python"><code class="language-python">coding_size <span class="token operator">=</span> <span class="token number">30</span>generator <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>coding_size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>discriminator <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>gan <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>generator<span class="token punctuation">,</span> discriminator<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>We do not need to compile generator. Besides, the discriminator should not be trained during the second phase. </p><pre class=" language-python"><code class="language-python">discriminator<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"binary_crossentropy"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"rmsprop"</span><span class="token punctuation">)</span>discriminator<span class="token punctuation">.</span>trainable <span class="token operator">=</span> <span class="token boolean">False</span>gan<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"binary_crossentropy"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"rmsprop"</span><span class="token punctuation">)</span></code></pre><p>We need to write a custom training loop. </p><pre class=" language-python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">32</span>data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span><span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> drop_remainder<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train_gan</span><span class="token punctuation">(</span>gan<span class="token punctuation">,</span> data<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> coding_size<span class="token punctuation">,</span> n_epochs<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    generator<span class="token punctuation">,</span> discriminator <span class="token operator">=</span> gan<span class="token punctuation">.</span>layers    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> X <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># phase 1</span>            noise <span class="token operator">=</span> tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>batch_size<span class="token punctuation">,</span> coding_size<span class="token punctuation">]</span><span class="token punctuation">)</span>            generated <span class="token operator">=</span> generator<span class="token punctuation">(</span>noise<span class="token punctuation">)</span>            X_all <span class="token operator">=</span> tf<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>generated<span class="token punctuation">,</span> X<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            y1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>batch_size <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>batch_size<span class="token punctuation">)</span>            discriminator<span class="token punctuation">.</span>trainable <span class="token operator">=</span> <span class="token boolean">True</span>            discriminator<span class="token punctuation">.</span>train_on_batch<span class="token punctuation">(</span>X_all<span class="token punctuation">,</span> y1<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># phase 2</span>            noise <span class="token operator">=</span> tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span>batch_size<span class="token punctuation">,</span> coding_size<span class="token punctuation">]</span><span class="token punctuation">)</span>            y2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>batch_size<span class="token punctuation">)</span>            discriminator<span class="token punctuation">.</span>trainable <span class="token operator">=</span> <span class="token boolean">False</span>            gan<span class="token punctuation">.</span>train_on_batch<span class="token punctuation">(</span>noise<span class="token punctuation">,</span> y2<span class="token punctuation">)</span>train_gan<span class="token punctuation">(</span>gan<span class="token punctuation">,</span> data<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> coding_size<span class="token punctuation">)</span></code></pre><h3 id="Difficulties-of-Training-GANs"><a href="#Difficulties-of-Training-GANs" class="headerlink" title="Difficulties of Training GANs"></a>Difficulties of Training GANs</h3><p>GAN can only reach a single Nash equilibrium: the generator produces perfectly realistic images, and the discriminator is forced to guess. But nothing guarantees this equilibrium will be reached. </p><p>Sometimes, a GAN can forget what it learnt. The biggest difficulty is called mode collapse: when the generator’s outputs gradually become less diverse. The GAN may gradually cycle across a few classes, never really becoming very good at any of them. </p><p>Moreover, the parameters of gen and dis may end up becoming unstable. GAN is very sensitive to the hyperparams. </p><p>One solution is experience replay: storing the images produced by the generator at each iteration in a buffer, and training the discriminator using real images plus fake images drawn from this buffer rather than just fake images produced by the current generator. </p><p>Another solution is mini-batch discrimination: it measures how similar images are across the batch and provides this stat to the discriminator, so it can easily reject a whole batch of fake images that lack diversity. </p><h3 id="Deep-Conv-GANs"><a href="#Deep-Conv-GANs" class="headerlink" title="Deep Conv GANs"></a>Deep Conv GANs</h3><p>Principles:</p><ol><li>replace any pooling layers with strided convolutions in the discriminator and transposed convolutions in the generator</li><li>use batch normalization, except in generator’s output layer and the discriminator’s input layer</li><li>remove fully connected hidden layers for deeper architectures</li><li>use ReLU activation in the generator for all layers except the output layer, which should use tanh</li><li>use leaky ReLU activation in the discriminator for all layers</li></ol><pre class=" language-python"><code class="language-python">coding_size <span class="token operator">=</span> <span class="token number">100</span>generator <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">128</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>codings_size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2DTranspose<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activaton<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2DTranspose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"tanh"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>discriminator <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dropout<span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dropout<span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>gan <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>generator<span class="token punctuation">,</span> discriminator<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Before using this GAN, we need to rescale the training set, because the output for tanh is from -1 to 1. </p><pre class=" language-python"><code class="language-python">xtrain <span class="token operator">=</span> xtrain<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span></code></pre><h3 id="Progressive-Growing-of-GANs"><a href="#Progressive-Growing-of-GANs" class="headerlink" title="Progressive Growing of GANs"></a>Progressive Growing of GANs</h3><p>Generate small images at the beginning of training, then gradually adding conv layers to both the generator and the discriminator to produce larger images. </p><p>There are more techniques aiming at increasing the diversity of the outputs and making training more stable. </p><ol><li><p>minibatch standard deviation layer</p><p>added near the end of the discriminator. For each position in the inputs, it computes the std across all channels and instances in the batch.  These std are averaged across all points to get a single value. Finally, an extra feature map is added to each instance in the batch and filled with the computed value. If the generator produces images with little variety, then there will be a small standard deviation across feature maps in the discriminator. The dis will have easy access to this stat, making it less likely to be fooled by a generator that produces too little diveristy. </p><pre class=" language-python"><code class="language-python">S <span class="token operator">=</span> tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>reduce_std<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>S<span class="token punctuation">)</span>tf<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>inputs<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token punctuation">[</span>batch_size<span class="token punctuation">,</span> height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li><li><p>equalized learning rate</p><p>Init all weights using a simple Gaussian distribution. However, the weights are scaled down at runtime by the same factor as in He init. This technique significantly improved the GAN’s performance when using RMSProp, Adam, or other adaptive gradient optimizers. Params that have a larger dynamic range will take longer to train. By rescaling the weights, it ensures that the dynamic range is the same for all params.</p></li><li><p>pixelwise normalization layer</p><p>Added after each conv layer. It normalize each activation across all channels. </p></li></ol><h3 id="StyleGANs"><a href="#StyleGANs" class="headerlink" title="StyleGANs"></a>StyleGANs</h3><p>People used style transfer tech in the generator to ensure that the generated images have the same local structure as the training images. The dis and the loss function were not modified. </p><p>Mapping network: an eight-layer MLP that maps the latent representations z to a vector w. These vectors control the style of the generated image at different levels, from fine-grained texture, to high level features. </p><p>Synthesis network: responsible for generating the images. It has a constant learned input. It processes this input thru multiple conv and upsampling layers. Some noise is added to the input and to all the outputs of the conv layers. Each noise layer is followed by an Adaptive Instance Normalization layer: it standardizes each feature map independently subtracting the feature map’s mean and dividing by its standard deviation. </p><p>The idea of adding noise independently from the codings is important. Some parts of an image are quite random. If the noise instead comes from the codings, then the generator had to dedicate a significant portion of codings’ representational power to store noise. </p><p>StyleGAN uses a tech called mixing regularization (style mixing), where a percentage of the generated images are produced using two different codings. This prevents the network from assuming that styles at adjacent levels are correlated. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/Blog/2020/07/13/mybatis/"/>
      <url>/Blog/2020/07/13/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>缺点：</p><ul><li>非对象，修改表需要重写api。没用连接池，操作数据库需要频繁的创建和关联链接</li><li>修改sql的话需要重编译java，不利于系统维护</li><li>使用PreparedStatement预编译对变量进行编号，序号不利于维护</li><li>返回结果集需要硬编码</li></ul><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h3 id="宏观"><a href="#宏观" class="headerlink" title="宏观"></a>宏观</h3><p>连接数据库。</p><p>数据源：Driver, URL, username, password</p><p>执行语句：CRUD</p><p>操作：Connection, PreparedStatement, ResultSet</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>mybatis_config.xml</p><p>功能：分页，监控，日志，记录sql，数据埋点，逆向工程</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlPrint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><h3 id="获取数据库源"><a href="#获取数据库源" class="headerlink" title="获取数据库源"></a>获取数据库源</h3><p>XMLConfigBuilder中<code>parseConfiguration()</code> 解析mybatis全局配置标签。<code>environmentsElement()</code>解析数据库源。</p><h3 id="获取SQL"><a href="#获取SQL" class="headerlink" title="获取SQL"></a>获取SQL</h3><p>SqlSessionFactoryBuilder.build (java.io.InputStream)</p><p>​    SqlSessionFactoryBuilder.java</p><p>​        XMLConfigBuilder.parse</p><p>​            XMLConfigBuilder.parseConfiguration</p><p>​                XMLConfigBuilder.mapperElement</p><p>​                    XMLConfigBuilder.buildStatemnetFromContext</p><p>​                        addMappedStatement</p><p>​                            </p><p>mybatis加载mappers有4种方式:</p><p>resource, url, class, package</p><p>其中package优先级最高。</p><p><code>mapperElement()</code>解析数据库源。</p><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p><code>openSession()</code></p><p>mybatis有3种执行器：</p><p>simple, batch, reuse。默认是simple。</p><h2 id="注解-vs-XML"><a href="#注解-vs-XML" class="headerlink" title="注解 vs XML"></a>注解 vs XML</h2><p>XML的优先级是比annotation高的。</p><p>正常interface无法实例化，但是在mybatis中的Interface加了注释以后会被执行。因为底层通过加代理进行了实例化。</p><p>Annotation: 不适合复杂sql。不方便管理sql</p><p>XML：条件不确定的查询。容易写错，特殊字符转义。</p><h2 id="SQL语句替换"><a href="#SQL语句替换" class="headerlink" title="SQL语句替换"></a>SQL语句替换</h2><p>MappedStatement.java中<code>getBoundSql()</code>方法。</p><p>SqlSourceBuilder.java中调用<code>parse()</code>方法进行了替换。</p>]]></content>
      
      
      <categories>
          
          <category> Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 07 ensemble</title>
      <link href="/Blog/2020/06/23/hands-on-07-ensemble/"/>
      <url>/Blog/2020/06/23/hands-on-07-ensemble/</url>
      
        <content type="html"><![CDATA[<p>A group of predictors is called an enselmble. </p><h1 id="Voting-Classifiers"><a href="#Voting-Classifiers" class="headerlink" title="Voting Classifiers"></a>Voting Classifiers</h1><p>Aggregate the predictions of each classifier and predict the class that gets the most votes. This majority-vote classifier is called a hard voting classifier. </p><p>Due to the law of large numbers, when we have a sufficient number of diverse weak learners, the ensemble can still be a strong learner. If all classifiers are perfectly independent will be better, not the case here since they are trained on the same data and thus are likely to make the same types of errors. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token punctuation">,</span> VotingClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVClog_clf <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>rnd_clf <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>svm_clf <span class="token operator">=</span> SVC<span class="token punctuation">(</span><span class="token punctuation">)</span>voting_clf <span class="token operator">=</span> VotingClassifier<span class="token punctuation">(</span>estimators<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'lr'</span><span class="token punctuation">,</span> log_clf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'rf'</span><span class="token punctuation">,</span> rnd_clf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'svc'</span><span class="token punctuation">,</span> svm_clf<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> voting<span class="token operator">=</span><span class="token string">'hard'</span><span class="token punctuation">)</span>voting_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span></code></pre><p>If all classifiers are able to estimate class probabilities, then we can tell scikit-learn to predict the class with the highest class prob, averaged over all individual classifier. This is called soft voting. </p><h1 id="Bagging-and-Pasting"><a href="#Bagging-and-Pasting" class="headerlink" title="Bagging and Pasting"></a>Bagging and Pasting</h1><p>We can use same training algorithm for every predictor and train them on different random subsets of the training set. When sampling is performed with replacement, it is called bagging (short for bootstrap aggregating). When w/o replacement, it is called pasting. Generally, after aggregation, the net result has a similar bias but a lower variance. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> BaggingClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifierbg_clf <span class="token operator">=</span> BaggingClassifier<span class="token punctuation">(</span>    DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>     max_sampels<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> boot_strp<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>bag_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span></code></pre><p>The Bagging Classifier automatically performs soft voting if the base classifier can estimate class probabilities. </p><p>Bagging introduces a bit more diversity in the subsets that each predictor is trained on, so it ends up with a slightly higher bias than pasting and less variance. </p><h3 id="Out-of-Bag-Eval"><a href="#Out-of-Bag-Eval" class="headerlink" title="Out-of-Bag Eval"></a>Out-of-Bag Eval</h3><p>With Bagging, some instances maybe sampled several times for any given predictor, while others may not be sampled at all. On overage about 63% of the training instances are sampled for each predictor. The remaining 37% are called out-of-bag (oob) instances (not the same 37% for all predictors). As a result, we do not need for a separate validation set. We can set <strong>oob_score=True</strong> to request an automatic oob evaluation after training. </p><pre class=" language-python"><code class="language-python">bag_clf <span class="token operator">=</span> BaggingClassifier<span class="token punctuation">(</span>    DecisionTreClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>    bootstrap<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> n_jobs_<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> oob_score<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>bag_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span>bag_clf<span class="token punctuation">.</span>oob_score_</code></pre><h1 id="Random-Patches-and-Random-Subspaces"><a href="#Random-Patches-and-Random-Subspaces" class="headerlink" title="Random Patches and Random Subspaces"></a>Random Patches and Random Subspaces</h1><p>Sampling is controlled by two hyperparas: <strong>max_features</strong> and <strong>bootstrap_features</strong>. This tech is useful when we deal with high-dimensional inputs. Sampling both training instances and features is called the Random Patches. Keeping all training instances but sampling features is called the Random Subspaces. </p><h1 id="RF"><a href="#RF" class="headerlink" title="RF"></a>RF</h1><p>RF is an ensemble of Decision Trees, generally trained via the bagging method, with max_samples set to the size of the training set. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifierrnd_clf <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> max_leaf_nodes<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>rnd_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span></code></pre><p>A RF classifier has almost all hyperparameters of a DT classifier plus those of a Bagging classifier. </p><p>The following bagging is similar to RF. </p><pre class=" language-python"><code class="language-python">bag <span class="token operator">=</span> BaggingClassifier<span class="token punctuation">(</span>    DecisionTreeClassifier<span class="token punctuation">(</span>splitter<span class="token operator">=</span><span class="token string">"random"</span><span class="token punctuation">,</span> max_leaf_nodes<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> max_samples<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> bootstrap<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="extra-trees"><a href="#extra-trees" class="headerlink" title="extra trees"></a>extra trees</h3><p>Extremely Randomized Trees ensemble (extra-trees): We can make trees more random by using random thresholds for each feature rather than searching for the best possible thresholds.</p><h3 id="Feature-Importance"><a href="#Feature-Importance" class="headerlink" title="Feature Importance"></a>Feature Importance</h3><p>We can measure the relative importance of each feature. Scikit-learn measures importance by looking at how much the nodes that use this feature reduce impurity on average. </p><pre class=" language-python"><code class="language-python">rf_clf <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>rf_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>iris<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> iris<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> score <span class="token keyword">in</span> zip<span class="token punctuation">(</span>iris<span class="token punctuation">[</span><span class="token string">"feature_names"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rf_clf<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> score<span class="token punctuation">)</span></code></pre><h1 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h1><p>Boosting refers to any Ensemble method that can combine several weak learners into a strong learner. The general idea of most boosting method is to train predictors sequentially, each trying to correct its predecessor. </p><h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><p>One way to correct its predecessor is to pay a bit more attention to the training instances that the predecessor underfitted. Once all predictors are trained, they have different weights depending on their overall accuracy on the weighted training set. One drawback is they cannot be parallelized. </p><p>Each instance weight is initially set to 1/m. We calculate the weighted error rate of the j-th predictor. </p><p>$r_j=\frac{\sum^m_{i=1, \hat{y}<em>j^{(i)}\ne y^{(i)}} w^{(i)}}{\sum</em>{i=1}^m w^{(i)}}$ </p><p>The predictor’s weight $\alpha_j$ is then computed using</p><p>$\alpha_j = \eta log\frac{1-r_j}{r_j}$</p><p>Next, the AdaBoost algorithm updates the instance weights, boosting the weights of the misclassified instances</p><p>$w^{(i)} = w^{(i)}exp(\alpha_j)$ if the instance is misclassified. </p><p>Then all the instance weights are normalized. </p><p>Finally, a new predictor is trained using the updated weights, and the whole process is repeated. </p><p>During prediction, it computes the predictions of all the predictors and weighs them using the predictor weights. </p><p>$\hat{y}(x) = argmax_k \sum^N_{j=1, \hat{y}_j(x)=k} \alpha_j$</p><p>Scikit-Learn uses a multiclass version of AdaBoost called SAMME (stagewise additive modeling using a multiclass exponential loss function). SAMME.R can estimate class probabilities. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> AdaBoostClassifierada_clf <span class="token operator">=</span> AdaBoostClassifier<span class="token punctuation">(</span>    DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>    algorithm<span class="token operator">=</span><span class="token string">"SAMME.R"</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><h3 id="Gradient-Boosting"><a href="#Gradient-Boosting" class="headerlink" title="Gradient Boosting"></a>Gradient Boosting</h3><p>Instead of tweaking the instance weights at every iteration like AdaBoost, Gradient Boosting tries to fit the new predictor to the residual errors made by the previous predictor. </p><p>Gradient Boosted Regression Trees (GBRT). We can build a simple instance. </p><pre class=" language-python"><code class="language-python">tree_reg1 <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>tree_reg1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>y2 <span class="token operator">=</span> y <span class="token operator">-</span> tree_reg1<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>tree_reg2 <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>tree_reg2<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y2<span class="token punctuation">)</span>y3 <span class="token operator">=</span> y2 <span class="token operator">-</span> tree_reg2<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>tree_reg3 <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>tree_reg3<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y3<span class="token punctuation">)</span>y_pred <span class="token operator">=</span> sum<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span> <span class="token keyword">for</span> tree <span class="token keyword">in</span> <span class="token punctuation">(</span>tree_reg1<span class="token punctuation">,</span> tree_reg2<span class="token punctuation">,</span> tree_reg3<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Instead, we can use scikit-learn implementation. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> GradientBoostingRegressorgbrt <span class="token operator">=</span> GradientBoostingRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>gbrt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>The <strong>learning_rate</strong> scales the contribution of each tree. If we set it to a low value, we need more trees in the ensemble to fit the training set, but the results are usually better (this is a regularization technique called shrinkage). In order to find the optimal number of trees, we can use early stopping. </p><pre class=" language-python"><code class="language-python">xtrain<span class="token punctuation">,</span> xval<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> yval <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>gbrt <span class="token operator">=</span> GradientBoostingRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>gbrt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span>errors <span class="token operator">=</span> <span class="token punctuation">[</span>mean_squared_error<span class="token punctuation">(</span>yval<span class="token punctuation">,</span> ypred<span class="token punctuation">)</span> <span class="token keyword">for</span> ypred <span class="token keyword">in</span> gbrt<span class="token punctuation">.</span>staged_predict<span class="token punctuation">(</span>xval<span class="token punctuation">)</span><span class="token punctuation">]</span>bst_n <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>gbrt_best <span class="token operator">=</span> GradientBoostingRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span>bst_n<span class="token punctuation">)</span>gbrt_best<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span></code></pre><p>It is also possible to implement early stopping by stopping training early instead of training a large number of trees and then looking back to find the optimal. </p><pre class=" language-python"><code class="language-python">gbrt <span class="token operator">=</span> GradientBoostingRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> warm_start<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>min_val_error <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>error_going_up <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> n_estimators <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gbrt<span class="token punctuation">.</span>n_estimators <span class="token operator">=</span> n_estimators    gbrt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> gbrt<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xval<span class="token punctuation">)</span>    val_error <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>yval<span class="token punctuation">,</span> ypred<span class="token punctuation">)</span>    <span class="token keyword">if</span> val_error <span class="token operator">&lt;</span> min_val_error<span class="token punctuation">:</span>        min_val_error <span class="token operator">=</span> val_error        error_going_up <span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        error_going_up <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> error_going_up <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">break</span></code></pre><p>The GradientBoostingRegressor class also supports a <strong>subsample</strong> hyperparameter, which specifies the fraction of training instances to be used for training each tree. Stochastic Gradient Boosting. </p><h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><pre class=" language-python"><code class="language-python">xgb_reg <span class="token operator">=</span> xgboost<span class="token punctuation">.</span>XGBRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>xgb_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>xval<span class="token punctuation">,</span> yval<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            early_stopping_rounds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>y_pred <span class="token operator">=</span> xgb_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xval<span class="token punctuation">)</span></code></pre><h1 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h1><p>Instead of using trivial functions to aggregate the predictions of all predictors in an ensemble, we can train a model to perform the aggregation. To train the blender, we can use a hold-out set. The first subset of training set is used to train the predictors in the first layer. Next, these predictors are used to make predictions on the second set. We can create a new training set using these predicted values as input features, and keeping the target values. The blender is trained on this new training set. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/Blog/2020/06/20/shell/"/>
      <url>/Blog/2020/06/20/shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>Convention: all caps for system variables, lower case for user defined variables. </p><pre class=" language-shell"><code class="language-shell">echo $BASHecho $BASH_VERSIONecho $HOMEecho $PWD</code></pre><p>For user defined var, see the code below. Note that there is no space between var name and “=” and its value. </p><pre class=" language-shell"><code class="language-shell">name=Markecho The name is $name</code></pre><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>Separate each element with space, not comma.  </p><pre class=" language-shell"><code class="language-shell">os=('ubuntu' 'windowns' 'mac')os[3]='kali'  # add/set an elementecho "$&#123;os[@]&#125;"  # print all elementsecho "$&#123;!os[@]&#125;"  # print the indices (may not be consecutive)echo "$&#123;#os[@]&#125;"  # print the length of arrayunset os[3]  # remove an element # stringstring=dasfsd## the following all prints the full stringecho "$&#123;os[@]&#125;"echo "$&#123;os[0]&#125;"echo "$&#123;os[1]&#125;"</code></pre><h2 id="Logical-Operator"><a href="#Logical-Operator" class="headerlink" title="Logical Operator"></a>Logical Operator</h2><p><strong>And</strong></p><pre class=" language-shell"><code class="language-shell">age=25if [ $age -gt 18 ] && [ $age -lt 30 ]# Alternatively, we can use# if [ $age -gt 18 -a $age -lt 30 ]# if [[ $age -gt 18 && $age -lt 30 ]]then     echo "valid age"fi</code></pre><p><strong>Or</strong></p><p>replace the second with -o</p><h2 id="Arithmetic-Operation"><a href="#Arithmetic-Operation" class="headerlink" title="Arithmetic Operation"></a>Arithmetic Operation</h2><p>Notice the space between parenthesis and condition. </p><pre class=" language-shell"><code class="language-shell"># integernum1=10num2=5echo $(( num1+num2 ))echo $(expr $num1 + $num2 )  # this does not work for *# floatnum1=20.5num2=5echo "20.5/5" | bc #4echo "scale=2;20.5/5" | bc #4.10echo "$num1+$num2" | bcecho "scale=3;sqrt($num1)" | bc -l  # -l calls the libraryecho "scale=3;3^3" | bc -l</code></pre><h2 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h2><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><p>Note the space between condition and “[]”.</p><p><strong>integer comparison</strong></p><p>-eq, -ne, -gt, -ge, -lt, -le: typical with [condition]</p><p>&lt;, &lt;=, &gt;, &gt;=: typical with ((condition))</p><p><strong>string comparison</strong></p><p>== (equivalent to =), !=: typical with [condition]</p><p> &lt;, &gt;, -z- (string is null): typical with [[condition]]</p><pre class=" language-shell"><code class="language-shell"># integer comparison cnt=10if [ $cnt -eq 10 ]then     statementfi# string comparisonword=abcif [ $word == 'abc' ]then     statementelif [[ $word < 'zzz' ]]then    statementelse    statementfi</code></pre><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><p>[a-z], [A-Z], [0-9]</p><p>? matches one letter character</p><p>if [a-z] also match upper case letter, execute <code>LANG=C</code>.</p><pre class=" language-shell"><code class="language-shell">case expression in    pattern1 )        statement ;;    pattern2 )        statement ;;    * ) # * matches any strings        echo "unknown" ;;esac</code></pre><h3 id="While"><a href="#While" class="headerlink" title="While"></a>While</h3><p>Pattern. </p><pre class=" language-shell"><code class="language-shell">while [ condition ]do     command1    command2done</code></pre><p>We can sleep and open terminal. </p><pre class=" language-shell"><code class="language-shell">n=1while (( n <= 10))do    echo "$n"    (( n++ ))    sleep 1    gnome-terminal &     xterminaldone</code></pre><h3 id="Until"><a href="#Until" class="headerlink" title="Until"></a>Until</h3><p>Equivalent to while (!condition).</p><h3 id="For"><a href="#For" class="headerlink" title="For"></a>For</h3><pre class=" language-shell"><code class="language-shell">for var in 1 2 3 4 5  # in &#123;1..5..1&#125;, start, end, stepfor var in file1 file2 file3for (( exp1; exp2; exp3 ))</code></pre><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p>Iterate the list and give user a menu-like prompt. </p><pre class=" language-shell"><code class="language-shell">select name in mark john tom bendo     echo "$name selected"done</code></pre><p>Usually combine with case. </p><pre class=" language-shell"><code class="language-shell">select name in mark john tom bendo     case $name in     mark )        echo "mark selected" ;;    john )        echo "john selected" ;;    tom )        echo "tom selected" ;;         * )        echo "please provide no.1-4"    esacdone</code></pre><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>When we call the function, no parenthesis is needed. </p><pre class=" language-shell"><code class="language-shell">function name()&#123;    command&#125;function print()&#123;    echo $1 $2 $3&#125;print Hello World Again</code></pre><p>Default, the variable is global. If we want to declare local variable, use local keyword. </p><pre class=" language-shell"><code class="language-shell">function print()&#123;    name=$1    # local name=$1    echo "the name is $name"&#125;name="Tom"print Maxecho "The name is $name: After"# will be Tom if local keyword is used; Max if not. </code></pre><pre class=" language-shell"><code class="language-shell">usage() &#123;    echo "You need to provide an argumet"    echo "usage: $0 file_name"&#125;file_exist() &#123;    local file="$1"    [[ -f "$file" ]] && return 0 || return 1&#125;[[ $# eq 0 ]] && usageif ( file_exist "$1" )then    echo "file found"else    echo "file not found"fi</code></pre><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h3 id="read-inputs"><a href="#read-inputs" class="headerlink" title="read inputs"></a>read inputs</h3><pre class=" language-shell"><code class="language-shell">echo "Enter Personal Info"read name age email echo "name: $name, age: $age, email: $email"</code></pre><p>If we want user to enter info in the same line. </p><pre class=" language-shell"><code class="language-shell">read -p 'username: ' user_varecho 'username is' $user_var</code></pre><p>If we want to silence the input (not displaying it).</p><pre class=" language-shell"><code class="language-shell">read -sp 'password:' pwecho  # let next message appear in a new lineecho 'password is' $pw</code></pre><p>We can save all inputs in an array. </p><pre class=" language-shell"><code class="language-shell">echo "enter names:"read -a names echo "Names include: $&#123;names[0]&#125;, $&#123;names[1]&#125;"</code></pre><p>Using while loop. </p><pre class=" language-shell"><code class="language-shell">while read linedo     echo $linedone < content.txt# an alternative waycat content.txt | while read pdo    echo $pdone</code></pre><pre class=" language-shell"><code class="language-shell">while IFS=' ' read -r line  # -r will skip escape signdo     echo $linedone < content.txt</code></pre><h3 id="Pass-Arguments"><a href="#Pass-Arguments" class="headerlink" title="Pass Arguments"></a>Pass Arguments</h3><p>Print the argument. ‘$0’ represent the shell script name. </p><pre class=" language-shell"><code class="language-shell">echo $1 $2 $3</code></pre><p>We can store the arguments in an array. The shell script name will not be parsed into the array, thus ${args[0]} is in fact $1.</p><pre class=" language-shell"><code class="language-shell">args=("$@")echo $&#123;args[0]&#125;echo $@  # print out all arguments echo $#  # print out the number of arguments </code></pre><h3 id="File-test-operators"><a href="#File-test-operators" class="headerlink" title="File test operators"></a>File test operators</h3><p>-e check whether the file exists</p><pre class=" language-shell"><code class="language-shell">echo -e "enter filename: \c"read filenameif [-e $filename]then     echo "$filename found"else    echo "$filename not found"fi</code></pre><h3 id="Append-output"><a href="#Append-output" class="headerlink" title="Append output"></a>Append output</h3><p>-f check whether the path is a file </p><p>-w check write permission</p><p>&gt; overwrite a file</p><p>&gt;&gt; append to a file</p><pre class=" language-shell"><code class="language-shell">echo -e "enter filename: \c"read filenameif [ -f $filename ]then     if [ -w $filename ]    then         echo "I want to append"        cat >> $filename    else        echo "no permission"    fifi</code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github</title>
      <link href="/Blog/2020/06/20/github/"/>
      <url>/Blog/2020/06/20/github/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>git: system for version control<br>github: website to upload your directory</p><p>.md (markdown file):</p><p>## This is the header  </p><p>Regular text  </p><p>* bullet 1  </p><p>[Link to Google](<a href="http://www.google.com/">http://www.google.com</a>)  </p><p>fork-&gt;modify-&gt;pull request (does not sync with the upstream repo)</p><h1 id="Init-by-clone"><a href="#Init-by-clone" class="headerlink" title="Init by clone"></a>Init by clone</h1><p>we can first init the repo on github, and then clone it to our local<br>machine.</p><p>open git bash:  </p><pre class=" language-shell"><code class="language-shell">cd \~/Desktop/git clone *url*cd *test-repo* (now we see the master branch, test-repo is directoryname)git remote -vgit remote add origin *url* (can skip the step if origin already exist)touch new.md (create a file on windows with non standard extension)git statusgit add new.md (add one file)git add . (add all files once)git commit -m “edit readme and add new.md” (remember to add the message)git loggit push origin master</code></pre><h1 id="Init-by-fork"><a href="#Init-by-fork" class="headerlink" title="Init by fork"></a>Init by fork</h1><p>fork other people’s repo and there are some new commit in that repo:  </p><pre class=" language-shell"><code class="language-shell">git remote add upstream *url*git fetch upstreamgit merge upstream/master (new update is in the branch upstream/master)git push origin master</code></pre><h1 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h1><pre class=" language-shell"><code class="language-shell">mkdir test1cd test1git initgit remote add origin <http://github.com/username/test1.git>cp ../test.txt test.txtgit statusgit add .git commit -m “msg”git push origin master **--此时出现error显示fail to push some refs to …updates were rejected because the remote contains work that you do nothave locally**git pull origin mastergit push origin master --此时可以成功push</code></pre><p>从远端拿东西最好用git fetch + git merge。如果直接使用git pull会覆盖本地有但是远端没有的文件。  </p><h1 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h1><pre class=" language-shell"><code class="language-shell">git checkout -b newbranch    #新建branch，并且进入到new branchgit checkout master          #切换回到mastergit merge newbranch          #这里是分支名字，将new branch内容合并到master branchgit branch -d newbranch      #当前分支已经没用了，记得删除，除非还需要用到git branch                   #查看当前所在分支git branch -A/--all          #查看所有分支</code></pre><h1 id="Roll-Back"><a href="#Roll-Back" class="headerlink" title="Roll Back"></a>Roll Back</h1><pre class=" language-shell"><code class="language-shell">git log                                 #查看版本git reset --hard <commit_id>            #回退到指定版本git push origin HEAD --force            #清空这个commitid之后所有已经提交了的commitgit revert <commit-id>                  #剔除某次提交，其后的commit不受到影响</code></pre>]]></content>
      
      
      <categories>
          
          <category> app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string</title>
      <link href="/Blog/2020/06/20/string/"/>
      <url>/Blog/2020/06/20/string/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ol><li>考虑使用HashMap进行计数</li><li>掌握substring, indexOf, isLetterOrDigit等常见方法</li><li>考虑转换成char[]</li><li>比较一定要使用equals</li><li>找符合条件子串，考虑滑动窗口法，关键在于找到合法起始点</li><li>KMP算法</li></ol><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>Given a string <em>s</em> and a pattern <em>p</em>, find all occurrences of <em>p</em> in <em>s</em>.</p><p>n = len(s), m = len(p)</p><p><strong>brute force</strong></p><p>time: worst O(mn), average O(m+n)</p><p><strong>KMP</strong></p><p>time: worst O(m+n)</p><p>space: O(m)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">match</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    nxt <span class="token operator">=</span> build<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">-</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># nxt[i]: len of the longest prefixt of p[0:i] that is also the suffix</span><span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 10 keras</title>
      <link href="/Blog/2020/06/19/hands-on-10-keras/"/>
      <url>/Blog/2020/06/19/hands-on-10-keras/</url>
      
        <content type="html"><![CDATA[<h1 id="Biological-to-Artificial-Neurons"><a href="#Biological-to-Artificial-Neurons" class="headerlink" title="Biological to Artificial Neurons"></a>Biological to Artificial Neurons</h1><h3 id="Threshold-Logic-Unit-TLU"><a href="#Threshold-Logic-Unit-TLU" class="headerlink" title="Threshold Logic Unit (TLU)"></a>Threshold Logic Unit (TLU)</h3><p>input/output: numbers. compute a weighted sum of its inputs and then applies step function. </p><p>When all neurons in a layer are connected to every neuron in the previous layer, this layer is called a fully connected layer, or a dense layer. </p><p><em>perceptron learning rule</em></p><p>$w_{i,j}^{t+1} = w_{i,j}^{t} + \eta(y_j-\hat{y}_j)x_i$</p><h3 id="Multilayer-Perceptron-MLP"><a href="#Multilayer-Perceptron-MLP" class="headerlink" title="Multilayer Perceptron (MLP)"></a>Multilayer Perceptron (MLP)</h3><p>The layers close to the input layer are called the lower layers. </p><p>Automatically computing gradients is called automatic differentiation, or autodiff. The one used by BP is called reverse-mode autodiff, suited when the function has many variables and few outputs. </p><p>It is important to init all hidden layers’ connection weights randomly (non-zero). This breaks the symmetry, and let different neurons in different layers learn different patterns. </p><h3 id="Regression-MLPs"><a href="#Regression-MLPs" class="headerlink" title="Regression MLPs"></a>Regression MLPs</h3><p>No activation function should be used for the output layer unless we  want to guarantee they fall in a range. </p><p>The loss function to use is typically the MSE. If there are a lot of outliers, we can use MAE or Huber loss. </p><h3 id="Classification-MLPs"><a href="#Classification-MLPs" class="headerlink" title="Classification MLPs"></a>Classification MLPs</h3><p>Multiclass classification: use softmax activation for the whole output layer, which ensures all estimated probabilities are between 0 and 1 and they add up to 1. </p><p>Cross-entropy loss (log loss) is a good choice. </p><h1 id="Implementing-MLPs-with-Keras"><a href="#Implementing-MLPs-with-Keras" class="headerlink" title="Implementing MLPs with Keras"></a>Implementing MLPs with Keras</h1><p>Two implementations of the Keras API: multibackend Keras and tf.keras (supports TF-specific features)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> kerastf<span class="token punctuation">.</span>__version__ <span class="token comment" spellcheck="true">#2.0.0</span>keras<span class="token punctuation">.</span>__version__ <span class="token comment" spellcheck="true">#2.2.4-tf</span></code></pre><p>Build using MNIST. </p><pre class=" language-python"><code class="language-python">fashion_mnist <span class="token operator">=</span> keras<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>fashion_mnist<span class="token punctuation">(</span>X_train_full<span class="token punctuation">,</span> ytrain_full<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> ytest<span class="token punctuation">)</span> <span class="token operator">=</span> fashion_mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>X_train_full<span class="token punctuation">.</span>shapexval<span class="token punctuation">,</span> xtrain <span class="token operator">=</span> X_train_full<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">,</span> X_train_full<span class="token punctuation">[</span><span class="token number">5000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">.</span>yval<span class="token punctuation">,</span> ytrain <span class="token operator">=</span> ytrain_full<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ytrain_full<span class="token punctuation">[</span><span class="token number">5000</span><span class="token punctuation">:</span><span class="token punctuation">]</span>class_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"T-shirt"</span><span class="token punctuation">,</span> <span class="token string">"Trouser"</span><span class="token punctuation">,</span> <span class="token string">"Pullover"</span><span class="token punctuation">,</span> <span class="token string">"Dress"</span><span class="token punctuation">,</span> <span class="token string">"Coat"</span><span class="token punctuation">,</span> <span class="token string">"Sandal"</span><span class="token punctuation">,</span> <span class="token string">"Shirt"</span><span class="token punctuation">,</span> <span class="token string">"Sneaker"</span><span class="token punctuation">,</span> <span class="token string">"Bag"</span><span class="token punctuation">,</span> <span class="token string">"Ankle boot"</span><span class="token punctuation">]</span></code></pre><h2 id="Sequential-API"><a href="#Sequential-API" class="headerlink" title="Sequential API"></a>Sequential API</h2><p>E.g.: Classification Problem for a image problem. </p><h4 id="Build-a-Model-for-Classification"><a href="#Build-a-Model-for-Classification" class="headerlink" title="Build a Model for Classification"></a>Build a Model for Classification</h4><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># similar to X.reshape(-1, 1)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Flattern<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>The first Dense layer has 28*28*300 connection weights, plus 300 bias terms. It is recommended but not required to specify the input shape. If not specified, certain operations such as printing the model summary or saving the model will not allowed. Keras will create the model when real data is fed or build() is called. </p><p>Instead of adding layers one by one, we can create our model by passing a list. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Flatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Get a model’s list of layers.</p><pre class=" language-python"><code class="language-python">layers <span class="token operator">=</span> model<span class="token punctuation">.</span>layershidden1 <span class="token operator">=</span> layers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>hidden1<span class="token punctuation">.</span>name</code></pre><p>Get parameters of a layer. </p><pre class=" language-python"><code class="language-python">w<span class="token punctuation">,</span> b <span class="token operator">=</span> hidden1<span class="token punctuation">.</span>get_weights<span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>shape  <span class="token comment" spellcheck="true"># (784, 300)</span></code></pre><h4 id="Compile-the-model"><a href="#Compile-the-model" class="headerlink" title="Compile the model"></a>Compile the model</h4><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"sparse_categorical_crossentropy"</span><span class="token punctuation">,</span>              optimizer<span class="token operator">=</span><span class="token string">"sgd"</span><span class="token punctuation">,</span>             metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"accuracy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>If we want to convert sparse labels (class indices) to one hot vector labels, use the keras.utils.to_categorical() function. To go the other way round, use the np.argmax(axis=1).</p><h4 id="Train-and-Evaluate"><a href="#Train-and-Evaluate" class="headerlink" title="Train and Evaluate"></a>Train and Evaluate</h4><pre class=" language-python"><code class="language-python">history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                     validation_data<span class="token operator">=</span><span class="token punctuation">(</span>xval<span class="token punctuation">,</span> yval<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>xtest<span class="token punctuation">,</span> ytest<span class="token punctuation">)</span></code></pre><p>If classes are skewed, use <strong>class_weight</strong> argument, which would give a larger weight to underrepresented classes. Similarly, if some instances were more important (e.g., labeled by experts), use <strong>sample_weight</strong> argument.</p><p>Calling fit() again we resume where the models left off. </p><p>Plot the metric curves. </p><pre class=" language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>When plotting the training curve, it should be shifted by half an epoch to the left. The training error is computed using a running mean during each epoch, whereas the validation error is computed at the end of each epoch. </p><p>Hyperparameters to check: learning rate, optimizer, number of layers, number of neurons, activation function</p><h4 id="Make-Prediction"><a href="#Make-Prediction" class="headerlink" title="Make Prediction"></a>Make Prediction</h4><pre class=" language-python"><code class="language-python">y_proba <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span>y_proba<span class="token punctuation">.</span>round<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict_classes<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span></code></pre><p>E.g.: Regression Problem.</p><h4 id="Preprocess-For-Regression"><a href="#Preprocess-For-Regression" class="headerlink" title="Preprocess For Regression"></a>Preprocess For Regression</h4><pre class=" language-python"><code class="language-python">xtrain_full<span class="token punctuation">,</span> xtest<span class="token punctuation">,</span> ytrain_full<span class="token punctuation">,</span> ytest <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span>xtrain<span class="token punctuation">,</span> xval<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> yval <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>xtrain_full<span class="token punctuation">,</span> ytrain_full<span class="token punctuation">)</span>scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>xtrain <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>xtrain<span class="token punctuation">)</span>xval <span class="token operator">=</span> scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>xval<span class="token punctuation">)</span>xtest <span class="token operator">=</span> scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span></code></pre><h4 id="Model-for-Regression"><a href="#Model-for-Regression" class="headerlink" title="Model for Regression"></a>Model for Regression</h4><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span>xtrain<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"mean_squared_error"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"sgd"</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">(</span>xval<span class="token punctuation">,</span> yval<span class="token punctuation">)</span><span class="token punctuation">)</span>mse_test <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>xtest<span class="token punctuation">,</span> ytest<span class="token punctuation">)</span>y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xtest<span class="token punctuation">)</span></code></pre><h2 id="Functional-API"><a href="#Functional-API" class="headerlink" title="Functional API"></a>Functional API</h2><p>Sequential models make data go through the full stack of layers. The workflow can be distorted by wide&amp;deep neural network. </p><img alt="wide&deep neural network" src="1001.PNG" width="400" height="300" /><pre class=" language-python"><code class="language-python">input_ <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span>xtrain<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hid1 <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input_<span class="token punctuation">)</span>hid2 <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hid1<span class="token punctuation">)</span>concat <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Concatenate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span>input_<span class="token punctuation">,</span> hid2<span class="token punctuation">]</span><span class="token punctuation">)</span>output <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>input_<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>output<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>If we want to send a subset of the features through the wide path and a different subset through the deep path, one solution is to use multiple inputs. </p><img alt="two inputs" src="1002.PNG" width="400" height="300"><pre class=" language-python"><code class="language-python">input_A <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"wide_input"</span><span class="token punctuation">)</span>input_B <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"deep_input"</span><span class="token punctuation">)</span>hid1 <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input_B<span class="token punctuation">)</span>hid2 <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hid1<span class="token punctuation">)</span>concat <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>input_A<span class="token punctuation">,</span> hid2<span class="token punctuation">]</span><span class="token punctuation">)</span>out <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>input_A<span class="token punctuation">,</span> input_B<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>out<span class="token punctuation">]</span><span class="token punctuation">)</span>xtrain_A<span class="token punctuation">,</span> xtrain_B <span class="token operator">=</span> xtrain<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> xtrain<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>xval_A<span class="token punctuation">,</span> xval_B <span class="token operator">=</span> xval<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> xval<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pass a pair of inputs</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">(</span>xtrain_A<span class="token punctuation">,</span> xtrain_B<span class="token punctuation">)</span><span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span>           validation_data<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xval_A<span class="token punctuation">,</span> xval_B<span class="token punctuation">)</span><span class="token punctuation">,</span> yval<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Cases when we want multiple outputs:</p><ul><li>Task needs. For example, locate and classify the main object. </li><li>Multiple independent tasks based on same data. NN can learn features across tasks. </li><li>Regularization technique. </li></ul><pre class=" language-python"><code class="language-python">out <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span>aux_out <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"aux"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hid2<span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>input_A<span class="token punctuation">,</span> input_B<span class="token punctuation">]</span><span class="token punctuation">,</span>                    outputs<span class="token operator">=</span><span class="token punctuation">[</span>out<span class="token punctuation">,</span> aux_out<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># each output needs its own loss function</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"mse"</span><span class="token punctuation">,</span> <span class="token string">"mse"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loss_weights<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="Subclassing-API"><a href="#Subclassing-API" class="headerlink" title="Subclassing API"></a>Subclassing API</h2><p>Sequential API and Functional API are declarative. The model can easily be saved, cloned, and shared; structured can be displayed. </p><p>Subclassing API are dynamic. The model can involve loops, varying shapes, and conditional branching. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> units<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># handles standard args (e.g.: names)</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hid1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units <span class="token punctuation">,</span>activation<span class="token operator">=</span>activation<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hid2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token punctuation">,</span> activation<span class="token operator">=</span>activation<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>main_output <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>aux_output <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        input_A<span class="token punctuation">,</span> input_B <span class="token operator">=</span> inputs        hid1 <span class="token operator">=</span> self<span class="token punctuation">.</span>hid1<span class="token punctuation">(</span>input_B<span class="token punctuation">)</span>        hid2 <span class="token operator">=</span> self<span class="token punctuation">.</span>hid2<span class="token punctuation">(</span>hid1<span class="token punctuation">)</span>        concat <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>input_A<span class="token punctuation">,</span> hid2<span class="token punctuation">]</span><span class="token punctuation">)</span>        main_out <span class="token operator">=</span> self<span class="token punctuation">.</span>main_output<span class="token punctuation">(</span>concat<span class="token punctuation">)</span>        aux_out <span class="token operator">=</span> self<span class="token punctuation">.</span>aux_output<span class="token punctuation">(</span>hid2<span class="token punctuation">)</span>        <span class="token keyword">return</span> main_out<span class="token punctuation">,</span> aux_outmodel <span class="token operator">=</span> MyModel<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>When we call summary(), we only get a list of layers, w/o any connecting info. Moreover, Keras cannot check types and shapes ahead of time. </p><h2 id="Save-and-Restore-and-Callbacks"><a href="#Save-and-Restore-and-Callbacks" class="headerlink" title="Save and Restore and Callbacks"></a>Save and Restore and Callbacks</h2><p>Use the HDF5 format to save both architecture and values of all model parameters. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"my_keras.h5"</span><span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">"my_keras.h5"</span><span class="token punctuation">)</span></code></pre><p>In fit(), <strong>callbacks</strong> argument lets us specify a list of objects that Keras will call at the start and end of training/epoch/batch. </p><pre class=" language-python"><code class="language-python">checkpoint <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>ModelCheckpoint<span class="token punctuation">(</span><span class="token string">"my_keras.h5"</span><span class="token punctuation">,</span>                                           save_best_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>es_cb <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>EarlyStopping<span class="token punctuation">(</span>patience<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>                                     restore_best_weights<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span>                  callbacks<span class="token operator">=</span><span class="token punctuation">[</span>checkpoint<span class="token punctuation">,</span> es_cb<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>We can also define custom callbacks. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyCB</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>Callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">on_epoch_end</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> logs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"val/train:&amp;#123;:.2f&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>logs<span class="token punctuation">[</span><span class="token string">"val_loss"</span><span class="token punctuation">]</span><span class="token operator">/</span>logs<span class="token punctuation">[</span><span class="token string">"loss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    def on_train_begin()    def on_train_end()    def on_epoch_begin()    def on_epoch_end()    def on_batch_begin()    def on_batch_begin()    '''</span></code></pre><h2 id="TensorBoard"><a href="#TensorBoard" class="headerlink" title="TensorBoard"></a>TensorBoard</h2><p>TensorBoard is a great interactive visualization tool that we can use to view the learning curves during training and analyze statistics. We have to modify our program and output the data to a special binary log files called event files. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os root_logdir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">,</span> <span class="token string">"my_logs"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> time    run_id <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"run_%Y_%m_%d-%H_%M_%S"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_logdir<span class="token punctuation">,</span> run_id<span class="token punctuation">)</span>run_logdir <span class="token operator">=</span> get_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>tensorboard_cb <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>TensorBoard<span class="token punctuation">(</span>run_logdir<span class="token punctuation">)</span></code></pre><p>There is one directory per fun, each containing one subdir for training logs and one for validation logs. </p><p>Next, start the TensorBoard server. </p><pre class=" language-shell"><code class="language-shell">tensorboard --logidr=./my_logs --port=6006</code></pre><p>If we have installed Jupiter. </p><pre class=" language-python"><code class="language-python"><span class="token operator">%</span>load_ext tensorboard<span class="token operator">%</span>tensorboard <span class="token operator">-</span><span class="token operator">-</span>logdir<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>logs <span class="token operator">-</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">6006</span></code></pre><h2 id="Fine-Tuning-Hyperparameter"><a href="#Fine-Tuning-Hyperparameter" class="headerlink" title="Fine Tuning Hyperparameter"></a>Fine Tuning Hyperparameter</h2><p>Try many combinations and see which one works best on the validation set. We can use GridSearchCV or RandomizedSearchCV to explore by wrapping our models in objects that mimic regular scikit-learn regressors.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_model</span><span class="token punctuation">(</span>n_hid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_neurons<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>InputLayer<span class="token punctuation">(</span>input_shape<span class="token operator">=</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> layer <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_hid<span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>n_neurons<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span>lr<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"mse"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optimizer<span class="token punctuation">)</span>    <span class="token keyword">return</span> model</code></pre><pre class=" language-python"><code class="language-python">keras_reg <span class="token operator">=</span> keras<span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span>scikit_learn<span class="token punctuation">.</span>KerasRegressor<span class="token punctuation">(</span>build_model<span class="token punctuation">)</span>param_dist <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"n_hid"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"n_neurons"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"lr"</span><span class="token punctuation">:</span> scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>reciprocal<span class="token punctuation">(</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>rnd_search_cv <span class="token operator">=</span> RandomizedSearchCV<span class="token punctuation">(</span>keras_reg<span class="token punctuation">,</span> param_dist<span class="token punctuation">,</span>                                   n_iter<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>rnd_search_cv<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span>                   callbacks<span class="token operator">=</span>EarlyStopping<span class="token punctuation">(</span>patience<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>When a region of the space turns out to be good, it should be explored more. In this way, searching space is more efficient. </p><ul><li>Hyperopt</li><li>Hyperas, kopt, Talos</li><li>Keras Tuner</li><li>Scikit-Optimize</li><li>Spearmint</li><li>Hyperband</li><li>Sklearn-Deap</li></ul><h4 id="Num-of-Hidden-Layers-Neurons"><a href="#Num-of-Hidden-Layers-Neurons" class="headerlink" title="Num of Hidden Layers/Neurons"></a>Num of Hidden Layers/Neurons</h4><p>Depending on the dataset, it can sometimes help to make the first hidden layer bigger than the others. In practice, we can pick a model with more layers and neurons than we actually need, then use early stopping and other regularization tech to prevent it from overfitting. </p><h4 id="Learning-Rate"><a href="#Learning-Rate" class="headerlink" title="Learning Rate"></a>Learning Rate</h4><p>The optimal one is about half of the maximum learning rate. One way to find a good learning rate is to start with a very low one and gradually increases to a very large value by multiplying by a constant factor at each iteration. </p><p>LR often depends on the batch size. So change them in pair. </p><h4 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h4><p>–. </p><h4 id="Batch-size"><a href="#Batch-size" class="headerlink" title="Batch size"></a>Batch size</h4><p>GPU can process large batch sizes efficiently, so we can choose the largest batch size that can fit in GPU RAM.  We can try to use a large batch size, using learning rate warmup, and if training is unstable or the final performance is disappointing, then try a smaller one. </p><h4 id="Activation-function"><a href="#Activation-function" class="headerlink" title="Activation function"></a>Activation function</h4><p>ReLU is a good default. </p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 12 custom</title>
      <link href="/Blog/2020/06/18/hands-on-12-custom/"/>
      <url>/Blog/2020/06/18/hands-on-12-custom/</url>
      
        <content type="html"><![CDATA[<h1 id="Using-TF-like-Numpy"><a href="#Using-TF-like-Numpy" class="headerlink" title="Using TF like Numpy"></a>Using TF like Numpy</h1><p>A tensor is very similar to a numpy ndarray: usually a multidimensional array, but can also hold a scalar. </p><h3 id="Tensors-and-Operations"><a href="#Tensors-and-Operations" class="headerlink" title="Tensors and Operations"></a>Tensors and Operations</h3><p>We can create a matrix. </p><pre class=" language-python"><code class="language-python">mat <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mat<span class="token punctuation">.</span>shapemat<span class="token punctuation">.</span>dtype</code></pre><p>Indexing and all sorts of tensor operations work much like in numpy. </p><p>Some functions have a different name. For instance, tf.reduce_mean/sum/max() is equivalent to np.mean(), np.sum(), np.max(). In TF, we must write tf.transpose(mat) instead of mat.T in numpy. There is a reason. In TF, a new tensor is created with its own copy of the transposed data. </p><p>We can apply TF operations to numpy arrays and vice versa. </p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span>a<span class="token punctuation">)</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>Notice that numpy use 64 bit precision by default, while TF uses 32 bit (which runs faster and uses less RAM). When we create a tensor from a numpy array, set dtype=tf.float32. </p><h3 id="Type-Conversions"><a href="#Type-Conversions" class="headerlink" title="Type Conversions"></a>Type Conversions</h3><p>TF does not do type conversions automatically. Instead, it just raises an exception. For example, you cannot add a float tensor and an integer tensor, or even add a 32-bit float and a 64-bit float. Use tf.cast() to convert types. </p><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>The tf.Tensor values are immutable. So we need tf.Variable to store parameters that may be changed. We can modifiy in place using the assign() method. </p><pre class=" language-python"><code class="language-python">v <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span>assign<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>v<span class="token punctuation">)</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>assign<span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span>scatter_nd_update<span class="token punctuation">(</span>indices<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    updates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Other-Data-Structures"><a href="#Other-Data-Structures" class="headerlink" title="Other Data Structures"></a>Other Data Structures</h3><p>sparse tensors: effieciently represent tensors containing mostly zeros. </p><p>tensor array: lists of tensors.</p><p>ragged tensors: static lists of lists of tensors, where every tensor has the same shape and data type. </p><p>string tensors: byte strings. </p><p>sets: manipulate using tf.sets package.</p><p>queues: FIFO queue, PQ, RandomShuffleQueue.</p><h1 id="Customizing-Models-and-Training-Alg"><a href="#Customizing-Models-and-Training-Alg" class="headerlink" title="Customizing Models and Training Alg"></a>Customizing Models and Training Alg</h1><p>Customize a loss function. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">huber_fn</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    err <span class="token operator">=</span> y_true <span class="token operator">-</span> y_pred    is_small_error <span class="token operator">=</span> tf<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span>    squared_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    linear_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span>    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>where<span class="token punctuation">(</span>is_small_error<span class="token punctuation">,</span> squared_loss<span class="token punctuation">,</span> linear_loss<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span>huber_fn<span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"nadam"</span><span class="token punctuation">)</span></code></pre><h3 id="saving-and-loading-customized-model"><a href="#saving-and-loading-customized-model" class="headerlink" title="saving and loading customized model"></a>saving and loading customized model</h3><p>Saving a model containing a custom loss function works fine. When we load the model, we need to map the names to the objects. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">"mymodel.h5"</span><span class="token punctuation">,</span> custom_objects<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"huber_fn": huber_fn&amp;#125;)</span></code></pre><p>If we create a function that creates a configured loss function, we have to specify the argument. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_huber</span><span class="token punctuation">(</span>threshold<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">huber_fn</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>        err <span class="token operator">=</span> y_true <span class="token operator">-</span> y_pred        is_small_error <span class="token operator">=</span> tf<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&lt;</span> threshold        squared_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        linear_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">*</span>tf<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">-</span> threshold<span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">2</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>where<span class="token punctuation">(</span>is_small_error<span class="token punctuation">,</span> squared_loss<span class="token punctuation">,</span> linear_loss<span class="token punctuation">)</span>    <span class="token keyword">return</span> huber_fnmodel<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span>create_huber<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"nadam"</span><span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">"mymodel.h5"</span><span class="token punctuation">,</span>      custom_objects<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"huber_fn": create_huber(2.0)&amp;#125;)</span></code></pre><p>We can also create a subclass of keras.losses.Loss. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HuberLoss</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>losses<span class="token punctuation">.</span>Loss<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>threshold <span class="token operator">=</span> threshold        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>        err <span class="token operator">=</span> y_true <span class="token operator">-</span> y_pred        is_small_err <span class="token operator">=</span> tf<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>threshold        squared_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        linear_loss <span class="token operator">=</span> self<span class="token punctuation">.</span>threshold <span class="token operator">*</span> tf<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>threshold<span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">2</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>where<span class="token punctuation">(</span>is_small_error<span class="token punctuation">,</span> squared_loss<span class="token punctuation">,</span> linear_loss<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_config</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        base_config <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_config<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;**base_config, "threshold":self.threshold&amp;#125;</span></code></pre><p>The get_config() method returns a dictionary mapping each hyperparameter name to its value. </p><p>We can use any instance of this class when compiling the model.</p><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span>HuberLoss<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">"sgd"</span><span class="token punctuation">)</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">"mymodel.h5"</span><span class="token punctuation">,</span>             custom_objects<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"HuberLoss":HuberLoss&amp;#125;)</span></code></pre><h3 id="Custom-Other-parts"><a href="#Custom-Other-parts" class="headerlink" title="Custom Other parts"></a>Custom Other parts</h3><p>Activation functions, initializers, regularizers, and constraints. </p><p>Losses and metrics are conceptually not the same thing. Losses are used by GD to train a model, so they must be differentiable and their gradients should not be 0 everywhere. In contrast, metrics are used to evaluate a model, so they must be easily interpretable and have 0 gradients everywhere. </p><p>Streaming metric: gradually updated, batch after batch. (e.g.: it manifest overall precision so far instead of current batch).</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HuberMetric</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>Metric<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>threshold <span class="token operator">=</span> threshold        self<span class="token punctuation">.</span>huber_fn <span class="token operator">=</span> create_huber<span class="token punctuation">(</span>threshold<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>total <span class="token operator">=</span> self<span class="token punctuation">.</span>add_weight<span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span><span class="token string">"zeros"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> self<span class="token punctuation">.</span>add_weight<span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span><span class="token string">"zeros"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> sample_weight<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        metric <span class="token operator">=</span> self<span class="token punctuation">.</span>huber_fn<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>total<span class="token punctuation">.</span>assign_add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>metric<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>count<span class="token punctuation">.</span>assign_add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>size<span class="token punctuation">(</span>y_true<span class="token punctuation">)</span><span class="token punctuation">,</span>                                      tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">result</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>total<span class="token operator">/</span>self<span class="token punctuation">.</span>count    <span class="token keyword">def</span> <span class="token function">get_config</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        base_ <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_config<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;**base_, "threshold": self.threshold&amp;#125;</span></code></pre><h3 id="Custom-Layers"><a href="#Custom-Layers" class="headerlink" title="Custom Layers"></a>Custom Layers</h3><p>If we want to create a custom layer without any weights. </p><pre class=" language-python"><code class="language-python">exp_layer <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>If we want to build a custom stateful layer. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">myDense</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> units<span class="token punctuation">,</span> activation<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>units <span class="token operator">=</span> units        self<span class="token punctuation">.</span>activation <span class="token operator">=</span> keras<span class="token punctuation">.</span>activations<span class="token punctuation">.</span>get<span class="token punctuation">(</span>activation<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_input_shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kernel <span class="token operator">=</span> self<span class="token punctuation">.</span>add_weight<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"kernel"</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>batch_input_shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>units<span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span><span class="token string">"glorot_normal"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bias <span class="token operator">=</span> self<span class="token punctuation">.</span>add_wieght<span class="token punctuation">(</span>            name<span class="token operator">=</span><span class="token string">"bias"</span><span class="token punctuation">,</span>             shape<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>units<span class="token punctuation">]</span><span class="token punctuation">,</span>             initializer<span class="token operator">=</span><span class="token string">"zeros"</span>        <span class="token punctuation">)</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>build<span class="token punctuation">(</span>batch_input_shape<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>X@self<span class="token punctuation">.</span>kernel <span class="token operator">+</span> self<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">compute_out_shape</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_input_shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>TensorShape<span class="token punctuation">(</span>batch_input_shape<span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>units<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_config</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        base <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_config<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;**base_config, "units": self.units, </span>               <span class="token string">"activation"</span><span class="token punctuation">:</span> keras<span class="token punctuation">.</span>activations<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span>self<span class="token punctuation">.</span>activation<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>Unless the layer is dynamic, Keras assumes the output shape is the same as the input shape. </p><h3 id="Losses-and-Metrics-Based-on-Model-Internals"><a href="#Losses-and-Metrics-Based-on-Model-Internals" class="headerlink" title="Losses and Metrics Based on Model Internals"></a>Losses and Metrics Based on Model Internals</h3><p>When we want to define losses based on other parts of our model. For example, reconstruction loss is the mean squared difference between the reconstruction and the inputs. By addition this to the mail loss, we will encourage the model to preserve as much info as possible through the hidden layers. It improves generalization.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ReconstructReg</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> output_dim<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> <span class="token punctuation">[</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>output_dim<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_input_shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        n_inputs <span class="token operator">=</span> batch_input_shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>reconstruct <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>n_inputs<span class="token punctuation">)</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>build<span class="token punctuation">(</span>batch_input_shape<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        Z <span class="token operator">=</span> inputs        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>hidden<span class="token punctuation">:</span>            Z <span class="token operator">=</span> layer<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>        reconstruction <span class="token operator">=</span> self<span class="token punctuation">.</span>reconstruct<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>        recon_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>reconstruction<span class="token operator">-</span>inputs<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add_loss<span class="token punctuation">(</span><span class="token number">0.55</span><span class="token operator">*</span>recon_loss<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>Z<span class="token punctuation">)</span></code></pre><p>The build() method creates an extra dense layer which will be used to reconstruct the inputs. The number of inputs is unknown before the build() is called. </p><h3 id="Computing-Gradients-using-Autodiff"><a href="#Computing-Gradients-using-Autodiff" class="headerlink" title="Computing Gradients using Autodiff"></a>Computing Gradients using Autodiff</h3><p>When we need to find the partial derivative w/o too much trouble. </p><pre class=" language-python"><code class="language-python">w1<span class="token punctuation">,</span> w2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tape<span class="token punctuation">:</span>    z <span class="token operator">=</span> f<span class="token punctuation">(</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">)</span>gradients <span class="token operator">=</span> tape<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token punctuation">[</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>To save mem, only put the strict minimum inside the tf.GradientTape() block. The tape is auto erased immediately after we call its gradient(). So, we will get an error if we call it more than once. The solution is to make it permanent and erase it by hand. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span>persistent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tape<span class="token punctuation">:</span>    z <span class="token operator">=</span> f<span class="token punctuation">(</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">)</span>dz_dw1 <span class="token operator">=</span> tape<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>z<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>dz_dw2 <span class="token operator">=</span> tape<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>z<span class="token punctuation">,</span> w2<span class="token punctuation">)</span><span class="token keyword">del</span> tape</code></pre><p>By default, the tape only tracks operations involving variables. Use tape.watch() to specify something we want the tape to track.</p><p>In some cases, we may want to stop gradients from BP through some part of our NN. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">3</span><span class="token operator">*</span>w1 <span class="token operator">+</span> tf<span class="token punctuation">.</span>stop_gradient<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>w1<span class="token operator">*</span>w2<span class="token punctuation">)</span></code></pre><h3 id="Custom-Training-Loops"><a href="#Custom-Training-Loops" class="headerlink" title="Custom Training Loops"></a>Custom Training Loops</h3><p>The fit() method is not flexible enough, e.g.: in wide&amp;deep paper. </p><p>//TODO</p><h1 id="TF-functions-and-graphs"><a href="#TF-functions-and-graphs" class="headerlink" title="TF functions and graphs"></a>TF functions and graphs</h1><p>Convert a python func to a TF func. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">**</span><span class="token number">3</span>tf_cube <span class="token operator">=</span> tf<span class="token punctuation">.</span>function<span class="token punctuation">(</span>cube<span class="token punctuation">)</span>tf_cub<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>Alternatively, we can use tf.function as a decorator. </p><pre class=" language-python"><code class="language-python">@tf<span class="token punctuation">.</span>funciton<span class="token keyword">def</span> <span class="token function">tf_cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">**</span><span class="token number">3</span></code></pre><p>When we write a custom loss function/metric/layer, Keras automatically converts our function into a TF function. </p><p>By default, a TF function generates a new graph for every unique set of input shapes and data types and caches it for subsequent calls. However, if we pass numerical python values, a new graph will be generated for every distinct value. </p><h3 id="AutoGraph-and-Tracing"><a href="#AutoGraph-and-Tracing" class="headerlink" title="AutoGraph and Tracing"></a>AutoGraph and Tracing</h3><p>AutoGraph: Python does not provide any other way to capture control flow statements, so autograph analyzes the functions’ code and outputs an upgraded version of that function. After this, control flow statements will be replaced by TF operations (e.g.: tf.while_loop()). </p><p>Next, TD calls this upgraded function, and passes a symbolic tensor. The function will run in graph mode, meaning each TF operation will add a node in the graph to represent itself and its output tensors. </p><h3 id="TF-function-rules"><a href="#TF-function-rules" class="headerlink" title="TF function rules"></a>TF function rules</h3><p>If we call any external library, including numpy or even standard library, this call will run only during tracing (will not be a part of the graph. </p><p>If our non-TF code has side effects (such as logging or updating a counter), we should not expect these to occur every time we call the TF function. </p><p>We can wrap Python code in a tf.py_function(), but this will hinder performance. In addition, it reduces portability, as the graph will only run on platforms where Python and right libraries are available . </p><p>If the function creates a stateful TF object (e.g.: variable), it must do so only upon the very first call, or else we will get an exception. If you want to assign a new value to the variable, use assign() rather than “=”. Use <code>for i in tf.range(x)</code> rather than <code>for i in range(x)</code>. </p><p>The source code of our python function should be available to TF.</p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands on: 11 training</title>
      <link href="/Blog/2020/06/17/hands-on-11-training/"/>
      <url>/Blog/2020/06/17/hands-on-11-training/</url>
      
        <content type="html"><![CDATA[<h1 id="Vanishing-Exploding-Gradients"><a href="#Vanishing-Exploding-Gradients" class="headerlink" title="Vanishing/Exploding Gradients"></a>Vanishing/Exploding Gradients</h1><p><strong>vanishing gradients</strong></p><p>Gradients often get smaller and smaller as the algorithm progresses down to the lower layers, and this may leave the lower layers’ connection weights unchanged. </p><p><strong>exploding gradients</strong></p><p>Layers get insanely large weight updates and the algorithm diverges. </p><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><p>By default, Keras uses Glorot initialization with a uniform distribution. We can change by setting <strong>kernel_initalizer</strong> parameter.</p><pre class=" language-python"><code class="language-python">Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> kernel_initializer<span class="token operator">=</span><span class="token string">"he_normal"</span><span class="token punctuation">)</span></code></pre><h4 id="Xavier-initialization-Glorot-Initialization"><a href="#Xavier-initialization-Glorot-Initialization" class="headerlink" title="Xavier initialization / Glorot Initialization"></a>Xavier initialization / Glorot Initialization</h4><p>The variance of the outputs of each layer to be equal to the variance of its inputs, and need to guarantee equal variance before and after flowing through a layer in the reverse direction. Actually, it is not possible unless the layer has an equal number of inputs and neurons (fan-in = fan-out). A good compromise will be the connection weights of each layer must be initialized randomly where $fan_{avg} = (fan_{in} + fan_{out})/2$.   </p><p>前一层节点数越多，设定为目标节点的初始值的权重尺度越小。Xavier初始值是以激活函数是线性函数为前提而推导出来的。因为sigmoid函数和tanh函数左右对称，且中央附近可以视作线性函数，所以适合使用Xavier初始值。</p><p>If using logistic activation function:</p><p>Normal distribution with mean 0 and variance $\sigma^2 = 1/fan_{avg}$</p><p>Uniform distribution between -r and r, with $r = \sqrt{\frac{3}{fan_{avg}}}$. </p><h4 id="LeCun-initialization"><a href="#LeCun-initialization" class="headerlink" title="LeCun initialization"></a>LeCun initialization</h4><p>If we replace $fan_{avg}$ with $fan_{in}$ for the formula above, we get LeCun initialization. </p><h4 id="He-Initialization"><a href="#He-Initialization" class="headerlink" title="He Initialization"></a>He Initialization</h4><p>The initialization strategy for ReLU activation function and its variants. </p><h2 id="Nonsaturating-Activation-Function"><a href="#Nonsaturating-Activation-Function" class="headerlink" title="Nonsaturating Activation Function"></a>Nonsaturating Activation Function</h2><h4 id="ReLU-Variants"><a href="#ReLU-Variants" class="headerlink" title="ReLU Variants"></a>ReLU Variants</h4><p>ReLU activation function may suffer from dying ReLUs: keep outputting 0. Instead, we can use leaky ReLU (a small slope for negative values). Setting $\alpha$ to be 0.2 is a good default. Other similar variants include randomized leaky ReLU (where  $\alpha$ is picked randomly), and parametric leaky ReLU ($\alpha$ no longer a hyperparameter, learnt during BP). </p><p>To use leaky ReLU, create a LeakyReLU layer after the layer to be applied</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> kernel_initializer<span class="token operator">=</span><span class="token string">"he_normal"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LeakyReLU<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="Exponential-Linear-Unit-ELU"><a href="#Exponential-Linear-Unit-ELU" class="headerlink" title="Exponential Linear Unit (ELU)"></a>Exponential Linear Unit (ELU)</h4><p>$ ELU(z) = \alpha(exp(z)-1)$, if z &lt; 0. </p><p>It takes on negative values when z&lt;0, which allows the unit to have an average output closer to 0 and helps alleviate the vanishing gradients problem. If $\alpha$ is 1, then the curve is smooth everywhere. </p><h4 id="Scaled-ELU-SELU"><a href="#Scaled-ELU-SELU" class="headerlink" title="Scaled ELU (SELU)"></a>Scaled ELU (SELU)</h4><p>If all hidden layers use the SELU activation function, then the NN will self-normalize, which solves the vanishing/exploding gradients. </p><p>Criteria to use</p><ul><li>input must be standardized</li><li>hidden layers’ weights init with LeCun normal initialization</li><li>architecture is sequential </li><li>all layers are dense</li></ul><p>To use SELU</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"selu"</span><span class="token punctuation">,</span> kernel_initializer<span class="token operator">=</span><span class="token string">"lecun_normal"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>In general, SELU &gt; ELU &gt; leaky ReLU &gt; ReLU &gt; tanh &gt; logistic. Many libraries and hardware accelerators provide ReLU-specific optimizations. Therefore, if speed is priority, choose ReLU. </p><h2 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h2><p>The technique adds an operation in the model just before or after the activation function of each hidden layer. It lets the model learn the optimal scale and mean of each of the layer’s inputs. </p><p>During test time, we will have no way to compute each input’s mean and standard deviation. One solution is to wait until the end of training, then run the whole training set through the NN and compute the mean and std of each input of the BN layer, which can be used during testing. Another solution is to estimate these final statistics by using a moving average. </p><p>In addition, it acts like a regularizer, reducing the need for other regularization techniques. </p><p>Runtime is a little bit slow, but there is some trick to improve the runtime. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"elu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>If adding the BN layers before the activation functions rather than after (shown above), we must remove the activation function from the hidden layers and add them as separate layers after the BN layers. Moreover, since BN layer includes one offset per input, we can remove bias term from previous layer. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> kernel_initalizer<span class="token operator">=</span><span class="token string">"he_normal"</span><span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Activation<span class="token punctuation">(</span><span class="token string">"elu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> kernel_initalizer<span class="token operator">=</span><span class="token string">"he_normal"</span><span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Activation<span class="token punctuation">(</span><span class="token string">"elu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>For hyperparameter, we can tweak momentum. The value should be close to 1. Higher for larger datasets and smaller mini-batches. We can also tweak axis, which determines which axis to be normalized. </p><h2 id="Gradient-Clipping"><a href="#Gradient-Clipping" class="headerlink" title="Gradient Clipping"></a>Gradient Clipping</h2><p>Clip the gradients during backpropagation so that they never exceed some threshold. Often used in RNN. </p><p>We need to set the <strong>clipvalue</strong> or <strong>clipnorm</strong> argument when creating an optimizer. </p><pre class=" language-python"><code class="language-python">optm <span class="token operator">=</span> SGD<span class="token punctuation">(</span>clipvalue<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"mse"</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optm<span class="token punctuation">)</span></code></pre><p>Clip by value may change the direction, even though this works well in practice. For example, a gradient vector is [0.9, 100], and we will get [0.9, 1.0] after clipping shown above. If we do not want to change direction, we need to clip by norm. </p><h1 id="Reusing-Pretrained-Layers"><a href="#Reusing-Pretrained-Layers" class="headerlink" title="Reusing Pretrained Layers"></a>Reusing Pretrained Layers</h1><p>Transfer Learning: speed up training considerably and require significantly less training data. It works best when the inputs have similar low-level features, especially in deep CNN, which tend to learn feature detectors that are much more general in the lower layers. </p><p>The output layer and some upper hidden layers of the original model are less likely to be as useful as the lower layers. The more training data we have, the more layers we can unfreeze. It is useful to reduce the learning rate when we unfreeze reused layers. </p><pre class=" language-python"><code class="language-python">modelA <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">"modelA.h5"</span><span class="token punctuation">)</span>modelB <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>modelA<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>modelB<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>In the code shown above, two models share some layers. So when we train one of them, it will also affect the other. To address the issue, clone the model and then copy the weights. </p><pre><code>copyA = keras.models.clone_model(modelA)copyA.set_weights(modelA.get_weights())</code></pre><p>Since the new output layer was initialized randomly, it will make large errors, and large error gradients may wreck the reused weights. To avoid this, we can freeze the reused layers during the first few epochs. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> layer <span class="token keyword">in</span> modelB<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    layer<span class="token punctuation">.</span>trainable <span class="token operator">=</span> <span class="token boolean">False</span>modelB<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>We can train the model for a few epochs and then unfreeze the reused layers (which requires compiling the model again).  </p><h3 id="Unsupervised-Pretraining"><a href="#Unsupervised-Pretraining" class="headerlink" title="Unsupervised Pretraining"></a>Unsupervised Pretraining</h3><p>If it is cheap to gather unlabeled training data but expensive to label, we can use them to train an unsupervised model, such as an autoencoder or a generative adversarial network (GAN). </p><h3 id="Pretrain-on-an-Auxiliary-Task"><a href="#Pretrain-on-an-Auxiliary-Task" class="headerlink" title="Pretrain on an Auxiliary Task"></a>Pretrain on an Auxiliary Task</h3><p>Train a first NN on an auxiliary task for which we can easily obtain training data.</p><h1 id="Faster-Optimizers"><a href="#Faster-Optimizers" class="headerlink" title="Faster Optimizers"></a>Faster Optimizers</h1><h3 id="Momentum-Optimization"><a href="#Momentum-Optimization" class="headerlink" title="Momentum Optimization"></a>Momentum Optimization</h3><p>It cares about what previous gradients were. The gradient is used for acceleration, not for speed. Momentum is like friction with 0 being high and 1 being low (no friction). Usually, the value is set to 0.9. </p><blockquote><p>Alg: </p><p>$m = \beta m - \eta \nabla_\theta J(\theta)$</p><p>$\theta = \theta + m$</p></blockquote><p>Gradient descent goes down the steep slope quite fast, but it takes a long time to go through valley. Momentum optimization will roll down the valley faster. </p><pre class=" language-python"><code class="language-python">optm <span class="token operator">=</span> SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentm<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span></code></pre><h3 id="Nesterov-Accelerated-Gradient"><a href="#Nesterov-Accelerated-Gradient" class="headerlink" title="Nesterov Accelerated Gradient"></a>Nesterov Accelerated Gradient</h3><p>Also called Nesterov momentum optimization. </p><blockquote><p>Alg: </p><p>$m = \beta m - \eta \nabla_\theta J(\theta + \beta m)$</p><p>$\theta = \theta + m$</p></blockquote><p>The tweak works because in general the momentum vector will point towards the optimum, so it will be slightly more accurate to use the gradient measured a bit farther in that direction. It helps reduce the oscillations and thus NAG converges faster. </p><pre class=" language-python"><code class="language-python">optm <span class="token operator">=</span> SGD<span class="token punctuation">(</span>momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> nesterov<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h3 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h3><blockquote><p>Alg:</p><p>$s = s + \nabla_\theta J(\theta) \odot \nabla_\theta J(\theta)$</p><p>$ \theta = \theta - \eta\nabla_\theta J(\theta) \oslash \sqrt{s+\epsilon}$</p></blockquote><p>The first step accumulates the square of the gradients into the vector s. The second step is almost identical to GD, but the gradient vector is scaled down by a factor. This algorithm decays the learning rate, but it does so faster for steep rather than gentler slops. It is an adaptive learning rate.  It often stops too early when training NN. </p><h3 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h3><p>The algorithm fixes the problem of AdaGrad by accumulating only the gradients from the most recent iterations. </p><blockquote><p>Alg:</p><p>$s = \beta s + (1-\beta)\nabla_\theta J(\theta) \odot \nabla_\theta J(\theta)$</p><p>$ \theta = \theta - \eta\nabla_\theta J(\theta) \oslash \sqrt{s+\epsilon}$</p></blockquote><p>The decay rate $\beta$ is typically set to 0.9. </p><pre class=" language-python"><code class="language-python">optm <span class="token operator">=</span> keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> rho<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span></code></pre><h3 id="Adam-and-Nadam"><a href="#Adam-and-Nadam" class="headerlink" title="Adam and Nadam"></a>Adam and Nadam</h3><p>Adam is similar to both momentum optimization and RMSProp. </p><pre class=" language-python"><code class="language-python">optm <span class="token operator">=</span> keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> beta_1<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> beta_2<span class="token operator">=</span><span class="token number">0.999</span><span class="token punctuation">)</span></code></pre><p>AdaMax replaces the l2 norm with $l_{\infty}$. </p><p>Nadam is Adam optimization plus the Nesterov trick. </p><h3 id="Learning-Rate-Sceduling"><a href="#Learning-Rate-Sceduling" class="headerlink" title="Learning Rate Sceduling"></a>Learning Rate Sceduling</h3><h4 id="Power-scheduling"><a href="#Power-scheduling" class="headerlink" title="Power scheduling"></a>Power scheduling</h4><p>The learning rate drops at each step, and it reduces the lr more and more slowly. </p><pre class=" language-python"><code class="language-python">optm <span class="token operator">=</span> SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> decay<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><h4 id="Exponential-scheduling"><a href="#Exponential-scheduling" class="headerlink" title="Exponential scheduling"></a>Exponential scheduling</h4><p>Set the lr to $\eta(t)=\eta_00.1^{t/s}$. The lr will gradually drop by a factor of 10 every s steps. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exponential_decay</span><span class="token punctuation">(</span>lr0<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exponential_decay_fn</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> lr0<span class="token operator">*</span><span class="token number">0.1</span><span class="token operator">**</span><span class="token punctuation">(</span>epoch<span class="token operator">/</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> exponential_decay_fnexp_decay_fn <span class="token operator">=</span> exponential_decay<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>lr_scheduler <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>LearningRateScheduler<span class="token punctuation">(</span>exp_decay_fn<span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xtrain<span class="token punctuation">,</span> ytrain<span class="token punctuation">,</span> callbacks<span class="token operator">=</span><span class="token punctuation">[</span>lr_scheduler<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="Piecewise-constant-scheduling"><a href="#Piecewise-constant-scheduling" class="headerlink" title="Piecewise constant scheduling"></a>Piecewise constant scheduling</h4><p>Use a constant lr for a number of epochs, then a smaller learning rate for another number of epochs. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">piecewise_fn</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> epoch <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0.01</span>    <span class="token keyword">elif</span> epoch <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0.005</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0.001</span></code></pre><h4 id="Performance-scheduling"><a href="#Performance-scheduling" class="headerlink" title="Performance scheduling"></a>Performance scheduling</h4><p>Measure the validation error every N steps, and reduce the lr by a factor of $\lambda$ when the error stops dropping.</p><pre class=" language-python"><code class="language-python">lr_scheduler <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>ReduceLROnPlateau<span class="token punctuation">(</span>factor<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h4 id="1cycle-scheduling"><a href="#1cycle-scheduling" class="headerlink" title="1cycle scheduling"></a>1cycle scheduling</h4><p> Starts by increasing the initial lr, growing linearly up to maximum learning rate, and then decreases linearly down to initial learning rate, finishing the last few epochs by dropping the rate down by several orders of magnitude. </p><h1 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h1><h3 id="l1-and-l2-norm"><a href="#l1-and-l2-norm" class="headerlink" title="l1 and l2 norm"></a>l1 and l2 norm</h3><p>We often want to apply the same regularizer to all layers. To reduce repeating codes, we can create a thin wrapper for any callable. </p><pre class=" language-python"><code class="language-python">fro functools <span class="token keyword">import</span> partialRegDense <span class="token operator">=</span> partial<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">,</span>                   activation<span class="token operator">=</span><span class="token string">"elu"</span><span class="token punctuation">,</span>                   kernel_regularizer<span class="token operator">=</span>keras<span class="token punctuation">.</span>regularizers<span class="token punctuation">.</span>l2<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     RegDense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     RegDense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     RegDense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h3><p>At training step, every neuron has a probability p of being temporarily dropped out (may be active during next step). After training, neurons don’t get dropped anymore. </p><p>Understand it in this way. A unique NN is generated at each training step, and there are a total of 2^N possible networks. These NN are not independent but different. The resulting NN can be seen as an averaging ensemble of all these smaller NN. In practice, we can apply dropout only to the neurons in the top one to three layers (excluding output layer). </p><p>One important technical detail. We need to multiply each input connection weight by the keep probability (1-p) after training. Alternatively, we can divide each neuron’s output by the keep probability during training. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dropout<span class="token punctuation">(</span>rate<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Dropout<span class="token punctuation">(</span>rate<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Since dropout is only active during training, comparing the training loss and the validation loss can be misleading. Make sure to evaluate the training loss w/o dropout (after training). </p><h4 id="Monte-Carlo-MC-Dropout"><a href="#Monte-Carlo-MC-Dropout" class="headerlink" title="Monte Carlo (MC) Dropout"></a>Monte Carlo (MC) Dropout</h4><ol><li>connects dropout networks and approximate Bayesian inference, giving solid math justification</li><li>MC dropout boosts the performance of any trained dropout model w/o having to modify it</li></ol><pre class=" language-python"><code class="language-python">y_probas <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">[</span>model<span class="token punctuation">(</span>xtest<span class="token punctuation">,</span> training<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">for</span> sample <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>y_prob <span class="token operator">=</span> y_probas<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>Averaging over multiple predictions with dropout on gives us a MC estimate that is generally more reliable. </p><p>If our model contains other layers that behave in a special way during training (e.g.: BatchNormalization), then we should not force training mode like above. Instead, use code below. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MCDropout</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dropout<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> training<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h3 id="Max-Norm-Regularization"><a href="#Max-Norm-Regularization" class="headerlink" title="Max-Norm Regularization"></a>Max-Norm Regularization</h3><p>For each neuron, it constrains the weights of the incoming connections s.t. $||w||_2 \le r$, where r is the max-norm hyperparameter. </p><pre class=" language-python"><code class="language-python">Dense<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> kernel_initializer<span class="token operator">=</span><span class="token string">"he_normal"</span><span class="token punctuation">,</span>     kernel_contraint<span class="token operator">=</span>keras<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>max_norm<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computational Biology</title>
      <link href="/Blog/2020/06/16/computational-biology/"/>
      <url>/Blog/2020/06/16/computational-biology/</url>
      
        <content type="html"><![CDATA[<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://towardsdatascience.com/tagged/stats-ml-life-sciences">https://towardsdatascience.com/tagged/stats-ml-life-sciences</a></li></ul><h1 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h1><h2 id="Genre"><a href="#Genre" class="headerlink" title="Genre"></a>Genre</h2><h3 id="HAC"><a href="#HAC" class="headerlink" title="HAC"></a>HAC</h3><p>Sensitive to noise. </p><h3 id="Centroid-based-clustering"><a href="#Centroid-based-clustering" class="headerlink" title="Centroid-based clustering"></a>Centroid-based clustering</h3><p>K-menas, Gaussian Mixture models. </p><p>Only handle clusters with spherical or ellipsoidal symmetry. </p><h3 id="Graph-based-clustering"><a href="#Graph-based-clustering" class="headerlink" title="Graph-based clustering"></a>Graph-based clustering</h3><p>Spectral, SNN-cliq, Seurat</p><p>Robust for high dimensional data. They use the <strong>distance on a graph</strong>, e.g. the number of shared neighbors, which is more meaningful in high dimensions compared to the Euclidean distance. However, to build the graph this method still uses the Euclidean distance. </p><h3 id="Density-based-clustering"><a href="#Density-based-clustering" class="headerlink" title="Density-based clustering"></a>Density-based clustering</h3><p>Mean-Shift, DBSCAN, OPTICS, HDBSCAN</p><p>They allow clustering without specifying the number of clusters. Cluster shape independent and capture any topology of scRNAseq data. </p><h2 id="Tuning"><a href="#Tuning" class="headerlink" title="Tuning"></a>Tuning</h2><h3 id="HDBSCAN"><a href="#HDBSCAN" class="headerlink" title="HDBSCAN"></a>HDBSCAN</h3><p>Only one hyperparameter <strong>minPts</strong> which is the minimal number of points in a cluster. Tuning by minimizing the amount of unassigned cells. It is relatively fast for large data sets, detects outlying cells, and for each cell it reports a probability of assignment to a cluster. </p><h1 id="Normalize-Single-Cell"><a href="#Normalize-Single-Cell" class="headerlink" title="Normalize Single Cell"></a>Normalize Single Cell</h1><p>The spurious correlation of ratios the genes are not supposed to be correlated but they are after the Library Size Normalization.</p><p>The problem with Library Size Normalization is that the counts across genes for a given sample sum up to 1, i.e. they are not independent any more but constrained, so they become compositional. By constructing compositional data you are no longer in the Euclidean space which traditional Frequentist statistics is based on, since the Euclidean space / distance is the consequence of the Gaussian distribution. In fact, you end up in the Simplex Space where traditional statistical methods are not applicable as the distance between two points is not Euclidean any more but “Euclidean with a constraint” which is the Aitchison distance.</p><p>If you still want to use e.g. PCA on compositional data, you should perform one of the log-ratio transformations for converting the data from the Simplex back to the Euclidean space: additive (alr), center (clr) or isomeric (ilr) log-ratio transforms.</p><h3 id="TPM-Normalization"><a href="#TPM-Normalization" class="headerlink" title="TPM Normalization"></a>TPM Normalization</h3><p>By definition, TPM counts for a given sample sum up to one million, that is a Simplex Space constraint. So TPM counts are not better than Library Size normalized counts as they also suffer from the Simplex Space bias, and one should not naively apply e.g. PCA on those counts. </p><h3 id="Single-Cell"><a href="#Single-Cell" class="headerlink" title="Single Cell"></a>Single Cell</h3><p>A peculiarity of scRNAseq data is that they contain in contrast to bulk RNAseq large amounts of <strong>stochastic zeros</strong> owing to low amounts of RNA per cell and imperfect RNA capture efficiency (<strong>dropout</strong>). Therefore the TMM and DESeq <strong>size factors</strong> may become unreliably <strong>inflated or equal to zero</strong>. Therefore new single cell specific normalization methods were developed accounting for the large amounts of zeros in the scRNAseq data.</p><h1 id="Select-Features-for-OMICs"><a href="#Select-Features-for-OMICs" class="headerlink" title="Select Features for OMICs"></a>Select Features for OMICs</h1><h3 id="Integrative-OMICs"><a href="#Integrative-OMICs" class="headerlink" title="Integrative OMICs"></a>Integrative OMICs</h3><p>Next Generation Sequencing (NGS) technologies. One challenge is that we assume that the OMICs data should have synergistic effects which allows to more accurately model the behavior of biological cells. Another challenge is that combining different types of biological information increases the number of analyzed features while keeping the number of statistical observations (samples) constant. </p><h3 id="Univariate-Feature-Selection"><a href="#Univariate-Feature-Selection" class="headerlink" title="Univariate Feature Selection"></a>Univariate Feature Selection</h3><p>Problems:</p><ol><li>Univariate feature selection does not defeat the Curse of Dimensionality issue since FDR correction is not enough for this purpose, i.e. it is prone to overfitting and has a poor generalization.</li><li>Univariate feature selection does not account for multicollinearity between features, i.e. when features are strongly correlated with each other.</li></ol><h3 id="Multivariate-Feature-Selection"><a href="#Multivariate-Feature-Selection" class="headerlink" title="Multivariate Feature Selection"></a>Multivariate Feature Selection</h3><p>The simplest way to simultaneously account for all explanatory variables in the X matrix would be to put them together into the multiple or multivariate linear model and perform the Ordinary Least Squares (OLS) minimization.</p><p>LASSO is that it can not fully handle multi-collinearity among predictors. If two variables are strongly correlated, LASSO will select only one of them (by chance) and set the coefficient in front of the other one to zero. Sometimes this type of feature selection can be problematic if it happens that the feature that was ignored / omitted has more physical / biological meaning than the one which was selected by LASSO. This problem can be avoided with Ridge penalty, in addition Ridge is much more stable for numerical minimization as it provides a fully convex manifold in the high-dimensional space. However, in ultra high-dimensional spaces Ridge can be too permissive and select many noisy features which might not be desirable. Elastic Net penalty provides a compromise between LASSO and Ridge and is generally preferred and recommended by Machine Learning practitioners. </p><p>Another elegant multivariate feature selection technique is the Partial Least Squares (PLS) regression and discriminant analysis which is also called (by its author) Projection on Latent Structures (PLS).</p><h1 id="Reduce-Dimension-for-Single-Cell"><a href="#Reduce-Dimension-for-Single-Cell" class="headerlink" title="Reduce Dimension for Single Cell"></a>Reduce Dimension for Single Cell</h1><p>Single cell genomics is a high dimensional data with approximately 20 000 dimensions corresponding to the protein coding genes. Usually not all of the genes are equally important for the cellular function, i.e. there are redundant genes which can be eliminated from the analysis in order to simplify the data complexity. </p><p>Single cell data has highly non-linear structure, so PCA does not work well. Typically, single cell data have 60–80% zero elements in the expression matrix. In this way, single cell data are similar to image data where e.g. for the images of hand-written digits MNIST data set we have 86% of pixels having zero intensity.</p><h3 id="Linear-Discriminant-Analysis-LDA"><a href="#Linear-Discriminant-Analysis-LDA" class="headerlink" title="Linear Discriminant Analysis (LDA)"></a>Linear Discriminant Analysis (LDA)</h3><p>A popular linear dimensionality reduction techniques. The linear dimension reduction techniques are good at preserving the global structure of the data (connections between all the data points) while it seems that for single cell data it is more important to keep the local structure of the data.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>discriminant_analysis <span class="token keyword">import</span> LinearDiscriminantAnalysismodel <span class="token operator">=</span> LinearDiscriminantAnalysis<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> priors<span class="token operator">=</span>None<span class="token punctuation">,</span> shrinkage<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">'eigen'</span><span class="token punctuation">,</span> store_covariance<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> tol<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>lda <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>lda<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lda<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>Y<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'viridis'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"LDA1"</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"LDA2"</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>feature_importances <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Gene':np.array(expr.columns)[:-1], </span>                                    <span class="token string">'Score'</span><span class="token punctuation">:</span>abs<span class="token punctuation">(</span>model<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span><span class="token keyword">print</span><span class="token punctuation">(</span>feature_importances<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'Score'</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="tSNE"><a href="#tSNE" class="headerlink" title="tSNE"></a>tSNE</h3><p>Non-linear dimensionality reduction technique. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>manifold <span class="token keyword">import</span> TSNE<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">import</span> PCAX_reduced <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>model <span class="token operator">=</span> TSNE<span class="token punctuation">(</span>learning_rate <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> n_components <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> perplexity <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>tsne <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_reduced<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>tsne<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tsne<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c <span class="token operator">=</span> Y<span class="token punctuation">,</span> cmap <span class="token operator">=</span> <span class="token string">'viridis'</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'tSNE on PCA'</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"tSNE1"</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"tSNE2"</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h4 id="Shortcomings"><a href="#Shortcomings" class="headerlink" title="Shortcomings"></a>Shortcomings</h4><ol><li>does not scale well for rapidly increasing sample sizes in scRNAseq</li><li>does not preserve global data structure</li><li>only for visualization purposes</li><li>performs a non-parametric mapping from high to low dimensions, meaning that it does not leverage features (aka PCA loadings) that drive the observed clustering</li><li>can not work with high-dimensional data directly, Autoencoder or PCA are often used for performing a pre-dimensionality reduction before plugging it into the tSNE</li><li>consumes too much memory</li></ol><h4 id="Tuning-Param"><a href="#Tuning-Param" class="headerlink" title="Tuning Param"></a>Tuning Param</h4><p><strong>Number of PCs</strong></p><p>Reduce initial number of dimensions linearly down to 30-50 latent variables (<strong>initial_dims</strong>) and use this as a new data set for feeding into tSNE. </p><p>We can calculate the p-value of how the observed variance is different from the permuted variance for each PC. </p><p><strong>Optimal Perplexity</strong></p><p>Typical values for the perplexity range between 5 and 50.  A larger / denser data set requires a larger perplexity. However, too large perplexities will lead to one big clump of points without any clustering. Perplexity ~ N^(1/2). </p><p><strong>Number of Iterations</strong></p><p>The optimal number of iterations should provide the largest distance between the data points of ~100 units. Until the plot won’t change much. </p><h3 id="UMAP"><a href="#UMAP" class="headerlink" title="UMAP"></a>UMAP</h3><h4 id="difference-compared-to-tSNE"><a href="#difference-compared-to-tSNE" class="headerlink" title="difference compared to tSNE"></a>difference compared to tSNE</h4><ol><li>UMAP uses exponential probability distribution in high dimensions but not necessarily Euclidean distances like tSNE but rather any distance can be plugged in. </li><li>In addition, the probabilities are not normalized. This saves time for high dim. </li><li>UMAP uses the number of nearest neighbors instead of perplexity.</li><li>UMAP uses a slightly different symmetrization of the high-dimensional probability</li><li>UMAP uses binary cross-entropy (CE) as a cost function instead of the KL-divergence like tSNE does. It is capable of capturing the global data structure in contrast to tSNE that can only model the local structure at moderate perplexity values.</li><li>UMAP uses the Stochastic Gradient Descent (SGD) instead of the regular Gradient Descent (GD) like tSNE / FItSNE, this both speeds up the computations and consumes less memory.</li></ol>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tf</title>
      <link href="/Blog/2020/06/16/tf/"/>
      <url>/Blog/2020/06/16/tf/</url>
      
        <content type="html"><![CDATA[<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://classroom.udacity.com/courses/ud187">https://classroom.udacity.com/courses/ud187</a></li></ul><h1 id="TensorFlow-Introduction"><a href="#TensorFlow-Introduction" class="headerlink" title="TensorFlow Introduction"></a>TensorFlow Introduction</h1><h2 id="Transfer-Learning"><a href="#Transfer-Learning" class="headerlink" title="Transfer Learning"></a>Transfer Learning</h2><h3 id="Load-Data-Set"><a href="#Load-Data-Set" class="headerlink" title="Load Data Set"></a>Load Data Set</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> tensorflow_hub <span class="token keyword">as</span> hub<span class="token keyword">import</span> tensorflow_datasets <span class="token keyword">as</span> tfds</code></pre><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span>xTrain<span class="token punctuation">,</span> xVal<span class="token punctuation">)</span><span class="token punctuation">,</span> info <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span>    <span class="token string">'cats_vs_dogs'</span><span class="token punctuation">,</span>     with_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>     as_supervised<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>     split<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'train[:80%]'</span><span class="token punctuation">,</span> <span class="token string">'train[80%:]'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>num_examples <span class="token operator">=</span> info<span class="token punctuation">.</span>splits<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num_examplesnum_classes <span class="token operator">=</span> info<span class="token punctuation">.</span>features<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num_classes</code></pre><h3 id="Resize-Input-Images"><a href="#Resize-Input-Images" class="headerlink" title="Resize Input Images"></a>Resize Input Images</h3><p>Different pretrained NNs have different required input image size. </p><pre class=" language-python"><code class="language-python">BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span>dim <span class="token operator">=</span> <span class="token number">224</span><span class="token keyword">def</span> <span class="token function">format_image</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>  image <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>dim<span class="token punctuation">,</span> dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255.0</span>  <span class="token keyword">return</span>  image<span class="token punctuation">,</span> labelnum_examples <span class="token operator">=</span> info<span class="token punctuation">.</span>splits<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num_examplestrain_batches <span class="token operator">=</span> xTrain<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>buffer_size<span class="token operator">=</span>num_examples<span class="token operator">//</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>format_image<span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>validation_batches <span class="token operator">=</span> xVal<span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>format_image<span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="Transfer-Learning-from-TensorFlow-Hub"><a href="#Transfer-Learning-from-TensorFlow-Hub" class="headerlink" title="Transfer Learning from TensorFlow Hub"></a>Transfer Learning from TensorFlow Hub</h3><pre class=" language-python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://tfhub.dev/google/tf2-preview/..."</span>extractor <span class="token operator">=</span> hub<span class="token punctuation">.</span>KerasLayer<span class="token punctuation">(</span>url<span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># disable the training so that all weights kept</span>extractor<span class="token punctuation">.</span>trainable <span class="token operator">=</span> <span class="token boolean">False</span>model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>extractor<span class="token punctuation">,</span> layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="Save-Models"><a href="#Save-Models" class="headerlink" title="Save Models"></a>Save Models</h2><p>Usually, use timestamp as part of the file name so that it is unique. </p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>path <span class="token operator">=</span> <span class="token string">"./model_&amp;#123;&amp;#125;.h5"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>int<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span></code></pre><p>Reload the model. </p><pre class=" language-python"><code class="language-python">reloaded <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;path, custom_objects=&amp;#123;'hub.KerasLayer'&amp;#125;&amp;#125;)</span>reloaded<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Export-as-SavedModel"><a href="#Export-as-SavedModel" class="headerlink" title="Export as SavedModel"></a>Export as SavedModel</h2><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>path <span class="token operator">=</span> <span class="token string">"./model_&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>int<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>saved_model<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> path<span class="token punctuation">)</span></code></pre><p>Reload a savedmodel. Notice that the object returned by <code>tf.saved_model.load</code> is not a Keras object. </p><pre class=" language-python"><code class="language-python">reload_md <span class="token operator">=</span> tf<span class="token punctuation">.</span>saved_model<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>reload_keras <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>path<span class="token punctuation">,</span> custom_objects<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'hub.KerasLayer'&amp;#125;)</span></code></pre><p>Download to local. </p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span>zip -r model.zip <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;path&amp;#125;</span></code></pre><h1 id="Time-Series"><a href="#Time-Series" class="headerlink" title="Time Series"></a>Time Series</h1><h2 id="Forecast"><a href="#Forecast" class="headerlink" title="Forecast"></a>Forecast</h2><h3 id="Fixed-Partitioning"><a href="#Fixed-Partitioning" class="headerlink" title="Fixed Partitioning"></a>Fixed Partitioning</h3><p>Split the whole dataset into training, validation, and test period in time sequence. </p><h3 id="Roll-Forward-Partitioning"><a href="#Roll-Forward-Partitioning" class="headerlink" title="Roll-Forward Partitioning"></a>Roll-Forward Partitioning</h3><p>Only use a small subset as training set and move forward every week or 10 days to mimic the real life process. </p><h2 id="Time-Windows"><a href="#Time-Windows" class="headerlink" title="Time Windows"></a>Time Windows</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">## drop_remainder get rid of last few windows that contains less elements</span>data <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataSet<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>window<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> shift<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> drop_remainder<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>flat_map<span class="token punctuation">(</span><span class="token keyword">lambda</span> win<span class="token punctuation">:</span> win<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> win <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## use first few as training data and last one as test data</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> win<span class="token punctuation">:</span> <span class="token punctuation">(</span>win<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>buffer_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## prefetch allows later elements to be prepared while the current one is being processed</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><p>Tuning learning rate is tricky for RNN. If it is too high, the RNN will stop learning; if it is too low, the RNN will converge very slowly. </p><pre class=" language-python"><code class="language-python">lr_schedule <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>LearningRateScheduler<span class="token punctuation">(</span><span class="token keyword">lambda</span> ep<span class="token punctuation">:</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">7</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token punctuation">(</span>e<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token punctuation">)</span>hist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>semilogx<span class="token punctuation">(</span>hist<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"lr"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"loss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>The loss is going up and downs during training, very unpredictable. Not a good idea to use a small number for early stop. </p><pre class=" language-python"><code class="language-python">es <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>EarlyStopping<span class="token punctuation">(</span>patience<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>checkpoint <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>ModelCheckpoint<span class="token punctuation">(</span><span class="token string">"md.h5"</span><span class="token punctuation">,</span> save_best_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> callbacks<span class="token operator">=</span><span class="token punctuation">[</span>es<span class="token punctuation">,</span> checkpoint<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="Stateless-RNN"><a href="#Stateless-RNN" class="headerlink" title="Stateless RNN"></a>Stateless RNN</h3><p>At each training iteration, it starts at a zero state and will drop its state after making prediction. </p><h3 id="Stateful-RNN"><a href="#Stateful-RNN" class="headerlink" title="Stateful RNN"></a>Stateful RNN</h3><p>The first window is placed at the beginning of the series. The final state vector is preserved for the next training batch, which is located immediately after the previous one. </p><p><strong>Benefits</strong></p><ul><li>learn long term patterns</li></ul><p><strong>Drawbacks</strong></p><ul><li>data set is prepared differently</li><li>training can be slow</li><li>consecutive training batches are very correlated, BP may not work well</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">seq_window</span><span class="token punctuation">(</span>series<span class="token punctuation">,</span> window_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    series <span class="token operator">=</span> tf<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>series<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    ds <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span>series<span class="token punctuation">)</span>    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>window<span class="token punctuation">(</span>window_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> shift<span class="token operator">=</span>window_size<span class="token punctuation">,</span> drop_remainder<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>flat_map<span class="token punctuation">(</span><span class="token keyword">lambda</span> w<span class="token punctuation">:</span> w<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>window_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> w<span class="token punctuation">:</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ds<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">## use batch=1</span></code></pre><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>SimpleRNN<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> batch_input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>SimpleRNN<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>We need manually set the state to zero state at the beginning of each epoch. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResetState</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>Callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">on_epoch_begin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> logs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>reset_states<span class="token punctuation">(</span><span class="token punctuation">)</span>reset_ <span class="token operator">=</span> ResetState<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>callbacks<span class="token operator">=</span><span class="token punctuation">[</span>es<span class="token punctuation">,</span> checkpoint<span class="token punctuation">,</span> reset_<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p>Forget Gate: learn when to forget/preserve</p><p>Input Gate: output 1, output  0 </p><p>Output Gate: </p><img src="lstm.png"><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                      stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> batch_input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><p>We can also use 1D Conv Net in time series prediction. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv1D<span class="token punctuation">(</span>filters<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                       strides<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"causal"</span><span class="token punctuation">,</span>                       activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span>                       input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>Small dilation let layers learn short term patterns, while large dilation ley layers learn long term patterns. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>InputLayer<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> dilation <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>        keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv1D<span class="token punctuation">(</span>dilation_rate<span class="token operator">=</span>dilation<span class="token punctuation">)</span>    <span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv1D<span class="token punctuation">(</span>filters<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h1><h2 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>text <span class="token keyword">import</span> Tokenizer<span class="token comment" spellcheck="true"># maximum number of words to keep, based on word frequency. </span><span class="token comment" spellcheck="true"># Only the most common `num_words-1` words will be kept.</span>tok <span class="token operator">=</span> Tokenizer<span class="token punctuation">(</span>num_words<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> oov_token<span class="token operator">=</span><span class="token string">"&lt;OOV>"</span><span class="token punctuation">)</span>tok<span class="token punctuation">.</span>fit_on_texts<span class="token punctuation">(</span>sentences<span class="token punctuation">)</span>word_idx <span class="token operator">=</span> tok<span class="token punctuation">.</span>word_index <span class="token comment" spellcheck="true"># a dictionary</span></code></pre><p><strong>OOV token</strong></p><p>Words that do not appear in dictionary. </p><h2 id="Text-to-Sequences"><a href="#Text-to-Sequences" class="headerlink" title="Text to Sequences"></a>Text to Sequences</h2><p>Use padding and truncating to make sequences same length. </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>sequence <span class="token keyword">import</span> pad_sequencesseq <span class="token operator">=</span> tok<span class="token punctuation">.</span>texts_to_sequences<span class="token punctuation">(</span>sentences<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># by default, seqs are trucated or padded from the start</span>padded <span class="token operator">=</span> pad_sequences<span class="token punctuation">(</span>seq<span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'post'</span><span class="token punctuation">,</span> truncating<span class="token operator">=</span><span class="token string">'post'</span><span class="token punctuation">)</span></code></pre><h2 id="Word-Embeddings"><a href="#Word-Embeddings" class="headerlink" title="Word Embeddings"></a>Word Embeddings</h2><p>Embeddings are clusters of vectors (represent a given word) in high dimensional space. </p><p><strong>Benefits</strong></p><ul><li>easy to compute</li><li>can be visualized</li></ul><p><strong>Drawbacks</strong></p><ul><li>fail to consider the order</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Embeddingmodel <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">,</span> input_length<span class="token operator">=</span>max_length<span class="token punctuation">)</span><span class="token punctuation">,</span>     Flattern<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>In this model, <code>Flattern()</code> can be replaced by <code>GlobalAveragePooling1D()</code>. Their function is to connect Embedding layer with Dense layer. </p><h2 id="Subword"><a href="#Subword" class="headerlink" title="Subword"></a>Subword</h2><p><strong>Benefits</strong></p><ul><li>subwords are more likely to appear in the original dataset</li></ul><p><strong>Drawbacks</strong></p><ul><li>the meaning may be ambiguous </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow_datasets <span class="token keyword">as</span> tfdsvocab_size <span class="token operator">=</span> <span class="token number">1000</span>tokenizer <span class="token operator">=</span> tfds<span class="token punctuation">.</span>features<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SubwordTextEncoder<span class="token punctuation">.</span>build_from_corpus<span class="token punctuation">(</span>sentences<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> max_subword_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h2 id="RNN-1"><a href="#RNN-1" class="headerlink" title="RNN"></a>RNN</h2><p>Text can be affected by words both before or after them. </p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    Embedding<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Bidirectional<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Bidirectional<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Dense<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>GLUE</strong></p><p>General Language Understanding Evaluation benchmark</p><p>a collection of resources for training, evaluating, and analyzing NL understanding systems</p><h2 id="Gated-Recurrent-Unit-GRU"><a href="#Gated-Recurrent-Unit-GRU" class="headerlink" title="Gated Recurrent Unit (GRU)"></a>Gated Recurrent Unit (GRU)</h2><p>has reset gate and update gate</p><p>similar to LSTM but does not maintain cell state</p><h2 id="Text-Generation"><a href="#Text-Generation" class="headerlink" title="Text Generation"></a>Text Generation</h2><p>Predict the next word in a sequence. </p><ul><li>consider memory and output size constraints</li><li>add/subtract from layer sizes or embedding dimensions</li><li>use <code>np.random.choice</code> with the prob for more variance in predicted outputs</li></ul>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>math</title>
      <link href="/Blog/2020/06/14/math/"/>
      <url>/Blog/2020/06/14/math/</url>
      
        <content type="html"><![CDATA[<h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><ol><li>考虑int溢出，除数为0，数字不能以0开头（0除外）等特殊情况。</li><li>考虑gcd，lcm</li><li>考虑二分搜索</li></ol><h2 id="Fast-Power"><a href="#Fast-Power" class="headerlink" title="Fast Power"></a>Fast Power</h2><p>$x =  a * b^n$, n is a positive integer, a and b can be integers or matrices</p><p>algorithm: fast power by squaring</p><p>time: O(log n)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> a    <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> x <span class="token operator">*</span> b        b <span class="token operator">=</span> b <span class="token operator">*</span> b        n <span class="token operator">=</span> n <span class="token operator">>></span> <span class="token number">1</span>    <span class="token keyword">return</span> x</code></pre><h2 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h2><ul><li>善用rand.nextInt()，实质在考察概率</li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><ul><li>找不同或出现奇数次的数，一定会用到异或</li><li>注意java中右移和不带符号右移</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/Blog/2020/06/11/linux/"/>
      <url>/Blog/2020/06/11/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Cmd"><a href="#Cmd" class="headerlink" title="Cmd"></a>Cmd</h1><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>ls -l</code> # list mode  </p><p><code>ls -la</code> # list + all hidden files<br><code>ls -lh</code> # human readable size  </p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p><code>man pwd</code>  # open manual  </p><p><code>man -h</code>  # find for help  </p><p><code>grep --help</code>  # in more details  </p><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p><code>rm -r dir1</code>  recursively delete dir1 and all dirs and files under dir1  </p><h2 id="file-contents"><a href="#file-contents" class="headerlink" title="file contents"></a>file contents</h2><h3 id="print-contents"><a href="#print-contents" class="headerlink" title="print contents"></a>print contents</h3><p><code>cat a.txt b.txt</code> # print in sequence<br><code>cat &lt; a.txt</code>  # read from stdin<br><code>head a.txt</code>  # first 10 line<br><code>tail a.txt</code>  # last 10 line<br><code>head a.txt -n 5</code> # first 5 line<br><code>less a.txt</code>  # read only version of vi</p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p><code>/ str</code>  # press n to find next, shift+n to find previous one<br><code>grep -n sim  </code></p><h3 id="word-count"><a href="#word-count" class="headerlink" title="word count"></a>word count</h3><p><code>wc </code></p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="rediret"><a href="#rediret" class="headerlink" title="rediret"></a>rediret</h3><p><code>&gt; </code># rediret to a file<br><code>&gt;&gt; </code># append to a file</p><h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><p><code>man less | grep sim | grep That &gt; that.txt</code>  </p><h2 id="player"><a href="#player" class="headerlink" title="player"></a>player</h2><h3 id="conversion"><a href="#conversion" class="headerlink" title="conversion"></a>conversion</h3><p><code>ffmpeg -i bad_appple.mp4 bad_appple_h264.mp4</code>  </p><h3 id="player-1"><a href="#player-1" class="headerlink" title="player"></a>player</h3><p><code>mplayer -vo caca -quiet bad_apple_h264.mp4</code>  </p><h1 id="script"><a href="#script" class="headerlink" title="script"></a>script</h1><h2 id="execute-python3-script"><a href="#execute-python3-script" class="headerlink" title="execute python3 script"></a>execute python3 script</h2><p>add following code to the script:  </p><pre><code>#!/usr/bin/env python3</code></pre><p>run on cmd line:  </p><p><code>&gt; chmod +x my_echo.py</code> # add execution authorization  </p><p><code>PATH=$PATH:$PWD</code> # even in other dir can still execute it  </p><p><code>which python3</code> # the root dir for python3</p><h2 id="change-mode"><a href="#change-mode" class="headerlink" title="change mode"></a>change mode</h2><p><code>chmod 740 foo</code> owner, group, others; default 640; read=4, write=2, execute=1  </p><h1 id="Event-Processing"><a href="#Event-Processing" class="headerlink" title="Event Processing"></a>Event Processing</h1><p>“/dev/null”是设备文件，丢弃所有写入数据但返回写入成功。</p><pre><code>cat *.pgn &gt; /dev/null是设备文件，丢弃所有写入数据但返回写入成功。</code></pre><p>使用time命令。 读取速度测试，文件处理速度上线。</p><h2 id="Create-Pipe"><a href="#Create-Pipe" class="headerlink" title="Create Pipe"></a>Create Pipe</h2><pre><code>cat *.pgn | grep &quot;result&quot; | sort | uniq -c</code></pre><ul><li>sort<br>会把数据读入内存，若发不下则写入临时文件。<br>time: O(nlogn), space: O(n)  </li><li>uniq -c<br>统计每个独立行出现次数，仅对已排序文本有效。<br>time: O(n), space: O(1)  </li></ul><h2 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h2><p>domain-specific language. </p><pre><code>cat *.pgn | grep &quot;result&quot; | awk &#39;&#123;split($0, a, &quot;-&quot;); res = substr(a[1], length(a[1]), 1); if (res == 1) white++;if (res == 0) black++;&#125; END &#123;print white+black, white, black&#125;&#39;</code></pre><p>$0输入行<br>split( , , “-“)按-分割  </p><p>substr(a[1], length(a[1]), 1)取出最后一个字符<br>time: O(n), space: O(1)  </p><h2 id="Parellel-Programming"><a href="#Parellel-Programming" class="headerlink" title="Parellel Programming"></a>Parellel Programming</h2><p>管道中命令并行执行。  </p><ul><li>xargs -n1 -P8 每一次最多取1个参数，最多8个命令同时执行   </li></ul><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h3 id="Stress"><a href="#Stress" class="headerlink" title="Stress"></a>Stress</h3><p>给系统增加负载，进行压力测试</p><pre class=" language-shell"><code class="language-shell">-t/--timeout N # N秒后超时-c/--cpu N # 孵化N个worker，死循环运行sqrt()-i/--io N # 孵化N个worker，死循环运行sync()-m/--vm N # 孵化N个worker，死循环运行malloc()&free()-d/--hdd N # 孵化N个worker，死循环运行write()&unlink()stress -c 16 </code></pre><h3 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h3><p>显示或更新排序过的进程信息，默认按照cpu占用率排序。top可以持续的监视资源消耗情况。top还可以操作进程，如改变优先级(命令r)和关闭进程(命令k)。</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>显示进程状态（ps看到的是命令执行瞬间的进程信息）。默认只显示当前用户有控制终端的进程。</p><pre class=" language-shell"><code class="language-shell">ps aux # 显示所有进程ps -l # 显示pid和ppidps aux | grep Chrome | wc -l</code></pre><h3 id="Kill"><a href="#Kill" class="headerlink" title="Kill"></a>Kill</h3><pre class=" language-shell"><code class="language-shell">kill -signal_number/-signal_name PIDkill PID # 空格分隔多个进程kill -9/-KILL PID # 强力杀进程killall bash # 按照名字终止进程</code></pre><h3 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h3><p>ctrl+C是发送SIGINT中断信号。</p><p>ctrl+Z发送SIGTSIP停止信号。进程还存在，放到后台挂起，打开的端口仍然被占用。</p><h3 id="前后台"><a href="#前后台" class="headerlink" title="前后台"></a>前后台</h3><pre class=" language-shell"><code class="language-shell">& # 在后台运行进程（加在命令最后）jobs # 显示从当前终端启动的命令 fg %1 # 把后台进程放到前台，后面的数字是jobs中的数字bg # 继续被挂起的后台进程</code></pre>]]></content>
      
      
      <categories>
          
          <category> app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dl_intro</title>
      <link href="/Blog/2020/05/21/dl-intro/"/>
      <url>/Blog/2020/05/21/dl-intro/</url>
      
        <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>本篇为斋藤康毅先生所编写《深度学习入门：基于python的理论和实现》中文译本的笔记。书中所附源码可见<a href="https://github.com/hguomin/deep-learning-from-scratch">Github Repo</a>。</p><h1 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h1><ol><li><p>接受多个输入信号，输出一个信号。信号只有0/1两种取值。</p></li><li><p>神经元会计算输入信号的总和(经过加权)，当总和超过阈值(θ)时，会输出1，这也被称为神经元被激活。</p></li><li><p>将阈值移到等号的另一边，行成b+w1x1+w2x2&gt;0形式的式子。b被称为<strong>偏置</strong>。</p></li><li><p>偏置和权重的作用不相同。权重是控制输入信号的参数，偏置是调整神经元被激活的容易程度的参数。</p></li><li><p>单层感知机的局限性是只能表示有一条直线分割的空间(线性空间)。</p></li></ol><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><ol><li><p>引入新函数h(x)改写上述公式</p><p>y = h(b+w1x1+w2x2). h(x) = 0, if x&lt;=0; h(x) = 1, if x&gt;0.</p><p>h(x)被称为激活函数。</p></li><li><p>阶跃函数以阈值为界，一旦输入超过阈值，就切换输出。感知机中使用阶跃函数作为激活函数。</p></li><li><p>最经常使用的激活函数是sigmoid函数。$h(x) = \frac{1}{1+exp(-x)}$。sigmoid函数与阶跃函数相比更加平滑。但两者都是非线性函数。</p></li><li><p>ReLU函数</p><p>h(x) = x, if x&gt;0; h(x) = 0, if x &lt;= 0</p></li><li><p>softmax函数</p><p>$y_k = \frac{exp(a_{k})}{\sum_{i = 1}^{n}{exp(a_{i})}}$</p><p>直接按照公式实现容易出现溢出问题。改进方法：</p><p>$y_k = \frac{C\ exp(a_{k})}{C\sum_{i = 1}^{n}{exp(a_{i})}}$ = $\frac{exp(a_k+logC)}{\sum_{i = 1}^{n}{exp(a_{i} + logC)}}$</p><p>logC可以使用任意值，一般使用输入信号中最大值。</p></li><li><p><strong>特征量</strong>：从输入数据中准确提取本质数据的转换器。图像的特征量通常表示为向量的形式。</p></li><li><p>两种针对机器学习任务的方法：</p><p>(a) 人想到的特征量 -&gt; 机器学习(SVM/KNN)</p><p>(b) 神经网络(深度学习)</p></li><li><p><strong>损失函数</strong>：神经网络寻找最优权重参数的指标。一般使用均方误差和交叉熵误差。</p></li><li><p>均方误差</p><p>$E = \frac{1}{2}\sum_{k}^{}{(y_{k} - t_{k})}^{2}$</p><p>y<del>k</del>是神经网络的输出，t<del>k</del>是监督数据(训练数据)，k是数据维数。</p></li><li><p>交叉熵误差</p><p>$E = -\sum_{k}{t_k log({y_k})}$</p><p>${t_k}$是正确解标签，只有正确解标签的索引为1，其他均为0。</p><p>使用代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cross_entropy_error</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    delta <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">7</span>    <span class="token comment" spellcheck="true">#log(0)是-inf，添加微小值进行保护</span>    <span class="token keyword">return</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>t<span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y<span class="token operator">+</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>小批量学习(<strong>mini-batch</strong>)：从全部数据中选出一部分，作为全部数据的近似。</p><p>在python中可以使用np.random.choice(train_size, batch_size)随机抽取。</p><p>mini-batch版交叉熵误差代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cross_entropy_error</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> y<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> t<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    y <span class="token operator">=</span> y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    delta <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">7</span>    <span class="token keyword">return</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>t<span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y<span class="token operator">+</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>batch_size</code></pre><p>如果监督数据是标签形式(未经过独热编码)，可以将log()中的y改成<code>y[np.arange(batch_size), t]</code>。</p></li><li><p>引入损失函数的原因：在神经网络的学习中，寻找最优参数时，要寻找使损失函数的值尽可能小的参数。需要计算参数的梯度，然后以次为指引，逐步更新参数的值。不能把识别精度作为指标，否则参数的梯度在绝大多数地方会变为0。调参后，损失函数可以发生连续性的变化，而识别精度是离散的值。</p></li><li><p>梯度：由全部变量的偏导数汇总而成的向量称为梯度。</p><p>$x = x - \eta\frac{\partial f}{\partial x}$</p><p>$\eta$表示更新量，称为学习率。</p><p>梯度下降法代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">grad_descent</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> init_x<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> init_x    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>        grad <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>f<span class="token punctuation">,</span> x<span class="token punctuation">)</span>        x <span class="token operator">-=</span> lr <span class="token operator">*</span> grad    <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">numerical_gradient</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    h <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span>    grad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成和x形状相同的数组</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">+</span> h <span class="token comment" spellcheck="true">#f(x+h)</span>        fxh1 <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">-</span> h <span class="token comment" spellcheck="true">#f(x-h)</span>        fxh2 <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        grad<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fxh1 <span class="token operator">-</span> fxh2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>h<span class="token punctuation">)</span>        x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    <span class="token keyword">return</span> grad</code></pre></li></ol><ol start="14"><li><p>像学习率这样的参数称为<strong>超参数</strong>。这是一种和神经网络的参数（权重和偏置）性质不同的参数。相对于神经网络的权重参数是通过训练数据和学习算法自动获得的，超参数则是人工设定的。一般来说，超参数需要尝试多个值，以便找到一种可以使学习顺利进行的设定。</p></li><li><p><strong>随机梯度下降法</strong>(SGD)：对随机选择的数据进行的梯度下降法。</p></li><li><p>一个epoch表示学习中所有训练数据军备使用过一次时的更新次数。</p></li><li><p>正向传播是从计算图出发点到结束点的传播。而反向传播将局部导数向正方向的反方向传递。传递这个局部导数的原理，是基于链式法则（chain rule）的。</p></li><li><p>乘法结点：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MulLayer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> None        self<span class="token punctuation">.</span>y <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        <span class="token keyword">return</span> x<span class="token operator">*</span>y    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> dout <span class="token operator">*</span> self<span class="token punctuation">.</span>y        dy <span class="token operator">=</span> dout <span class="token operator">*</span> self<span class="token punctuation">.</span>x        <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dy</code></pre></li></ol><ol start="19"><li><p>加法结点：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddLayer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x<span class="token operator">+</span>y    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> dout <span class="token operator">*</span> <span class="token number">1</span>        dy <span class="token operator">=</span> dout <span class="token operator">*</span> <span class="token number">1</span>        <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dy</code></pre></li></ol><ol start="20"><li><p>激活函数的ReLU层：</p><p>$$<br>\frac{\partial f}{\partial x} = \left { \begin{matrix}<br>1,\ \  x &gt; 0 \\<br>0,\ \  x \leq 0 \\<br>\end{matrix} \right.<br>$$</p></li><li><p>激活函数的Sigmoid层：</p><p>y = $\frac{1}{1 + exp( - x)}$</p></li><li><p>神经网络的正向传播中进行的矩阵的乘积运算在几何学领域被称为放射变换。</p></li><li><p>Affine层：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Affine</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>W <span class="token operator">=</span> W        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b        self<span class="token punctuation">.</span>x <span class="token operator">=</span> None        self<span class="token punctuation">.</span>dW <span class="token operator">=</span> None        self<span class="token punctuation">.</span>db <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        out <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>b        <span class="token keyword">return</span> out    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W<span class="token punctuation">.</span>T<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dW <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">.</span>T<span class="token punctuation">,</span> dout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dx</code></pre></li></ol><ol start="24"><li><p>神经网络中进行的处理有推理（inference）和学习两个阶段。神经网络的推理通常不使用Softmax层。神经网络中未被正规化的输出结果有时被称为“得分”。也就是说，当神经网络的推理只需要给出一个答案的情况下，因为此时只对得分最大值感兴趣，所以不使用Softmax层。不过，神经网络的学习阶段则需要Softmax层。</p></li><li><p>Softmax-with-Loss层：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SoftmaxWithLoss</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>loss <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 损失</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># softmax的输出</span>        self<span class="token punctuation">.</span>t <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># 监督数据（one-hot vector）</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>t <span class="token operator">=</span> t        self<span class="token punctuation">.</span>y <span class="token operator">=</span> softmax<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loss <span class="token operator">=</span> cross_entropy_error<span class="token punctuation">(</span>self<span class="token punctuation">.</span>y<span class="token punctuation">,</span> self<span class="token punctuation">.</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>loss    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        batch_size <span class="token operator">=</span> self<span class="token punctuation">.</span>t<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dx <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>y <span class="token operator">-</span> self<span class="token punctuation">.</span>t<span class="token punctuation">)</span> <span class="token operator">/</span> batch_size        <span class="token keyword">return</span> dx</code></pre></li></ol><ol start="26"><li><p><strong>梯度确认</strong>：指确认数值微分求出的梯度结果和误差反向传播法求出的结果是否一致的操作。数值微分的优点是实现简单，因此，一般情况下不太容易出错。而误差反向传播法的实现很复杂，容易出错。</p></li><li><p>优化参数</p><p><strong>SGD</strong>低效的根本原因是梯度的方向并没有指向最小值的方向。</p><p><strong>学习率衰减</strong>：随着学习的进行，学习率逐渐减小。</p><p><strong>动量法Momentum</strong></p><p>v = αv - η$\frac{\partial L}{\partial W}$</p><p>W = W + v</p><p>代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Momentum</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>momentum <span class="token operator">=</span> momentum        self<span class="token punctuation">.</span>v <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">,</span> grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>v <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>momentum<span class="token operator">*</span>self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>lr<span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span></code></pre></li></ol><pre><code>**调整法AdaGrad**$h = h + \frac&#123;\partial L&#125;&#123;\partial W&#125;$$\odot \frac&#123;\partial L&#125;&#123;\partial W&#125;$$ W = W - \eta\frac&#123;1&#125;&#123;\sqrt&#123;h&#125;&#125;\frac&#123;\partial L&#125;&#123;\partial W&#125;$代码实现：```pythonclass AdaGrad:    def __init__(self, lr=0.01):    self.lr = lr    self.h = None    def update(self, params, grads):        if self.h is None:            self.h = &amp;#123;&amp;#125;        for key, val in params.items():            self.h[key] = np.zeros_like(val)        for key in params.keys():            self.h[key] += grads[key] * grads[key]            params[key] -= self.lr * grads[key] / (np.sqrt(self.h[key])+1e-7)```**融合法Adam**Adam会设置3个超参数。一个是学习率（论文中以α出现），另外两个是一次momentum系数β1和二次momentum系数β2。根据论文，标准的设定值是β1为0.9，β2为0.999。设置了这些值后，大多数情况下都能顺利运行。</code></pre><ol start="28"><li><p>权重的初始值</p><p><strong>权值衰减</strong>：以减小权重参数的值为目的进行学习的方法。可抑制过拟合的发生。</p><p>权重初始值：设置较小的值，比如标准差为0.01的正态分布。</p><p><strong>梯度消失</strong>：使用的sigmoid函数是S型函数，随着输出不断地靠近0（或者靠近1），它的导数的值逐渐接近0。因此，偏向0和1的数据分布会造成反向传播中梯度的值不断变小，最后消失。</p><p><strong>表现力受限</strong>：多个神经元输出几乎相同的值。</p><p><strong>Xavier初始值</strong>：前一层节点数越多，设定为目标节点的初始值的权重尺度越小。Xavier初始值是以激活函数是线性函数为前提而推导出来的。因为sigmoid函数和tanh函数左右对称，且中央附近可以视作线性函数，所以适合使用Xavier初始值。</p><p>w = np.random.randn(node_num, node_num) / np.sqrt(node_num)</p><p><strong>He初始值</strong>：当激活函数使用ReLU时，一般推荐使用ReLU专用的初始值，也就是Kaiming<br>He等人推荐的初始值。当前一层的节点数为n时，He初始值使用标准差为的高斯分布。</p></li><li><p><strong>Batch Normalization</strong>算法：以进行学习时的mini-batch为单位，按mini-batch进行正规化。</p><p>优点：可以增大学习率，不过度依赖初始值，抑制过拟合。</p></li><li><p>过拟合</p><p>产生原因：模型拥有大量参数，表现力强；训练数据少。</p><p><strong>Dropout</strong>方法：在学习的过程中随机删除神经元的方法。训练时，随机选出隐藏层的神经元，然后将其删除。被删除的神经元不再进行信号的传递。训练时，每传递一次数据，就会随机选择要删除的神经元。然后，测试时，虽然会传递所有的神经元信号，但是对于各个神经元的输出，要乘上训练时的删除比例后再输出。</p><p>代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dropout</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dropout_ratio<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>dropout_ratio <span class="token operator">=</span> dropout_ratio        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> train_flg<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> train_flg<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">></span> self<span class="token punctuation">.</span>dropout_ratio            <span class="token keyword">return</span> x <span class="token operator">*</span> self<span class="token punctuation">.</span>mask        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>dropout_ratio<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dout <span class="token operator">*</span> self<span class="token punctuation">.</span>mask</code></pre></li></ol><pre><code>集成学习：让多个模型单独进行学习，推理时再取多个模型的输出的平均值。Dropout理解为，通过在学习过程中随机删除神经元，从而每一次都让不同的模型进行学习。并且，推理时，通过对神经元的输出乘以删除比例（比如，0.5等），可以取得模型的平均值。也就是说，可以理解成，Dropout将集成学习的效果（模拟地）通过一个网络实现了。</code></pre><ol start="31"><li><p>超参数的验证</p><p>用于调整超参数的数据，一般称为验证数据(validation data)。</p><p>分割数据集：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打乱训练数据</span>x_train<span class="token punctuation">,</span> t_train <span class="token operator">=</span> shuffle_dataset<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>t_train<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分割验证数据</span>validation_rate <span class="token operator">=</span> <span class="token number">0.20</span>validation_num <span class="token operator">=</span> int<span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> validation_rate<span class="token punctuation">)</span>x_val <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token punctuation">:</span>validation_num<span class="token punctuation">]</span>t_val <span class="token operator">=</span> t_train<span class="token punctuation">[</span><span class="token punctuation">:</span>validation_num<span class="token punctuation">]</span>x_train <span class="token operator">=</span> x_train<span class="token punctuation">[</span>validation_num<span class="token punctuation">:</span><span class="token punctuation">]</span>t_train <span class="token operator">=</span> t_train<span class="token punctuation">[</span>validation_num<span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre></li></ol><pre><code>超参数优化步骤：设定超参数的范围。从设定的超参数范围中随机采样。使用步骤1中采样到的超参数的值进行学习，通过验证数据评估识别精度（但是要将epoch设置得很小）。重复步骤1和步骤2（100次等），根据它们的识别精度的结果，缩小超参数的范围。</code></pre><ol start="32"><li><p>卷积神经网络(Convolutional Neural Network，<strong>CNN</strong>)</p><p>之前介绍的神经网络中，相邻层的所有神经元之间都有连接，这称为<strong>全连接</strong>(fully-connected)。而基于CNN的网络新增了卷积层(Convolution)层和池化层(Pooling)层。</p><p>全连接层存在的问题：数据的形状被“忽视”了。比如，输入数据是图像时，图像通常是高、长、通道方向上的3维形状。但是，向全连接层输入时，需要将3维数据拉平为1维数据。</p><p>另外，CNN中，有时将卷积层的输入输出数据称为特征图(feature<br>map)。其中，卷积层的输入数据称为输入特征图(input feature<br>map)，输出数据称为输出特征图(output feature map)。</p></li><li><p>卷积运算</p><p>对于输入数据，卷积运算以一定间隔滑动滤波器的窗口并应用。将各个位置上滤波器的元素和输入的对应元素相乘，然后再求和（有时将这个计算称为<strong>乘积累加运算</strong>）。</p></li><li><p>填充</p><p>在进行卷积层的处理之前，有时要向输入数据的周围填入固定的数据（比如0等），这称为填充(padding)。</p><p>使用填充主要是为了调整输出的大小。比如，对大小为(4,4)的输入数据应用(3,3)的滤波器时，输出大小变为(2,2)，相当于输出大小比输入大小缩小了2个元素。这在反复进行多次卷积运算的深度网络中会成为问题。为什么呢？因为如果每次进行卷积运算都会缩小空间，那么在某个时刻输出大小就有可能变为1，导致无法再应用卷积运算。为了避免出现这样的情况，就要使用填充。</p></li><li><p>步幅</p><p>应用滤波器的位置间隔称为<strong>步幅</strong>(stride)。增大步幅后，输出大小会变小。而增大填充后，输出大小会变大。</p><p>假设输入大小为(H,W)，滤波器大小为(FH,FW)，输出大小为(OH,OW)，填充为P，步幅为S。</p><p>OH = (H+2P -FH)/S + 1</p><p>OW = (H+2P -FW)/S + 1</p><p>虽然只要代入值就可以计算输出大小，但是所设定的值必须使式中的和分别可以除尽。当输出大小无法除尽时（结果是小数时），需要采取报错等对策。顺便说一下，根据深度学习的框架的不同，当值无法除尽时，有时会向最接近的整数四舍五入，不进行报错而继续运行。</p></li><li><p>三维数据的卷积运算</p><p>除了高、长方向之外，还需要处理通道方向。需要注意的是，在3维数据的卷积运算中，输入数据和滤波器的通道数要设为相同的值。滤波器大小可以设定为任意值（不过，每个通道的滤波器大小要全部相同）。</p><p>如果要在通道方向上也拥有多个卷积运算的输出，就需要用到多个滤波器（权重）。通过应用FN个滤波器，输出特征图也生成了FN个。如果将这FN个特征图汇集在一起，就得到了形状为(FN,OH,OW)的方块。将这个方块传给下一层，就是CNN的处理流。作为4维数据，滤波器的权重数据要按(output_channel, input_channel, height, width)的顺序书写。</p></li><li><p>池化层</p><p>池化是缩小高、长方向上的空间的运算。比如将2×2的区域集约成1个元素的处理，缩小空间大小。除了Max池化之外，还有Average池化等。相对于Max池化是从目标区域中取出最大值，Average池化则是计算目标区域的平均值。在图像识别领域，主要使用Max池化。</p><p>特征：没有要学习的参数；通道数不发生变化；对微小的位置变化具有鲁棒性</p></li><li><p>代码实现</p><p>im2col是一个函数，将输入数据展开以适合滤波器（权重）。im2col这个名称是“image to column”的缩写，翻译过来就是“从图像到矩阵”的意思。Caffe、Chainer等深度学习框架中有名为im2col的函数，并且在卷积层的实现中，都使用了im2col。在进行卷积层的反向传播时，必须进行im2col的逆处理。池化层的实现和卷积层相同，都使用im2col展开输入数据。不过，池化的情况下，在通道方向上是独立的，这一点和卷积层不同。</p></li><li><p>CNN的可视化</p><p>卷积层的滤波器会提取边缘或斑块等原始信息。而刚才实现的CNN会将这些原始信息传递给后面的层。第1层的卷积层中提取了边缘或斑块等“低级”信息，那么在堆叠了多层的CNN中，各层中又会提取什么样的信息呢？根据深度学习的可视化相关的研究，随着层次加深，提取的信息（正确地讲，是反映强烈的神经元）也越来越抽象。</p></li><li><p>LeNet</p><p>它有连续的卷积层和池化层（正确地讲，是只“抽选元素”的子采样层），最后经全连接层输出结果。和“现在的CNN”相比，LeNet有几个不同点。第一个不同点在于激活函数。LeNet中使用sigmoid函数，而现在的CNN中主要使用ReLU函数。此外，原始的LeNet中使用子采样（subsampling）缩小中间数据的大小，而现在的CNN中Max池化是主流。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arr</title>
      <link href="/Blog/2020/05/19/arr/"/>
      <url>/Blog/2020/05/19/arr/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li>考虑双向遍历数组</li></ol><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><p>应用：原数组上删除 </p><p>用法：实质是快慢指针，其中一个做iterator，另一个做counter</p><h2 id="双向双指针"><a href="#双向双指针" class="headerlink" title="双向双指针"></a>双向双指针</h2><p>应用：原数组上rotate或者reverse，in place交换，求和</p><p>用法：前后两个指针分别向中间移动，监测left &lt; right. </p><h2 id="建立计数器"><a href="#建立计数器" class="headerlink" title="建立计数器"></a>建立计数器</h2><p>应用：输入只包含特定数字/字母</p><p>用法：创建O(1)数组（实质上是hashtable/hashmap）</p><h2 id="滑动窗口-Sliding-Window"><a href="#滑动窗口-Sliding-Window" class="headerlink" title="滑动窗口 Sliding Window"></a>滑动窗口 Sliding Window</h2><h3 id="窗口大小固定"><a href="#窗口大小固定" class="headerlink" title="窗口大小固定"></a>窗口大小固定</h3><p>应用：求固定长度窗口内最大值、最小值、中位数</p><p>用法：借助额外数据结构存储，考虑HashSet、Monotonic Queue、数组等。</p><h3 id="窗口大小不固定"><a href="#窗口大小不固定" class="headerlink" title="窗口大小不固定"></a>窗口大小不固定</h3><p>应用：窗口内不同元素固定为k个，求满足条件窗口长度或个数</p><p>用法：和单向双指针类似，先移动右指针，不满足条件后移动左指针</p><h2 id="Binary-Indexed-Tree"><a href="#Binary-Indexed-Tree" class="headerlink" title="Binary Indexed Tree"></a>Binary Indexed Tree</h2><p>见tree</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack-queue</title>
      <link href="/Blog/2020/05/16/stack-queue/"/>
      <url>/Blog/2020/05/16/stack-queue/</url>
      
        <content type="html"><![CDATA[<h1 id="栈-amp-队列"><a href="#栈-amp-队列" class="headerlink" title="栈&amp;队列"></a>栈&amp;队列</h1><ol><li>基本上结合其他问题考得比较多</li><li>需要实现特殊功能，考虑使用多个栈/队列</li></ol><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><ul><li>Deque在java有现成接口，可以用LinkedList实现</li></ul><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><ul><li>Mono Stack保证栈中数据是有序的，可以配合滑动窗口题使用</li></ul><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><ul><li>需要有特定排序的，必然用到priority queue</li><li>自定义Comparator</li><li>需要记住多个参数的，考虑定义POJO类</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> stack </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>binary search</title>
      <link href="/Blog/2020/05/16/binary-search/"/>
      <url>/Blog/2020/05/16/binary-search/</url>
      
        <content type="html"><![CDATA[<h1 id="二分搜索-Binary-Search"><a href="#二分搜索-Binary-Search" class="headerlink" title="二分搜索 Binary Search"></a>二分搜索 Binary Search</h1><ol><li>注意int溢出。</li><li>一种是根据index二分，一种是根据值二分。<br>根据值二分的，要统计小于mid的个数，另外要注意mid到底是不是一个在范围之内的数。  </li><li>返回之前最好再检测一遍是否符合要求。  </li><li>如果不是采用左闭右开区间，注意死循环问题。  </li><li>注意数列中有不有重复值，会影响判断条件。  </li></ol>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
            <tag> binary search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>polymorphism</title>
      <link href="/Blog/2020/05/13/polymorphism/"/>
      <url>/Blog/2020/05/13/polymorphism/</url>
      
        <content type="html"><![CDATA[<p>面向对象编程有三个特征，即封装、继承和多态。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>封装隐藏了类的内部实现机制，从而可以在不影响使用者的前提下改变类的内部结构，同时保护了数据。</p><p>继承是为了重用父类代码，同时为实现多态性作准备。</p><p>多态是该对象自行决定响应何种行为，由方法的重写、重载与动态连接构成。<br>重写Override: 函数签名相同，行为不同。<br>重载Overload: 函数签名不同。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>可以使用父类类型的引用指向子类的对象，但是不能把父类对象引用赋给子类对象引用变量。<br>除非我们自己定义强制进行向下转型。       </li><li>该引用只能调用父类中定义的方法和变量，<br>假若调用了一个只在子类定义的方法(在父类中并没有定义)，则会出错。     </li><li>如果子类中重写了父类中的一个方法，那么在调用这个方法的时候，<br>将会调用子类中的这个方法。(动态连接、动态调用)  </li><li>变量不能被重写（覆盖），”重写”的概念只针对方法。<br>如果在子类中”重写“了父类中的变量，那么在编译时会报错。  </li></ol><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>C++允许多继承，功能强大，但有高风险。Java只允许单继承，所以引入多态，增强功能。  </p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>避免每添加一个新类，都要大量重新编码。</p><pre class=" language-java"><code class="language-java">Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义一个父类类型的引用指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。  对于父类中定义的方法，如果子类中重写了该方法，那么父类类型的引用将会调用子类中的这个方法，这就是动态连接。  </p><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><h3 id="早期绑定"><a href="#早期绑定" class="headerlink" title="早期绑定"></a>早期绑定</h3><p>将一个方法调用同一个方法主体连接到一起就称为“绑定”（Binding）。<br>若在程序运行以前执行绑定（由编译器和链接程序，如果有的话），就叫作“早期绑定”。此时，程序不知道该调用哪个子类的方法。  </p><h3 id="后期绑定"><a href="#后期绑定" class="headerlink" title="后期绑定"></a>后期绑定</h3><p>绑定在运行期间进行，以对象的类型为基础。<br>Java中绑定的所有方法都采用后期绑定技术，除非一个方法已被声明成final。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://wizardforcel.gitbooks.io/thinking-in-java/">https://wizardforcel.gitbooks.io/thinking-in-java/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> polymorphism </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hbase</title>
      <link href="/Blog/2020/05/10/hbase/"/>
      <url>/Blog/2020/05/10/hbase/</url>
      
        <content type="html"><![CDATA[<h1 id="在cmd运行的指令"><a href="#在cmd运行的指令" class="headerlink" title="在cmd运行的指令"></a>在cmd运行的指令</h1><ol><li><p>list  </p><p>list all the tables</p></li><li><p>!describe `*table*`  </p><p>return attributes related to the table</p></li><li><p>create `*table*`, `*column family*`  </p><p>create a new table with a column family</p></li><li><p>exit  </p><p>exit the shell</p></li><li><p>curl – o ~/<em>file URL</em>  </p><p>output saved to the file with the URL</p></li><li><p>head <em>file</em>  </p><p>gives a view of the file</p></li><li><p>sed -i `1d` <em>file</em>  </p><p>get rid of the header row</p></li><li><p>hadoop fs -copyFromLocal <em>path</em> <em>path2</em></p></li><li><p>hadoop fs -ls <em>path2</em></p></li><li><p>\表示下行继续  </p></li></ol><pre><code>hbase *mapreduceMethod* -Dimporttsv.separator=, -Dimporttsv.columns=”HABASE\_ROW\_KEY,*family: column*,*family: column*,*family: table*” *table* hdfs://*URL*```11. scan \`*table*\`  returns all the rows of the table12. put ‘*table*’, ‘*row key*’, ‘*column family: column*’, ‘*value*’  insert a new alue or update if it already exists13. get ‘*table*’, ‘*row key*’  returns certain row# 在apache phoenix运行的指令1.  语法基本与sql类似2.  select \* from “*table*” where “*column*” = ’*value*’ 注意单双引号3.  !outputformat vertical  returns in vertical format4.  !outputformat table  returns in default format5.  select distinct “*column*” from “*table*”;  returns all values without repetition6.  upsert into “*table*” select … from “*table*”  load the data from somewhere into the table</code></pre>]]></content>
      
      
      <categories>
          
          <category> app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nowcode</title>
      <link href="/Blog/2020/05/10/nowcode/"/>
      <url>/Blog/2020/05/10/nowcode/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#%E6%8E%92%E5%BA%8F">排序 3</a></p><p><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串 5</a></p><p><a href="#%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">算法/数据结构 5</a></p><p><a href="#%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88">队列和栈 8</a></p><p><a href="#%E9%93%BE%E8%A1%A8">链表 11</a></p><p><a href="#%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2">二分搜索 15</a></p><p><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树 17</a></p><p><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划 22</a></p><p><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97">位运算 25</a></p><p><a href="#%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88">排列组合 27</a></p><p><a href="#%E5%A4%A7%E6%95%B0%E6%8D%AE">大数据 31</a></p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><table><thead><tr><th>名称</th><th align="center">时间复杂度</th><th align="center">空间复杂度</th><th align="center">稳定排序</th><th>备注</th></tr></thead><tbody><tr><td>冒泡</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td align="center">1</td><td></td></tr><tr><td>选择</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td align="center">0</td><td>选最小值放在数组第一位</td></tr><tr><td>插入</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td align="center">1</td><td></td></tr><tr><td>归并</td><td align="center">O(n*log n)</td><td align="center">O(n)</td><td align="center">1</td><td></td></tr><tr><td>快速</td><td align="center">O(n*log n)</td><td align="center">O(n)</td><td align="center">0</td><td>划分过程(partition)</td></tr><tr><td>堆</td><td align="center">O(n*log n)</td><td align="center">O(1)</td><td align="center">0</td><td></td></tr><tr><td>希尔</td><td align="center">O(n*log n)</td><td align="center">O(1)</td><td align="center">0</td><td>插入排序改良版，步长≥1且逐渐变小</td></tr><tr><td>桶</td><td align="center">O(n)</td><td align="center">O(m)</td><td align="center">1</td><td>计数：每个值一个bucket ，基数：根据值的百/十/个位上的数排序</td></tr></tbody></table><p>不稳定排序口诀：快选堆希</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ul><li>排序一个几乎有序的数组（每个元素移动≤k）且k ≪ n。</li></ul><p><em>普通解法：</em>时间O(n*k) 空间O(1)</p><p>使用插入排序，因为插入排序与原数组顺序有关。</p><p><em>最优解法：</em>时间O(n*log k) 空间O(k)</p><p>改进版的堆排序：每k个元素组成小根堆（类似sliding window）。</p><ul><li>判断数组是否包含重复值。</li></ul><p><em>普通解法：</em>时间O(n) 空间O(n)</p><p>哈希表。</p><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>使用改良版的堆排序对数组进行排序。递归实现的堆排序空间复杂度是O(log<br>n)，非递归实现的堆排序空间复杂度是O(1)。</p><ul><li>荷兰国旗问题：只包含0、1、2整数的数组排序，使用交换（不可以使用计数方法），原地排序。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>采用快排思想。在数组左侧设立”0区”，右侧设立”2区”。遍历数组，遇到0，就和”0区”右边第一个数进行交换，且”0区”向右扩一个位置。遇到2，就和”2区”左边第一个数进行交换，且”2区”向左扩一个位置。注意此时被交换过来的数还没进行检测，需要进行比较分区。当前位置和”2区”起始位置重合时，循环停止。</p><ul><li>在行列都排好序的情况下矩阵找数。</li></ul><p><em>最优解法：</em>时间O(n+m) 空间O(1)</p><p>从右上角找起。</p><ul><li>需要排序的最短子数组长度。例如[1,5,4,3,2,6,7]需要排序的最短子数组是[5,4,3,2]，所以返回4。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>遍历数组，找出每个元素位置上迄今出现的最大值。若num[i]&lt;max，记录发生这种情况最右位置。再从右向左遍历数组，记录迄今出现的最小值。若num[i]&gt;min，记录发生这种情况最左位置。返回两者的差。</p><ul><li>给定int[]，返回排序之后，相邻两数最大差值。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>桶排序。找出min和max。将[min, max)分成n个区间，单独将最大值放在第n+1区间。一共有n+1个区间，但是只有n个数，所以必然有空桶。只用考虑桶间的相邻数的差值。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="概况-1"><a href="#概况-1" class="headerlink" title="概况"></a>概况</h2><p>广泛性：可看做字符类型的数组；很多其他类型问题可转化为字符串问题</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>规则判断：整数；浮点数；回文</p><p>数字运算：int、long表达范围有限，用字符串模拟大数计算</p><p>数组操作：排序、调整</p><p>字符计数：哈希表；固定长度数组 C/C++(256)<br>Java(65536)；滑动窗口；寻找无重复子串；变位词</p><p>动态规划：最长公共子串/子序列；最长回文子串/子序列</p><p>搜索：字符变换(BFS+DFS)</p><h2 id="算法-数据结构"><a href="#算法-数据结构" class="headerlink" title="算法/数据结构"></a>算法/数据结构</h2><p>Manacher - 最长回文子串</p><p>KMP - 字符串匹配</p><p>前缀树、后缀树、后缀数组</p><h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><ul><li>判断二叉树t1是否包含二叉树t2。</li></ul><p><em>普通解法：</em>时间O(n*m) 空间O(1) // n代表t1节点数，m代表t2节点数</p><p><em>最优解法：</em>时间O(n+m) 空间O(n)</p><p>序列化两棵树，在str1中查找子串str2。</p><ul><li>判断两个字符串是否互为变形词。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>用哈希表进行字符统计。也可用固定长度数组代替哈希表结构。</p><ul><li>判断两个字符串是否互为旋转词。str1前面人一部分挪到后面形成的字符串都是旋转词。例如1234的旋转词包括:<br>1234, 2341, 3412, 4123。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>先判断两者长度是否相同。如果相同，生成str1+str1的大字符串。KMP算法查找其中是否包含str2。</p><ul><li>单词间做逆袭调整。例如”I love you” -&gt; “you love I”</li></ul><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>实现字符串局部字符的逆序函数。将所有字符逆序。再将每一个单词的部分逆序。</p><ul><li>给定str和整数i，i代表位置。将str[0~i]移到右侧。例如str=”abcde”,<br>i=2 -&gt; ‘deabc’。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>str[0~i]逆序，str[i+1~n-1]逆序，str[0~n-1]逆序。</p><ul><li>给定str[]，找到一种拼接后字典序最小的拼接顺序，返回此大字符串。</li></ul><p><em>最优解法：</em>时间O(n*log n) 空间O(1)</p><p>不能按每一个字符串的字典顺序排序。反例：[“ba”, “b”] -&gt; [“b”, “ba”]<br>-&gt; “bba”。但是实际上”bab”的字典序更小。</p><p>正确解是根据str1+str2和str2+str1的结果排序。 //<br>会不会出现插入中间更小的情况？</p><ul><li>给定str，将空格替换成”%20”，假设空间足够。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>遍历str得到空格数量x。替换后长度为len+2x。指针指向该位置前一个，从右向左遍历填充数组。</p><ul><li>给定str判断是否是有效括号字符串。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>使用栈。可应对多种括号。</p><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>只能应对单一括号。整数num代表左括号和右括号的差值。遇到左括号，num++。否则num--。若出现num&lt;0，则返回false。最后判断num == 0。</p><ul><li>返回str最长无重复字符子串的长度。例如，”abcd” -&gt; 4, “abcb” -&gt; 3。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>求i位置向左最长的无重复字符子串。</p><p>HashMap：统计每个字符之前出现的位置。</p><p>int pre：s[i-1]结尾的情况下，最长无重复子串的长度。</p><p>计算i-map.get(str[i]-1)，与1+pre进行比较，取两者的min。更新pre和hashmap。</p><img src="string1.png"><img src="string2.png"><h1 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h1><h2 id="概况-2"><a href="#概况-2" class="headerlink" title="概况"></a>概况</h2><p>可用数组或者链表实现。数组实现较为简单。</p><h2 id="习题-2"><a href="#习题-2" class="headerlink" title="习题"></a>习题</h2><ul><li>实现一个特殊的栈。除了基本功能之外，实现getMin。要求pop, push,<br>getmin时间为O(1)。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>方法1：用一个栈stackData保存数据，另一个栈stackMin保存最小值。数字正常进入stackData，但是只有当它小于等于stackMin栈顶时，该数被放入stackMin。当stackData弹出时，比较这个值与stackMin栈顶元素大小。如果相同，stackMin也弹出。</p><p>方法2：用一个栈stackData保存数据，另一个栈stackMin保存最小值。数字正常进入stackData。将数字与stackMin栈顶比较，较小的数被放入stackMin。当stackData弹出时，<br>stackMin也弹出。</p><p>方案一空间较为优化，方案二时间更优。</p><ul><li>实现一个类，用2个栈实现队列。支持add，poll，peek。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>一个stackPush栈，一个stackPop栈。stackPush向stackPop倒入数据。注意两点：stackPush倒数据一次性倒完；stackPop中有数据，stackPush不能进行倒数据操作。</p><ul><li>实现一个栈的逆序。只能用递归和栈的本身操作。不能申请额外数据结构。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// remove and return the last element in the stack  </span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> res <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> last<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">reverse</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><ul><li>栈中元素为int，将栈从顶到底由从大到小排序，只可以额外申请一个栈。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>类似罗汉塔。栈1pop，与栈2顶比较。如果栈1的小，直接压入栈2。否则先pop出栈2的元素，直到栈2栈顶比栈1被pop出的元素大为止，将该元素压入。最后将栈2元素全部倾倒进栈1。</p><ul><li>有一个int数组arr和一个大小为w的窗口从数组的最左滑到最右。窗口每一次滑动一个位置。返回一个长度为n-w+1的数组res，每一个元素表示每一个窗口状态下的最大值。例子arr=[4,3,5,4,3,3,6,7],<br>w=3，返回[5,5,5,4,6,7]。</li></ul><p><em>普通解法：</em>时间复杂度O(n*w)</p><p>遍历</p><p><em>最优解法：</em>时间复杂度O(n)</p><p>使用双端队列qmax={}, 存放数组中的index</p><p>遍历arr[i]</p><p>qmax放入规则：若qmax为空，直接将index放入。否则，取出qmax队尾存放的index<br>j，如果arr[j]&gt;arr[i]，将i放入qmax队尾；如果arr[j]≤arr[i]，则一直从qmax队尾弹出index<br>k，直到arr[k]&gt;arr[i]，此时把i放入qmax队尾。</p><p>qmax弹出规则：如果qmax队头的index = i-w，弹出此index。</p><p><em>证明：</em>arr中每个数，最多进出qmax两次。所以时间是O(n)。</p><ul><li>给定一个没有重复元素的数组arr，写出生成这个数组的maxTree函数。要求时间和空间复杂度均为O(n)。maxTree是二叉树，其中每一个子树中，值最大的节点都是root。</li></ul><p>例子arr=[3,4,5,1,2]</p><p><em>最优解法</em>：</p><p>利用栈得到每个数左右两边第一个比自己大的数。如果栈为空，直接放入。若不为空，查看栈顶元素，若栈顶元素大于自己，则可以入栈，并且得到自己的左边第一个比自己大的数是原来的栈顶。若栈顶元素小于自己，弹出栈顶，直到栈为空或栈顶元素更大，此时自己入栈，并且得到自己的左边第一个比自己大的数是自己入栈前的栈顶。同理可得右边第一个比自己大的数。</p><table><thead><tr><th>左边第一个比自己大的数</th><th>右边第一个比自己大的数</th></tr></thead><tbody><tr><td>3-&gt;null</td><td>3-&gt;4</td></tr><tr><td>4-&gt;null</td><td>4-&gt;5</td></tr><tr><td>5-&gt;null</td><td>5-&gt;null</td></tr><tr><td>1-&gt;5</td><td>1-&gt;2</td></tr><tr><td>2-&gt;5</td><td>2-&gt;null</td></tr></tbody></table><p>对每一个数对比两边，选择两个数中较小的一个作为自己的父节点</p><p>​            5</p><p>​        /         \</p><p>​    4                 2</p><p>​    /                     \</p><p>3                             1</p><p>证明：首先，必然是一棵树，而不是森林。所有数都会找到比自己大的数作为父节点，最后都会找到数组中最大的数当成root。其次，证明这棵树是二叉树。任何一个数在单独一侧，孩子的数量都不超过一个。假设A在一侧有两个孩子k1、k2，满足A&gt;k1且A&gt;k2。又因为数组中无重复元素，所以k1&lt;k2。根据我们的方法，k1不会以A作为父节点，而可能会以k2作为父节点。矛盾。遂满足二叉树条件。</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="概况-3"><a href="#概况-3" class="headerlink" title="概况"></a>概况</h2><p>链表存储空间不一定连续，是临时分配的，所以不能像数组一样用index提取元素。</p><p>大量链表问题可以使用额外数据结构简化调整。但是最优解一般不使用额外数据结构。</p><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p>1. 链表调整函数的返回值类型，一般是节点类型</p><p>2. 先画图理清思路</p><p>3. 边界条件：头尾节点、空节点</p><h2 id="习题-3"><a href="#习题-3" class="headerlink" title="习题"></a>习题</h2><ul><li>单链表翻转操作。</li></ul><p><em>最优解法1</em>：</p><ol><li><p>链表为空或长度为1，特殊处理</p></li><li><p>记录三个变量prev、cur、next。把cur的指针指向prev，把cur设置成新的head。然后把pre设置成cur，把cur设置成next。</p></li></ol><p><em>最优解法2</em>：开一个新的头newHead。每次从原来list中除去头部元素，插入新列表的头部。</p><ul><li>给定一个整数num，在节点值有序的环形链表中插入一个节点值为num的节点，并且保证这个环形单链表依然有序。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>创建新节点node。</p><p>如果原链表为空，自己形成环形链表，返回此节点。</p><p>如果原链表不为空，找到p.val≤node.val且c.val≥node.val，将node插入到p和c之间。返回head。</p><p>如果转了一圈没有发现插入的位置，说明node的值大于/小于链表中所有值，则将node插入头节点的前面。如果node值大于链表中所有值，返回原来的head。否则，将node设置成head，返回head。</p><ul><li>给定一个链表中节点node，但不给定head。如何在链表中删除node？要求时间O(1)</li></ul><p><em>最优解法</em>：时间O(1) 空间O(1)</p><p>如果是单链表，拷贝后一个节点的值，然后将后一个节点删掉。但是无法删掉最后一个节点。另外，如果节点结构复杂且拷贝操作受限时，不可行。</p><ul><li>给定一个链表中头节点head和一个数num。把链表调整成节点值小于num的节点都放在左边，值等于num的节点都放在中间，值大于num的节点都放在链表右边。</li></ul><p><em>普通解法</em>：时间O(n) 空间O(n)</p><p>将所有节点放入数组中然后将数组进行快排划分的调整过程。然后将数组用链表连接。</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>将链表分成三个（大于、等于、小于），最后将三个链表连接起来。</p><ul><li>给定两个有序链表头节点head1和head2，打印两个链表的公共部分。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>如果有一个链表为空，直接返回。之后用双指针遍历两个链表，找到两个链表第一个相同元素，打印这个元素。此时双指针同时移动，并且打印相同元素。直到其中一个链表为空。</p><ul><li>给定一个单链表头节点head，实现一个调整单链表的函数，使得每k个节点之间逆序。如果最后一组不够k个节点，不调整最后几个节点。例子：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;null，k=3。调整后3-&gt;2-&gt;1-&gt;6-&gt;5-&gt;4-&gt;7-&gt;8-&gt;null。</li></ul><p>如果链表为空，或者长度为1，或者k&lt;2，直接返回。</p><p><em>数据结构解法</em>：时间O(n) 空间O(k)</p><p>用栈来处理。集齐K个元素。记得之前调整组的最后一个节点。特殊处理头结点。</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>记录每个组的第一个节点，当遍历到第k个节点时，开始做逆序调整。</p><ul><li>给定一个单链表头节点head和一个值val。把所有等于val的节点删掉。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>用cur指针遍历原链表，若元素不等于val，设置该元素为返回链表的其中一个元素，next指向null。更新返回链表的尾部。注意第一个元素加入返回链表时，tail指针是不存在的。</p><ul><li>给定一个单链表，判断是否为回文结构。</li></ul><p><em>数据结构解法</em>：时间O(n) 空间O(n)</p><p>用栈来处理。将所有节点压入栈中，之后依次弹出，与原链表进行比对。</p><p><em>数据结构+算法解法</em>：时间O(n) 空间O(n/2)</p><p>使用栈和快慢指针。快指针一次走两步。慢指针一次走一步。慢指针遍历过的元素压入栈中。当快指针走完的时候，慢指针会来到中间的位置。如果链表长度为奇数，中间位置的元素不入栈。将慢指针向后移动一位。依次弹出栈中元素与慢指针所指向的元素进行比对。</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>用cur指针遍历原链表找到中间节点。将右半部分变成逆序链表。从两头开始，依次遍历，对比节点是否一样。注意，返回之前一定要将链表的结构调整回来。</p><ul><li>给定一个单链表，每个节点不仅包含有一条指向下一个节点的next指针，同时含有一条rand指针，可能指向任何一个节点。请复制这种含有rand指针节点的链表。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(n)</p><p>对原链表每个节点，拷贝一个复制节点，插入当前节点和下一个节点之间。再遍历一次所有节点，但是每一次拿到两个节点，即链表原来就有的节点和它的复制节点（1&amp;1’），通过原有节点的rand指针找到下一个节点，将复制节点的next指针指向下一个节点的复制节点。最后把这个大的链表拆开成两个独立的链表，返回head。</p><ul><li>给定一个单链表，判断是否有环。有环则返回链表入环的第一个节点，否则返回空。</li></ul><p><em>普通解法</em>：时间O(n) 空间O(n)</p><p>哈希表。</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>从头节点开始，用快慢指针遍历，快指针一次走两步。慢指针一次走一步。如果有环，快指针和慢指针会在环中相遇。此时快指针从头开始遍历，一次走一步，慢指针从相遇处一次走一步。快慢指针再次相遇时，那个节点就是入环的第一个节点。</p><p><em>数学证明：</em></p><img src="list1.png"><p>首先要证明的是，两指针相遇时，慢指针还没有走完整个链表。</p><p>（1）如果慢指针第一次达到Join点时，快指针也在Join点，慢指针未走完整个链表；</p><p>（2）如果慢指针第一次达到Join点时，快指针没有在Join点，我们以最极端的情况来说，假设快指针这时就在慢指针的前面一个节点，这时，快指针追上慢指针需要走最长的距离。因为快指针的速度是慢指针的两倍，所以慢指针走一圈，快指针走两圈，当慢指针第一次在环上走完一圈回到Join点时，快指针刚好走完两圈，并且已经在慢指针的前面，所以它俩在慢指针第一次回到Join点之前就已经相遇。</p><p>其次证明，快慢指针相遇后，慢指针再往前移LenA个节点就刚好到达Join点。</p><p>假设第一次相遇点为Pos，环起点为Join，头结点到环起点的长度为LenA，环起点到第一次相遇点的长度为x，第一次相遇点到环起点的长度为y，环长为C</p><p>（1）第一次相遇时，slow走的长度 S = LenA + x;（由证明的第一部分得到）</p><p>（2）第一次相遇时，fast走的长度 2S = LenA + n*C + x;（n≥1，因为快指针先进入环，要追上后进入的慢指针，必须得回到环起点在起点之后才能追上）</p><p>可以推出LenA = n*C - x。</p><p>慢指针一共走了S + LenA = S + n*C - x = S + (n - 1)*C + (C - x) = S + (n - 1)*R + y，刚好走到入环点。</p><ul><li>给定两个无环单链表，判断是否相交。如果相交，返回第一个相交节点，否则返回空。</li></ul><p><em>最优解法</em>：时间O(n+m) 空间O(1)</p><p>遍历两个链表，统计两个链表的长度n&amp;m。让长的链表先走n-m步，两个链表同时往下走。判断是否有相交节点。</p><ul><li>给定两个有环单链表，判断是否相交。如果相交，返回第一个相交节点，否则返回空。</li></ul><p><em>最优解法</em>：时间O(n+m) 空间O(1)</p><p>首先找到两个链表各自的入环节点，如果入环节点相同，则两个链表必然相交。这种情况下，需要找到两个链表是否在入环前就相交。方法同判定两个无环单链表是否相交，以入环节点作为遍历的终止位置。如果入环节点不同，就让链表1的node从自己的入环点向后走，如果在回到自己之前遇到了链表2的入环点，则两个链表相交。返回两个链表其中任意一个入环点即可。</p><ul><li>给定两个单链表（不知道是否有环），判断是否相交。如果相交，返回第一个相交节点，否则返回空。</li></ul><p><em>最优解法</em>：时间O(n+m) 空间O(1)</p><p>首先找到两个链表各自的入环节点。如果一个有环，另一个无环，这两个链表不可能相交。剩下的情况用之前的方法分类讨论。</p><h1 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h1><h2 id="概况-4"><a href="#概况-4" class="headerlink" title="概况"></a>概况</h2><p>有序序列中查询，时间复杂度O(log<br>n)。并不一定非要在有序序列中才能得到应用。</p><h2 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h2><p>1. 边界条件：不漏掉任何一个数，死循环</p><p>2. 给定处理或查找的对象不同，判断条件不同，要求返回的内容不同</p><p>3. 有序循环数组</p><h2 id="习题-4"><a href="#习题-4" class="headerlink" title="习题"></a>习题</h2><ul><li>给定无序数组arr，已知任意相邻两个元素的值不重复。请返回任意一个局部最小的位置。局部最小定义：小于左右两侧的值。</li></ul><p><em>最优解法</em>：时间O(log n) 空间O(1)</p><p>arr为空或者长度为0，返回-1，局部最小不存在。arr长度为1，返回0。如果arr长度大于1，先检查数组头尾（分别只需要与一个元素相比较）。接着检查mid，如果mid只比右边的数小，说明从mid向左趋势是减小的，检查从start到mid的数组即可。如果mid只比左边的数小，同理。如果mid比两边都大，说明两边都存在局部最小，可以任选一边进行搜索。</p><ul><li>给定有序数组arr和一个整数num。在arr中找到num出现的最左位置。</li></ul><p><em>最优解法</em>：时间O(log n) 空间O(1)</p><p>做二分搜索，并持续更新pos变量。</p><ul><li>给定有序循环数组arr，返回其中最小值。有序循环数组是有序数组左边任意长度的部分放到右边去，右边的部分拿到左边来。比如数组[1,2,3,3,4]，是有序循环数组，[4,1,2,3,3]也是。</li></ul><p><em>最优解法</em>：时间O(log n) 空间O(1)</p><p>如果arr[L]&lt;arr[R]，说明整个数组有序，直接返回L。如果arr[L]&gt;arr[M]，说明最小值一定出现在L到M这段区间。同理，如果arr[R]&gt;arr[M]，搜索M到R区间。如果仍不满足条件，说明arr[L]<br>= arr[M] = arr[R]。此时只能采用遍历找到最小值。</p><ul><li>给定有序数组arr， 其中不含有重复元素，请找到满足arr[i] ==<br>i条件的最左的位置。如果没有这样的位置，返回-1。</li></ul><p><em>最优解法</em>：时间O(log n) 空间O(1)</p><p>生成pos变量。如果arr[0]&gt;N-1，说明不存在这样的位置，直接返回-1。同理检查arr[N-1]&lt;0。如果arr[M]<br>&gt; M，说明需要在0~M-1区间上搜索。如果arr[M] &lt;<br>M，说明需要在M+1~N-1区间上搜索。如果arr[M] =<br>M，令pos=M，继续在0~M-1区间上二分搜索。</p><ul><li>给定一棵完全二叉树的头head，返回树的节点个数。（总是从左向右添加子节点）</li></ul><p><em>最优解法</em>：时间O(log n^2) 空间O(1) //为啥是O(log n2)?</p><p>首先找到树的最左节点，得到树的高度（最左节点一定在完全二叉树的最后一层上）。找到二叉树头节点右子树上的最左节点。如果这个节点到达最后一层，说明二叉树头节点的左子树一定是满二叉树（直接用公式算节点个数）。在右子树递归求节点个数。如果这个节点未能到达最后一层，说明二叉树头节点的右子树一定是满二叉树（比左子树的高度小1）。在左子树递归求节点个数。</p><ul><li>求一个整数k的N次方。</li></ul><p><em>最优解法</em>：时间O(log n) 空间O(1)</p><p>把N分解成2的次方的和。比如75=64+8+2+1。</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="概况-5"><a href="#概况-5" class="headerlink" title="概况"></a>概况</h2><p>节点结构。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> val<span class="token punctuation">;</span>      Node left<span class="token punctuation">;</span>         Node right<span class="token punctuation">;</span>      <span class="token function">Node</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> data<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h1 id="关键点-2"><a href="#关键点-2" class="headerlink" title="关键点"></a>关键点</h1><p>1. 结合队列、栈、链表、字符串等数据结构</p><p>2. 基本遍历方法：BFS，DFS</p><p>3. 递归函数</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>平衡二叉树(AVL树)：空树是平衡二叉树。所有子树满足各自的左子树和右子树的高度差不超过1。</p><p>搜索二叉树：每一棵子树头节点的值比左子树上的所有节点值要大，比右子树上的所有节点值要小。</p><p>满二叉树：除了最后一层的节点无子节点外，所有节点都有两个子节点。层数为L，节点为N，则N<br>= 2^L - 1，L = log<del>2</del>(N+1)</p><p>完全二叉树：除了最后一层之外，每一层的节点都是满的。即使最后一层不满，缺少的节点也全部在右边。</p><p>后继节点successor：这个节点在中序遍历中的下一个节点。</p><p>前驱节点predecessor：这个节点在中序遍历中的上一个节点。</p><h2 id="习题-5"><a href="#习题-5" class="headerlink" title="习题"></a>习题</h2><ul><li>用递归方式和非递归方式实现：先序（中左右）、中序和后续的遍历打印。</li></ul><p>先序</p><p><em>递归解法</em>：时间O(n) 空间O(1)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><em>非递归解法</em>：时间O(n) 空间O(L) // L是二叉树的深度</p><p>申请一个栈stack。将头节点head压入栈中。每次从stack中弹出栈顶节点，记为cur，打印cur的值。如果cur右孩子不是空，将其压入栈中，如果cur左孩子不是空，将其压入栈中。重复这一步骤，直到栈为空。</p><p>中序</p><p><em>非递归解法</em>：时间O(n) 空间O(L)</p><p>申请一个栈stack。令cur等于头节点。</p><p>把cur节点压入栈中，对以cur为头的整棵子树而言，依次把左边界压入栈中，即不断令cur=cur.left，重复这一步骤，直到cur为空。</p><p>从stack中弹出一个节点，记为node。打印，并让cur=node.right。重复上一步骤。</p><p>当stack为空且cur等于空，过程结束。</p><p>后序</p><p><em>两个栈非递归解法</em>：时间O(n) 空间O(L)</p><p>申请一个栈s1。将头节点head压入栈中。每次从s1中弹出栈顶节点，记为cur，先把cur的左孩子压入s1，然后把右孩子压入s1。在整个过程中，每一个从s1中弹出的节点都放进第二个栈s2中。重复该步骤，直到s1为空。从s2中一次弹出节点并打印。</p><p><em>一个栈非递归解法</em>：时间O(n) 空间O(L)</p><p>申请一个栈s1。将头节点head压入栈中。同时设置两个变量h和c。初始h为head，c为null。整个流程中，h代表最近一次弹出并打印的节点，c代表s1栈顶节点。</p><p>每次令c等于栈顶节点，但是不从栈中弹出节点。分以下三种情况：</p><p>(1) 如果c的左孩子不为空，并且h不等于c的孩子，则把c的左孩子压入栈中。</p><p>(2) 如果情况1不成立，并且c的右孩子不为空，并且h不等于c的右孩子。则把c的右孩子压入栈中。</p><p>(3) 如果情况1和2均不成立，说明c的左子树和右子树已经处理完毕了。从栈中弹出c打印，令h=c。</p><p>一直重复以上步骤，直到栈为空。</p><ul><li>连同行号按层遍历。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>定义两个变量。</p><p>last: 指向本层最右node，当从queue pop出的node为last时，令last=nextLast。</p><p>nextLast: 指向下一层最右node，加入本层node的子节点时更新。</p><p>用queue来做。类似BFS。</p><ul><li>二叉树的序列化（二叉树-&gt;字符串）和反序列化（字符串-&gt;二叉树）</li></ul><p>先序序列化</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>初始化str变量为空。先序遍历二叉树，如果遇到空节点，在str末尾加上” ,”。</p><p>先序反序列化</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>将给定的字符串根据分隔符转换成数组。每一个元素生成一个节点。当遇到空格时，生成空节点，且不需要往下继续构成子树。</p><p>按层序列化</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>用队列进行二叉树按层遍历，即BFS。</p><ul><li>给定二叉树，判断是否是平衡二叉树。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>分别判断每个节点的左子树和右子树。</p><ul><li>给定二叉树，判断是否是搜索二叉树。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>实现二叉树中序遍历。如果节点值一直变大，则是搜索二叉树。最好使用非递归方式进行中序遍历。</p><ul><li>给定二叉树，判断是否是完全二叉树。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>按层遍历。如果节点有右孩子，没有左孩子，直接返回false。如果当前节点并不是左右孩子都有，之后节点必须全部为叶节点，否则返回false。</p><ul><li>有一棵二叉树，节点包含一个指向父亲的指针。给定这棵树中某个节点node，返回其后继节点。</li></ul><p><em>普通解法：</em>时间O(n) 空间O(n)</p><p>通过node节点的parent指针不断向上找到头节点。做中序遍历，生成中序遍历序列。</p><p><em>最优解法</em>：时间O(l) 空间O(1) // l为node与其successor之间的实际距离</p><p>如果node有右子树，那么后继节点就是右子树上最左边的节点。</p><p>如果没有右子树，先检查node是不是其父节点的左孩子。如果是，那么父节点就是后继节点。如果是右孩子，就向上寻找node的后继节点。假设向上移动到的节点记为s，s的父节点记为p，如果发现s是p的左孩子，那么p就是node的后继节点，否则就一直向上移动。如果一直向上寻找，已经移动到空节点，说明node没有后继节点。</p><ul><li>把一个纸条竖着放在桌子上，从纸条下方向上方对折1次，展开。此时折痕是凹下去的。如果是连续对折两次，三条折痕从上到下依次是下折痕、下折痕、上折痕。给定一个参数n，代表连续对折n次，从上到下打印所有折痕方向。</li></ul><blockquote><p>​                    下</p><p>​                /       \</p></blockquote><p>​                上             下</p><blockquote><p>​            / \                 / \</p></blockquote><p>​            上   下         上      下</p><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>实质是一棵满二叉树。左子树都是上。实现先右、再中、最后左的遍历。用递归实现。</p><ul><li>有一棵二叉树原本是搜索二叉树，其中有两个节点调换了位置。找到这两个错误节点。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>对二叉树进行中序遍历，依次出现的节点值会一直升序。错误的值是降序的。</p><p>如果遍历时出现两次降序，第一个错误节点是第一次降序时较大的节点，第二个错误的节点是第二次降序时较小的节点。</p><p>如果遍历时出现一次降序，第一个错误节点是降序时较大的节点，第二个错误的节点是降序时较小的节点。</p><ul><li>从二叉树的节点A出发，可以向上或者向下走，但是沿途的节点只能经过一次，当到达B时，路径上的节点数是AB间的距离。求一棵二叉树的节点间最大距离。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>最大距离有三种情况。假设以h为头。情况1是h左子树上的最大距离，情况2是h右子树上的最大距离，情况3是横跨h两侧子树。</p><p>整个过程是后续遍历。在二叉树每棵字数上执行步骤2。</p><p>假设子树头h，处理h左子树，得到两个信息，左子树上的最大距离记为Lmax1，左子树上距离h左孩子的最远距离为Lmax2。同理求Rmax1，Rmax2。跨节点的情况的最大距离是Lmax2+1+Rmax2。比较三个值，最大值为以h为头的树上的最大距离。</p><p>Lmax2+1就是h左子树上距离h最远的点到h的距离，Rmax2+1就是h右子树上距离h最远的点到h的距离。选两者中较大的一个作为h树上距离h最远的距离返回。</p><ul><li>给定一棵二叉树的头节点head，已知其中所有节点的值都不一样，找到含有节点最多的二叉搜索子树，并返回其头节点。</li></ul><p><em>分析：</em>最大的搜索二叉子树只可能来自于两种情况。</p><p>第一种，来自node左子树上的最大搜索二叉子树是以node左孩子为头的，并且来自node右子树上的最大搜索二叉子树是以node右孩子为头的，node左子树上的最大搜索二叉子树的最大值小于node的节点值，node右子树上的最大搜索二叉子树的最小值大于node的节点值。那么以节点node为头的整棵树都是搜索二叉树。</p><p>第二种，如果不满足第一种情况，说明节点node为头的树不能连成搜索二叉树。则以node为头的树上的最大搜索二叉子树来自node的左子树上的最大搜索二叉子树和来自node的右子树上的最大搜索二叉子树之间，节点数较多的那个。</p><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>整体过程是二叉树的后序遍历。</p><p>遍历到当前节点标记为cur。遍历cur的左子树并收集4个信息，分别是左子树上最大搜索二叉子树的头节点、节点数、树上最小值、树上最大值。同样遍历cur的右子树，收集相同的4个信息。</p><p>根据上一步收集的信息，判断是否满足第一种情况。</p><p>返回4个信息，可以使用全局变量更新的方式实现。</p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="概况-6"><a href="#概况-6" class="headerlink" title="概况"></a>概况</h2><p>本质是利用空间来记录每一个暴力搜索的计算结果，下次要用结果的时候直接使用。规定每一种递归状态的计算顺序。</p><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>记忆化搜索：不关心到达某一个递归过程的路径，只单纯对计算过的递归过程进行记录，避免重复计算。</p><p>动态规划：规定好每一个递归过程的计算顺序，依次计算，后面的计算过程严格以来前面的计算过程。</p><p>最优化原理：也称最优子结构性质。指的是不论过去状态和决策如何，对前面的决策所形成的状态而言，余下的决策必须构成最优策略。简单说就是一个最优化策略的子策略总是最优的。</p><p>无后效性：某状态下决策的收益，只与状态和决策相关，与到达该状态的方式无关。</p><p>子问题的重叠性：将指数级时间复杂度的暴力搜索算法改进成具有多项式时间复杂度的算法的关键在于解决冗余。</p><h2 id="习题-6"><a href="#习题-6" class="headerlink" title="习题"></a>习题</h2><ul><li><p>给定数组arr，其中的值都为正数且不重复，每个值代表一种面值的货币。每种面值货币可以使用任意张，在给定一个整数aim代表要找的钱，求换钱有多少种方法？</p><p>arr={5,10,25,1}, aim=1000</p></li></ul><p><em>普通解法：</em>时间O(n*m^2) 空间O(n*m) // m = aim</p><p>记忆搜索方法。p(index, aim)，每计算完一个p(index,<br>aim)都将结果放入map中，index和aim组成共同的key，返回结果为value。要进入递归过程之前，现在map中查询，如果存在，直接取值。如果不存在，才进行递归。map[i][j]代表p(i,j)的返回值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coins</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> aim<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>map<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        res <span class="token operator">=</span> aim <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> map<span class="token punctuation">[</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token operator">-</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                res <span class="token operator">+=</span> val <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>            <span class="token keyword">else</span>                res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> aim<span class="token operator">-</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    map<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><em>最优解法：</em>时间O(n*m) 空间O(n*m)</p><p>动态规划方法。生成矩阵dp[n][m+1]，dp[i][j]表示在使用arr[0~i]货币的情况下，组成钱数j的方法的种类。dp[:][0]表示组成0元，只有一种方法，所以这一列全部填1。dp[0][:]表示只能用第一种货币(5元)来凑钱，所以将其倍数所对应的格子填充为1。</p><p>dp[i][j] = 以下所有情况的累计</p><ol><li>不使用arr[i]货币，方法数dp[i-1][j]</li><li>如果用1张arr[i]货币，方法数为dp[i-1][j-arr[i]]</li><li>…</li></ol><ul><li>有n级台阶，每一次上1或者2级，问有多少种走完的方法？</li></ul><p><em>最优解法：</em>时间O(n) 空间O(1)</p><p>f(i) = f(i-1) + f(i-2), f(0) = f(1) = 1</p><ul><li><p>给定一个矩阵m，从左上角向右或者下，到右下。路径上所有数字累加起来就是路径和，返回所有路径中最小值。</p><p>1 3 5 9</p><p>8 1 3 4</p><p>5 0 6 1</p><p>8 8 4 0</p></li></ul><p><em>普通DP解法：</em>时间O(m*n) 空间O(m*n) // 行数m，列数n</p><p>生成dp[m][n]，dp[i][j]表示从原点走到(i, j)位置的最小路径和。</p><p>dp[i][j] = m[i][j] + min(dp[i-1][j], dp[i][j-1])</p><p>返回dp[m-1][n-1]。</p><ul><li>给定一个数组arr，返回最长递增子序列长度。例如arr =<br>[2,1,5,3,6,4,8,9,7]，返回[1,3,4,8,9]的长度5。</li></ul><p><em>最优解法：</em>时间O(n) 空间O(n)</p><p>dp[i]表示在以arr[i]结尾的情况下，最大递增子序列长度。</p><p>dp[i] = max{dp[j]+1 (0&lt;=j&lt;i, arr[j] &lt; arr[i])}</p><ul><li>给定两个字符串s1, s2。返回最长公共子序列。例如s1=”1a2c3d4b56”,<br>s2=”b1d23ca45b6a”，返回”123456”或者”12c4b6”。</li></ul><p>len(s1) = m, len(s2) = n</p><p><em>最优解法：</em>时间O(m*n) 空间O(m*n)</p><p>生成dp[m][n]。dp[i][j]表示s1[0~i]与s2[0~j]的最长公共子序列长度。</p><p>dp[i][0] =<br>代表s1[0~i]与s2[0]的最长公共子序列长度，最大为1。一旦dp[i][0]被设置成1，将dp[i+1~m]填充为1。dp[0][j]与上面步骤同理。</p><p>dp[i][j] = 取下面三种情况的最大值</p><ol><li><p>dp[i-1][j]</p></li><li><p>dp[i][j-1]</p></li><li><p>如果s1[i] == s2[j], dp[i-1][j-1] + 1</p></li></ol><ul><li><p>背包重量不超过W，求价值V最大值。</p></li><li><p>两个字符串其中一个通过插入、删除和替换变成另外一个字符。每一种操作有对应的代价，分别是ic、dc、rc。求最小代价。</p></li></ul><p>len(s1) = m, len(s2) = n</p><p><em>最优解法：</em>时间O(m*n) 空间O(m*n)</p><p>生成dp[m+1][n+1]。dp[i][j]代表s1[0~i-1]编辑成s2[0~j-1]的最小代价。</p><p>dp[i][0]表示s1[0~i-1]编辑成空串的最小代价，也就是dc*i。同理dp[0][j]<br>= ic*j。</p><p>dp[i][j] = 取下面四种情况的最小值</p><ol><li><p>dc + dp[i-1][j]</p></li><li><p>dp[i][j-1] + ic</p></li><li><p>如果s1[i-1] != s2[j-1]，dp[i-1][j-1] + rc</p></li><li><p>如果s1[i-1] == s2[j-1]，dp[i-1][j-1]</p></li></ol><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="概况-7"><a href="#概况-7" class="headerlink" title="概况"></a>概况</h2><p>&amp;, |, ^, ~, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</p><h2 id="习题-7"><a href="#习题-7" class="headerlink" title="习题"></a>习题</h2><ul><li>网页黑名单系统/垃圾邮件过滤系统/爬虫的网址判断重复系统。有一定程度的容错率。对空间的要求比较严格。布隆过滤器<br>（精确代表一个集合，精确判断某一元素是否在此集合中，精确程度有用户的具体设计决定）优势在于利用很少的空间可以做到精确率较高。</li></ul><p><em>分析：</em></p><p>有一个m个字节的bitarray。有k个优秀且各自独立的哈希函数。算出来的结果都对m取mod，把相应位置设置成1。之后重复操作，已经设置成1的不会变成0。代表之前所有输入对象的集合。假设新输入URL=a。用k个函数算哈希值取mod。如果只要有一个不为0，说明a一定不在集合里面。如果全部为1，则a大概率之前出现过。但是有一定误判几率。宁可错杀三千，绝不放过一个。</p><p><em>最优解法</em>：时间O(n) 空间O(m)</p><p>bitarray大小为m，样本数量为n，失误率为p。m太小，会增加失误率。</p><p>n = 100亿，p = 0.01%</p><p>单个样本大小不影响布隆过滤器大小，只影响了哈希函数的实现细节。</p><p>m = -n*(ln p)/(ln 2)^2</p><p>求得m = 19.19n 向上取整为20n。2000亿bit，约为25G。</p><p>k = (ln 2)*m/n = 14</p><p>失误率：[1-e^(-n*k/m) ]^k = 0.006%</p><ul><li>不用额外变量，交换两个整数的值。</li></ul><p><em>最优解法</em>：时间O(1) 空间O(1)</p><pre class=" language-java"><code class="language-java">a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a = a0^b0, b = b0</span>b <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a = a0^b0, b = a0^b0^b0 = a0</span>a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a = a0^b0^a0 = b0</span></code></pre><ul><li>给定两个整数a和b，不经过比较判断，返回较大者。</li></ul><p><em>最优解法</em>：时间O(1) 空间O(1)</p><p>根据a-b符号进行判断。注意如果ab符号不同，a-b是有溢出风险的。</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">2</span><span class="token punctuation">.</span>      <span class="token keyword">return</span> n<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token number">3</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">4</span><span class="token punctuation">.</span>      <span class="token number">5</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">6</span><span class="token punctuation">.</span>      <span class="token keyword">return</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">7</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">8</span><span class="token punctuation">.</span>      <span class="token number">9</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// a - b有溢出风险  </span><span class="token number">10</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">11</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token number">12</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> scA <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">13</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> scB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>scA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">14</span><span class="token punctuation">.</span>      <span class="token keyword">return</span> a<span class="token operator">*</span>scA <span class="token operator">+</span> b<span class="token operator">*</span>scB<span class="token punctuation">;</span>  <span class="token number">15</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">16</span><span class="token punctuation">.</span>      <span class="token number">17</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 正确解  </span><span class="token number">18</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">19</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> as <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">20</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">21</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> cs <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">22</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> diffSign <span class="token operator">=</span> as<span class="token operator">^</span>bs<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a&amp;b符号相同为1，否则为0  </span><span class="token number">23</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> returnA <span class="token operator">=</span> diffSign<span class="token operator">*</span>as <span class="token operator">+</span> <span class="token function">flip</span><span class="token punctuation">(</span>diffSign<span class="token punctuation">)</span><span class="token operator">*</span>cs<span class="token punctuation">;</span>  <span class="token number">24</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> returnB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>returnA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">25</span><span class="token punctuation">.</span>      <span class="token keyword">return</span> a<span class="token operator">*</span>returnA <span class="token operator">+</span> b<span class="token operator">*</span>returnB<span class="token punctuation">;</span>  <span class="token number">26</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><ul><li>给定int数组arr，其中只有一个数出现了奇数次。请打印这个数。</li></ul><p><em>分析：</em>n异或0结果为n。n与n异或结果为0。异或运算满足交换律和结合律。</p><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>把整个数组的值异或一遍，最后的结果就是只出现了奇数次的值。</p><ul><li>给定int数组arr，其中有两个数出现了奇数次。请打印这两个数。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>假设这两个数分别是a和b。把整个数组的值异或一遍，最后的结果就是a异或b。因为这两个数是不同的数，所以异或结果肯定不是0。结果用32个bit表示，第k为是1。说明a和b的第k位不一样。</p><p>申明一个新的变量，把整个数组的值中第k为是1的数异或一遍，得到的结果就是a。那么b就是两次结果的异或。</p><ul><li>完成对明文text的加密和解密工作。</li></ul><p><em>最优解法</em>：时间O(n) 空间O(1)</p><p>明文text，用户给定密码pw，密文为cipher。如果text长度大于pw，循环使用pw与text进行按位异或。</p><p>cipher = text^pw， text = cipher ^ pw</p><h1 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h1><h2 id="概况-8"><a href="#概况-8" class="headerlink" title="概况"></a>概况</h2><p>古典概率计算。斐波那契数列和卡特兰数。</p><h2 id="习题-8"><a href="#习题-8" class="headerlink" title="习题"></a>习题</h2><ul><li>在6*9的方格中，以左上角为起点，右下角为终点，每次只能向下走或者向右走，请问一共多少种走法。</li></ul><p>一共走13步，其中5步向下，8步向右。C(13, 5)*C(13, 8)</p><ul><li>7个人排一列，要求A在B左边。</li></ul><p>7! / 2 = 2520</p><ul><li>6个人排一列，要求A和B不相邻，A和C不相邻。</li></ul><p>解法一：</p><p>6个人全排列 = 6! = 720</p><p>A和B相邻 = 5! * 2 = 240</p><p>A和C相邻 = 240</p><p>A和B和C相邻 = 4! * 2 = 48</p><p>720 - 240*2 + 48 = 288</p><p>解法二：</p><p>A在左侧开头，邻居有三种选择，剩下4人全排列 = 3*4! = 72</p><p>同理，A在右侧开头，有72种</p><p>A在中间(4个中间位置)，左右邻居不能是B或者C（邻居剩下三种选择，但是可以互换位置，剩下的人全排列）=<br>4 * C(3,2) *2 * 3! = 144</p><p>72 + 72 + 144 = 288</p><ul><li>10颗糖，每天至少吃一颗，问有多少种吃法。</li></ul><p>1天吃完：1种</p><p>2天：C(9, 1) = 9</p><p>3天：C(9, 2) = 36</p><p>…</p><p>10天：C(9, 9) = 1</p><p>C(n, 0) +C(n, 1) + C(n, 2) + … + C(n, n) = 2^n</p><ul><li>假设有n对左右括号，请求出合法的排列有多少种。合法是指每一个右括号必须与左括号配对。</li></ul><p>总排列数C(2n, n) 其中包括非法排列。</p><p>非法情况实际上是在排列中出现右括号比左括号多一个。将”(“记为1，”)”记为-1。一个不合法序列就是第一次出现-1比1多。将这个部分1和-1对调。经过如上变换后，得到一个n+1个1和n-1个-1组成的排列。（而且可以还原，两者一一对应）</p><p>非法排列数 = C(2n, n+1) = C(2n, n-1)</p><p>合法排列数 = C(2n, n) - C(2n, n+1) = C(2n, n) / (n + 1)<br>--卡特兰数重要公式</p><ul><li>求n个无差别的节点构成的二叉树有多少种不同的结构f(n)。</li></ul><p>f(0) = 1</p><p>把1节点当头，没有左子树，其他9个构成右子树。结构数为f(n-1)</p><p>把2节点当头，左子树只有1种情况，结构数为f(n-2)</p><p>把3节点当头，左子树有f(2)种情况，右子树有f(n-3)，结构数为两者乘积</p><p>…</p><p>当f(0) = f(1) = 1, f(2) = 2, f(3) = 5时</p><p>f(n) = f(0)*f(n-1) + f(1)*f(n-2) + … + f(n-1)*f(0) = C(2n, n) / (n</p><ul><li><ol><li>--卡特兰数重要公式</li></ol></li></ul><ul><li>在图书馆一共6个人在排队，3个还《面试宝典》一书，3个在借《面试宝典》一书，图书馆此时没有了面试宝典了，求他们排队的总数？</li></ul><p>C<del>3</del> = 5 (卡特兰数)；所以总数为5 * 3! *3! =180。</p><ul><li>12个人高矮不同，排两排。每排从矮到高。第二排的比第一排对应位置的人高。求排列方式。</li></ul><p>将12个人按照从矮到高的顺序编号。用0和1分别表示一个人在第一排或者第二排。如果整个序列有前缀1比0个数多的话，说明第二排的人多了，往后安排必然会出现第一排的人比第二排的人高的情况。问题就被转化成任意前缀中，1的个数不多于0的个数的情况。</p><ul><li>有n个信封，里面各有一封信。把信件拿出来，再装回去，但是不能装回原来的信封。问有多少种装法？</li></ul><p>考虑n大于2的情况。装法记为f(n)。</p><p>假设第n封信放入了第i个信封</p><p>情况1：第i封信放入了第n个信封中，后续为f(n-2)</p><p>情况2：第i封信没有放入了第n个信封中，后续为f(n-1)</p><p>n封信放入第i个信封，i的选择有(n-1)种</p><p>总数f(n) = (n-1)*(f(n-1)+f(n-2))</p><h1 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h1><h2 id="概况-9"><a href="#概况-9" class="headerlink" title="概况"></a>概况</h2><p>往往出现古典概率和期望的计算。</p><p>概率可以利用随机来改进著名算法（快速排序），也可以用来构造随机数发生器。</p><h2 id="习题-9"><a href="#习题-9" class="headerlink" title="习题"></a>习题</h2><ul><li>一个家庭如果生女孩就一直生，直到生出男孩位置。假设一胎一个孩子。问时间足够长，男女比例是多少？</li></ul><p>1:1。假设有2n个家庭。n个第一胎出男，有一个孩子。有n/2的家庭一胎女二胎男，有两个孩子。有n/4的家庭一二胎女三胎男，有三个孩子。孩子总数为n+(n/2)*2+(n/4)*3+…<br>= 4n。因为每一个家庭都有一个男孩，总共有2n个男孩。所以比例是1:1。</p><ul><li>给定一个等概率随机产生1-5的随机函数，除此之外，不能使用任何额外的随机机制，请实现等概率随机产生1-7的随机函数。</li></ul><p>将等概率随机产生1-5的函数-1命名为f()。f()*5可以得到0、5、10、15、20。将这个函数命名为g()。g()+f()可以产生0-24上每一个数。如果得到的数大于20，重复调用g()+f()。得到的结果%7+1。</p><p>不能连续调用四次原来的随机函数然后%7+1的原因：每个数字得到几率不一样。</p><ul><li>给定一个以p概率产生0,<br>1-p概率产生1的随机函数f，不知道p的值，除此之外，不能使用任何额外的随机机制，请实现等概率随机产生0和1的随机函数。</li></ul><p>连续两次调用，产生01或10序列的概率为p(1-p)，产生其他序列的话就再重新调用两次。如果产生了01，返回0；否则返回1。</p><ul><li>给定一个随机函数f()等概率随机返回一个在[0,1)范围上的浮点数，我们知道在[0,x)范围上的数出现的概率是x（0&lt;x≤1）。给定一个大于0的整数k，请实现一个函数返回在[0,1)范围上的浮点数，但是在[0,x)范围上的数出现的概率是x^k（0&lt;x≤1）。</li></ul><p>在[0,x)范围上的数，从概率x调整为x^2。做法是调用两次f()，返回较大的数。所以本题其实是调用k次f()，返回最大数。</p><ul><li>给定一个长度为n且没重复元素的数组arr和一个整数m，实现函数等概率随机打印arr中的m个数。</li></ul><p>在0~n-1中随机得到一个位置a，打印。将a与n-1位置的数字交换。在0~n-2中随机得到一个位置b，打印。重复m次。</p><ul><li>给定一个机器按自然数序列的方式吐出球：1、2、3…。你有一个袋子，里面最多能装k个球。一旦球被扔掉，不可拿回。设计一种选择方式，使得机器吐出n号球时，袋子中球数是k个，并且从1到n号球的每一个被选入袋子的概率都是k/n。（随着n变化，被选中的概率要动态变化）。</li></ul><p>蓄水池抽样算法。处理1到k号球时，直接放进袋子。处理第i号球时，以k/i的概率决定是否将第i号球放进袋子。如果决定不放，直接扔掉这个球。否则，就从袋子里随机扔掉一个球，然后把i号球放入。</p><h1 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h1><h2 id="概况-10"><a href="#概况-10" class="headerlink" title="概况"></a>概况</h2><p>MapReduce和Hadoop逐渐成为热门。</p><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>哈希函数：也叫散列函数。输入域可以是非常大的范围，但是输出域是固定范围。假设为s。典型的哈希函数拥有无限输入域。输入值相同时，返回值一样。输入值不同时，返回值可能不同。不同输入值得到的哈希值，整体均匀的分布在输出域上（评价优劣的关键）。</p><p>Map阶段：把大任务分成子任务。</p><p>Reduce阶段：把子任务并发处理的结果合并。</p><h2 id="关键点-3"><a href="#关键点-3" class="headerlink" title="关键点"></a>关键点</h2><ol><li><p>分布式存储的设计细节以及容灾策略。</p></li><li><p>任务分配策略与任务进度跟踪的细节设计，节点状态的呈现。</p></li><li><p>多用权限的控制。</p></li><li><p>根据内存限制确定统计区间大小。根据区间大小，得到有多少个变量。</p></li></ol><h2 id="习题-10"><a href="#习题-10" class="headerlink" title="习题"></a>习题</h2><ul><li>统计一篇文章中每个单词出现的个数。</li></ul><p>文章预处理：去掉标点符号。对练字符的处理（单词结尾处没写完）。对于缩写的处理。大小写。</p><p>map阶段：输入是只包含单词之后的文本。对每个单词生成词频为1的记录。一个单词可能有多个词频为1的记录，此时还没有合并。根据哈希函数的值，分配子任务。每个子任务中包含若干种单词，但同一种单词不会分配进不同的子任务中。</p><ul><li>对10亿个ipv4的ip地址进行排序，每个ip只出现一次。</li></ul><p>ipv4的ip数量≈42亿。可以将ip转化为无符号整数。排序之后，再转化回去。这种方法大约消耗4G内存（每个整数4个字节）。</p><p>更好的方法是申请长度2^32的bit类型的数组（占用128MB）。如果整数k出现，将bitmap上k-1位置变成1。之后从bitmap位置0开始遍历，把ip通过位置值还原。</p><ul><li>对10亿个人的年龄进行排序。（和上题区别：有重复值，值域受限）</li></ul><p>长度为200的数组</p><ul><li>有20亿个全是32位整数的大文件，在其中找到出现次数最多的数。内存限制2G。</li></ul><p>用哈希表，每条记录key和value各占用4字节。记录条数20亿，需要16G内存。</p><p>正确做法是对20亿个大文件通过哈希函数进行分流。同一种数不会被分流到不同文件。对于不同的数，每个文件中含有整数的种数几乎一样。用哈希表处理每一个文件即可。</p><ul><li>32位无符号整数的范围是0~4294967295。现在有一个正好包含40亿个无符号整数的文件（必然有没出现过的数）。使用最多10M内存，只需要找到一个没出现过的数字即可。</li></ul><p>申请一个长度为2^32方的bitmap。大约占用500M内存。不符合要求。</p><p>将0~2^32-1范围分成64个区间。每个区间应该装下2^32/64个数。必然有区间计数不足2^32/64。找到一个满足这样条件的区间。只关注这一个区间上的数。用bitmap统计整数出现的情况。需要占用的空间是500M/64<br>= 8M。</p><ul><li>某搜索公司一天的用户搜索词汇有一百亿。设计一种求出每天最热100词的可行办法。</li></ul><p>仍然用哈希函数进行分流到每一台机器上。每一台机器上可以继续用哈希函数进行分流，形成不同的文件。处理每一个文件，得到每个小文件中词汇的词频统计。每个文件建立纪录之后，利用小根堆进行top100的筛选。然后采用外排序，得到每一台机器上的top100。</p><ul><li>工程师常使用服务器集群来设计和实现数据缓存，以下是常见策略。无论是添加、查询还是删除数据，都先将数据id通过哈希函数转换成一个值，记为key。如果目前机器有n台，则计算key%n的值，用作该数据所属的机器编号。所有操作都在这台机器上进行。请分析这种方法的问题，并提出可行的改进办法。</li></ul><p>潜在问题是，如果增加或删除机器，数据迁移的代价很大。</p><p>一致性哈希算法：</p><p>假设数据id经过哈希值计算后的结果是0~2^32。把这个值域做成环形，首尾相连。假设有三台机器，也有自己的id，通过哈希函数计算在环上的位置。数据id用哈希函数算出哈希值，映射到环上。顺时针找寻离自己最近的机器（数据归属在这台机器上）。添加和删除一个机器时，只需要调整环上部分数据的归属，减小了重复哈希的代价。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>牛客网视频 by 左程云</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/Blog/2020/05/01/python/"/>
      <url>/Blog/2020/05/01/python/</url>
      
        <content type="html"><![CDATA[<h1 id="变量类型及基本操作"><a href="#变量类型及基本操作" class="headerlink" title="变量类型及基本操作"></a>变量类型及基本操作</h1><h2 id="赋值方式"><a href="#赋值方式" class="headerlink" title="赋值方式"></a>赋值方式</h2><h3 id="单个赋值"><a href="#单个赋值" class="headerlink" title="单个赋值"></a>单个赋值</h3><pre><code>x=1y=2</code></pre><h3 id="多个赋值"><a href="#多个赋值" class="headerlink" title="多个赋值"></a>多个赋值</h3><p><code>x, y = 1,2</code></p><h3 id="用列表赋值"><a href="#用列表赋值" class="headerlink" title="用列表赋值"></a>用列表赋值</h3><p><code>x, y = [1, 2]</code></p><h3 id="用字符串赋值"><a href="#用字符串赋值" class="headerlink" title="用字符串赋值"></a>用字符串赋值</h3><p>字符个数需要与对象个数相等，且赋值后对象类型为字符串<br><code>x, y = ‘12’</code></p><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>调用print()方法时，相当于调用了java中的println()。<br>括号内用逗号隔开不同元素，此时不需要将各个元素转换成字符串，且元素之间自动生成空格。<br>用+连接不同元素需要将各个元素转换成字符串，且元素之间不会自动生成空格。<br>print()中调用end参数决定下一次print的开始位置。默认是end=’\n’，也就是另起一行。<br><code>print(‘str %s %d str%.2f’ %(x,y,z))</code>String用%s，int用%d, float用%.2f（表示保留两位小数）。  </p><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>消除所有警告</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span>‘ignore’<span class="token punctuation">)</span></code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>i.    可用[]定义空列表。<br>ii.    运用extend方法可以将列表或者元组中的元素拆分后单独加入列表中。<br>iii.运用append方法可以将单个元素，整个列表或元组以整体形势计入列表中。<br>iv.    +=操作与extend方法类似<br>v.    运用[start at : end before]将列表切片。<br>vi.    [:-num]返回将最后n个元素去除后的列表<br>vii. sorted(list)返回有序列表但并不改变列表本身<br>viii. 列表调用.sort()方法将列表排序且改变列表本身，但不返回值  </p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>i.    可用()定义空列表。<br>ii.    与列表的区别：元组形成后不可更改，只可以用+=操作增加。设计理念的不同使得元组调用起来更省时间<br>iii.有切片功能<br>iv.    可使用sorted(tuple)，但是元组没有sort()<br>v.    元组内只有一个元素的时候在后面加逗号，如(1,)  </p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>i.    可用{}定义空列表。<br>ii.    键与键值相配对。调用时使用键而非指数作为索引<br>iii.给一个不存在的键赋值会直接将这个键加入字典中<br>iv.    删除：<code>del dict[‘键’]</code>将该组键与键值一起删掉<br>v.    更改：</p><pre class=" language-python"><code class="language-python">dict<span class="token punctuation">[</span>‘新键’<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">.</span>pop<span class="token punctuation">[</span>‘老键’<span class="token punctuation">]</span> dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;‘新键’: dict.pop(‘老键’)&amp;#125;)</span><span class="token comment" spellcheck="true"># 先删后加</span></code></pre><p>vi.    groupby()</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>i.    可用set()定义空列表。<br>ii.    唯一性：同一元素最多存在一个<br>iii. 不支持索引<br>iv.    set(字符串)会将其转成单个字符的值进行插入<br>v.    add()用于单个元素的增加<br>vi.    update([])用于多个元素的增加<br>vii.    remove()用于单个元素的删减，且元素必须存在于集合中<br>viii.    discard()用于单个元素的删减，但元素可以不存在于集合中<br>ix.    pop()随机返回一个元素值，并删除。集合为空时报错<br>x.    clear()清空整个集合<br>xi.    set1.union(set2)返回一个包含两个集合中所有元素的新集合<br>xii.    set1.intersection(set2)返回一个包含两个集合中相同元素的新集合<br>xiii.    set1.difference(set2)返回一个set1有但set2中没有的元素的新集合<br>xiv.    set1.symmetric_difference(set2)返回两个集合中不同元素的新集合   </p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>zip()可以把多个列表或者数列中每个元素对应位置的书集合在一起。首先这三个列表要一样长，把每个位置相同索引的数放到一起。<br>e.g.:  </p><pre><code>list1 = [1,2,3]list2 = [4,5,6]list3 = [7,8,9]list = list(zip(list1,list2,list3))</code></pre><p>里面会存有[(1, 4, 7), (2, 5, 8), (3, 6, 9)]</p><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p><code>WeekdayLocator(Monday)</code>表示定位到特定的一天<br><code>DayLocator()</code>表示以一天为最小的单位来表示<br><code>DateFormatter(‘%m %d, %Y)</code> # Oct 12, 2018<br><code>date2num(list)</code>表示将列表转换成日期形式<br><code>date.isocalendar()</code>返回一个包含三个参数的元组(年，周，星期几)。最后一个参数值域为1-7,1表示周一  </p><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><h2 id="普通读写"><a href="#普通读写" class="headerlink" title="普通读写"></a>普通读写</h2><p>fl = open(‘路径’,’操作’)<br>第二个参数如果是r，则读取文件；如果是w，则写入文件。<br>读取文件后，采用.read()会按原文件格式行成字符串，采用.readlines()会将原文件按行存进一个列表。<br>写入文件调用.write()。  </p><h2 id="调用pandas"><a href="#调用pandas" class="headerlink" title="调用pandas"></a>调用pandas</h2><p><code>df = pd.read_csv(‘路径’, sep = ‘,’, index_col = 0)  </code><br>基本上一种文件对应一个pd的read方法。读取xlsx文件调用.read_excel(), 读取csv文件调用.read_csv(), 读取txt调用.read_table()。<br>sep表示分隔符的标记，可省略。<br>Index_col表示以读取内容的哪一列作为表格第一列，可省略。如果省略，pd会自动生成一列序数列。<br><code>df.head(# of lines)</code>显示数据前n行，n默认值为5。df.tail()显示最后n行。  </p><p>#将DataFrame存储为csv, index表示是否显示行名(默认为真)<br><code>df.to_csv(&quot;Predict.csv&quot;, index=False, sep=&#39;,&#39;)</code></p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>退格缩进很重要，Python不像java有大括号框定范围。记得加冒号。</p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><pre><code>x = &#123;1, 2, 3&#125;if 3 in x:    …elif 4 in x:     …else:    …</code></pre><p>注意Python中不能用java（!Bool）的方式表示Bool的否定来进行判断。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>i.    for  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#列表中的每一个值，也可以循环字符串  </span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#循环0-3  </span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#循环1-29，步长为2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> df<span class="token punctuation">.</span>index<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#循环数据框的每一行</span></code></pre><p>ii.    while<br>语法与if类似</p><h3 id="pass-continue-break"><a href="#pass-continue-break" class="headerlink" title="pass, continue, break"></a>pass, continue, break</h3><p>pass是占位符，让代码更加完整。因为定义的函数，条件判断或者循环中的内容为空的话，程序会报错。<br>continue继续下一个循环。<br>break跳出当前循环。  </p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>def 函数名(参数):<br>    return var</p><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>以numpy数据结构为基础构建的库。</p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 转换成序列</span>s1<span class="token punctuation">.</span>values <span class="token comment" spellcheck="true"># 返回所包含的值</span>s1<span class="token punctuation">.</span> index <span class="token comment" spellcheck="true"># 返回起始点和步长。非等差数列终止点和步长返回一个不太靠谱的数值。</span></code></pre><p>索引方式与列表、元组相同</p><p><code>s2 = pd.Series([1,2,3,4,5], index = [‘a’, ’b’, ’c’, ’d’, ’e’])</code>索引方式与字典相同<br><code>s1.index = [‘a’, ’b’, ’c’, ’d’, ’e’]</code> 重新给索引赋值<br><code>s1 + s2</code>如果索引相同，序列可以直接相加；否则返回NaN。  </p><p><code>s1.isnull()</code> 未被赋值过的索引返回True<br><code>s1.notnull()</code> 反之亦然   </p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><h3 id="打印-1"><a href="#打印-1" class="headerlink" title="打印"></a>打印</h3><pre class=" language-python"><code class="language-python">dat1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;‘A’:[1,2,3], ‘B’:[3,4,5], ‘C’:[5,7,9]&amp;#125;</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dat1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将这组数据以表格形式打印出来</span></code></pre><pre><code>dat2 = &amp;#123;‘A’:1, ‘B’:2, ‘C’:3&amp;#125;df2 = pd.DataFrame(dat2)print(df2) # 当数据只有一个值的时候会报错，因为不是列表形式</code></pre><p>需要修改第二行代码：<br><code>df2 = pd.DataFrame(dat2, index = [0])</code><br>index是每一行的索引  </p><h3 id="指定列名"><a href="#指定列名" class="headerlink" title="指定列名"></a>指定列名</h3><p>字典法</p><pre class=" language-python"><code class="language-python">d  <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;‘one’ : pd.Series([1,2,3], index = [‘a’,’b’,’c’]), ‘two : pd.Series([1,2,3,4], index = [‘a’,’b’,’c’,’d’])&amp;#125;</span>df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 行名是index，列名是字典名</span>df<span class="token punctuation">.</span>index <span class="token comment" spellcheck="true"># return Index(index = [‘a’,’b’,’c’,’d’], dtype=’object’)</span>df<span class="token punctuation">.</span>columns  <span class="token comment" spellcheck="true"># return Index([‘one’, ‘two’], dtype=’object’)</span></code></pre><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol><li>默认按列进行索引，直接按行进行索引会报错。填入一列进行索引时，类型为序列；若是填入多列进行索引，类型是DataFrame。<br>想要返回特定数据，使用df[column][index]进行索引。index可以采用切片，且后一个数值表示end at而不是像列表一样的end before。当需要选择多列的时候，用列表表示column变量，元素用逗号隔开。不可以使用“:”操作。</li><li>调用loc和iloc函数。<br>loc函数使用指定的行/列名<br>df.loc[[行][列]] #用逗号将所需要行/列隔开<br>df.loc[行start at : end before,列start at : end before]<br>iloc函数使用默认的行/列名（从0开始，依次递增）<br>语法与loc函数相同  </li><li>利用条件进行切片<br>e.g.<br><code>df[df[‘A’]&gt;3]</code> 选取A列值大于3的行<br><code>df[df&lt;10]</code> 打印整个数据结构，显示小于10的值，其他用NaN表示<br><code>df[(df&gt;3)&amp;(df&lt;10)]</code> # 用”&amp;”或者”|’进行逻辑连接  </li><li>对不存在的列进行赋值，会直接增加这一列（与字典类似）。</li><li>调用apply()函数，默认对每一列进行操作。可以调整参数axis = 1，使得对每一行进行操作。如果是利用切片功能获取了一列再调用apply()，则是对此列中每一个数进行操作。<br>e.g. <code>df.apply(np.sqrt)</code><br>在apply()使用lambda参数进行简单的操作。<br>e.g. <code>df.apply(lambda x: x+1) </code>仍然是以列为单位进行操作<br>    - 对其中一列调用.pct_change()函数可以计算百分比差值。<br>    - 对其中一列调用.shift(m)函数可以返回该单元格在此列向上m行的值，m可以是负数。</li></ol><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span>‘row index’<span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>‘column name’<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 删除列</span></code></pre><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="DateTime"><a href="#DateTime" class="headerlink" title="DateTime"></a>DateTime</h3><p>将包含时间的字符串格式的Date变量转换成时间戳格式<br><code>df1[&#39;Date&#39;] = pd.to_datetime(df1[&#39;Date&#39;] , format = &#39;%Y-%m-%d&#39;)</code></p><h3 id="Numeric"><a href="#Numeric" class="headerlink" title="Numeric"></a>Numeric</h3><p>将其他格式转换成数字格式<code>pd.to_numeric</code></p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><h3 id="Concatenate"><a href="#Concatenate" class="headerlink" title="Concatenate"></a>Concatenate</h3><p><code>pd.concat([df1, df2, df3])</code><br>其他参数：</p><ul><li>axis = 0 (默认)，以列为标准对齐(合并相同名字的列，显示所有行，行名重复不会报错。缺失数据以NaN表示。)；axis = 1， 以行为标准对齐。</li><li>dropna(how = ‘any’)只要该行有NaN则该行不会显示；dropna(how = ‘all’)当该行所有值均为NaN时该行不会显示。</li><li>join = ‘outer’（默认），返回全部数据；join = ‘inner’，返回共有数据；join_axes = [df1.index]保留df1中所有数据，尝试合并其他表中数据。</li><li>ignore_index = True，忽略行/列名，以序数替代。</li></ul><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p><code>pd.merge(left, right, on = ‘公共列’) </code> 最多合并两个表<br>其他参数：</p><ul><li>on = ‘公共列’，合并后公共列只显示一次。</li><li>how = ‘inner’ (默认)；how = ‘outer’；how = ‘left/right’。意义与concat函数的join参数相同。</li><li>left_index = True, right_on = 右表名[‘右表列’] (这种形式解决了两个表中有相同列名但正好不是要被合并的列的问题。如果不存在这个问题，可以使用right_on = ‘右表列’）。这组命令可以配合使用，表示使用左表的index与右表的列进行匹配输出结果。也可以配合使用right_index和left_on参数。</li></ul><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><p><code>left.join(right) </code>相当于以左表为基础做merge<br>其他参数：</p><ul><li>how = ‘inner’；how = ‘outer’。意义与concat函数的join参数相同。</li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>align()<br>默认outer join.</li><li>rank()</li><li>sort()<br>df.sort_index(axis = 1, ascending = False)<br>df.sort_value(axis = 1, ascending = False)</li></ul><h2 id="补充缺失值"><a href="#补充缺失值" class="headerlink" title="补充缺失值"></a>补充缺失值</h2><p>df.fillna(value  = 10)</p><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>pd.melt()</p><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p><code>np.random.randn(3) </code> 返回3个随机数<br><code>np.random.randn(10, 4)</code> 返回10*4(矩阵形式)个随机数<br>注意：<br>numpy.random.randn()是从标准正态分布中返回一个或多个样本值。<br>numpy.random.rand()的随机样本位于[0,1)中。  </p><h2 id="多维数组变换"><a href="#多维数组变换" class="headerlink" title="多维数组变换"></a>多维数组变换</h2><pre class=" language-python"><code class="language-python">X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>转换为一维数组</p><h2 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h2><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#以0.1位单位，生成0-10的数字</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转换成矩阵</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token operator">*</span>x <span class="token operator">+</span> ynp<span class="token punctuation">.</span>fromfunction<span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="正余弦"><a href="#正余弦" class="headerlink" title="正余弦"></a>正余弦</h2><p><code>np.sin(x)</code></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span>‘file<span class="token punctuation">.</span>txt’<span class="token punctuation">)</span>np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span>‘file<span class="token punctuation">.</span>csv’<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> ‘<span class="token punctuation">,</span>’<span class="token punctuation">)</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span>‘file<span class="token punctuation">.</span>txt’<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> ‘ ’<span class="token punctuation">)</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span>‘file<span class="token punctuation">.</span>csv’<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> ‘<span class="token punctuation">,</span>’<span class="token punctuation">)</span></code></pre><h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><h2 id="matplotlib-pyplot"><a href="#matplotlib-pyplot" class="headerlink" title="matplotlib.pyplot"></a>matplotlib.pyplot</h2><p>折线图： </p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#定义图片大小</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>label <span class="token operator">=</span> ‘A’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#代入数值并画出图片（未显示在屏幕上），默认为折线图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>label <span class="token operator">=</span> ‘B’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#多组数据进行对比</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>‘’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#图片标题</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>‘’<span class="token punctuation">)</span> 或plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>‘’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#轴标题</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">(</span>‘A’<span class="token punctuation">,</span>’B’<span class="token punctuation">)</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> loc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#给两组数据做标记并设置字体大小和显示位置（如果画图时没有使用label参数进行标记，此处标记要和上面画图的顺序相对应；如果画图时已经进行了标记，此处可以省略使用元组进行标记）</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将图片打印出来</span></code></pre><p>柱状图：<br><code>plt.bar(x,y, color = ‘#9999ff’, width = 0.5) </code> 设置颜色和柱子的宽度。<br>柱状图想要进行两组数据的对比需要改变两组数据x的坐标(柱子的中心点)，否则柱子会重叠在一起。<br>例：</p><pre class=" language-python"><code class="language-python">x1<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">2.25</span><span class="token punctuation">,</span> …<span class="token punctuation">]</span>x2<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">1.75</span><span class="token punctuation">,</span> <span class="token number">2.75</span><span class="token punctuation">,</span> …<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span> </code></pre><p>点状图： </p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>或者plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> ’<span class="token punctuation">.</span>’<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加趋势线</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">(</span>‘real data’<span class="token punctuation">,</span> ‘fitted line’<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>盒状图： </p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 研究outlier</span>plt<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 也可以把两组数据画在一个图上</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>‘A’<span class="token punctuation">,</span> ‘B’<span class="token punctuation">]</span><span class="token punctuation">)</span>或plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将轴的标记从原来的值([1,2])更改成新的值[‘A’, ‘B’]</span></code></pre><p>直方图：<br><code>plt.hist(x, # of pillar, color = ‘navy’, alpha = 0.5) # alpha调色彩饱和度</code></p><p>其他技巧：<br>改变x轴显示值且并不标出所有值（易读）：</p><pre class=" language-python"><code class="language-python">k <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设定间隔长度</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>df1<span class="token punctuation">.</span>index<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> df1<span class="token punctuation">.</span>Date<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>ticks中r’$\pi/2$’ 显示π/2 (Latex)</p><p>简便画图：</p><pre class=" language-python"><code class="language-python">df1<span class="token punctuation">.</span>index <span class="token operator">=</span> df1<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#注意Date不能是字符串格式</span>df1<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>同时显示多个图：</p><pre class=" language-python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#包括了所有subplot范围的区域</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#一共四张小图，每一行显示两张，这个是第一张图</span>df1<span class="token punctuation">.</span>High<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>label <span class="token operator">=</span> <span class="token string">'High'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#High均为列名</span></code></pre><p>对图进行注释：</p><pre class=" language-python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>x <span class="token operator">=</span> df1<span class="token punctuation">.</span>Close<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span>y <span class="token operator">=</span> df2<span class="token punctuation">.</span>Close<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span>str<span class="token punctuation">(</span>df1<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#左边参数为标记内容，右边参数为被标记对象</span></code></pre><h2 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>image <span class="token keyword">import</span> imreadimg <span class="token operator">=</span> imread<span class="token punctuation">(</span>‘path’<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> Seaborn <span class="token keyword">as</span> snssns<span class="token punctuation">.</span>regplot<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#自动添加回归线和CI</span><span class="token comment" spellcheck="true">#画出分布图</span>sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>df_train<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#画散点图加回归线</span>sns<span class="token punctuation">.</span>lmplot<span class="token punctuation">(</span>x<span class="token operator">=</span>’attack’<span class="token punctuation">,</span> y<span class="token operator">=</span>’defense’<span class="token punctuation">,</span> data<span class="token operator">=</span>df<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>lmplot<span class="token punctuation">(</span>x<span class="token operator">=</span>df<span class="token punctuation">.</span>attack<span class="token punctuation">,</span> y<span class="token operator">=</span>df<span class="token punctuation">.</span>defense<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#另一种写法</span><span class="token comment" spellcheck="true"># 不想要reg line的话设置fit_reg = False</span><span class="token comment" spellcheck="true">#画小提琴图</span>sns<span class="token punctuation">.</span>set_style<span class="token punctuation">(</span>‘whitegrid’<span class="token punctuation">)</span>sns<span class="token punctuation">.</span>violinplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#画蜂群图</span>sns<span class="token punctuation">.</span>swarmplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#alpha设置透明度</span><span class="token comment" spellcheck="true">#热图</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>df<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#统计图</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token punctuation">,</span>y <span class="token operator">=</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#和barplot很像</span><span class="token comment" spellcheck="true">#因子图</span>g <span class="token operator">=</span> sns<span class="token punctuation">.</span>factorplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>’swarm’<span class="token punctuation">)</span>g<span class="token punctuation">.</span> set_xticklabels<span class="token punctuation">(</span>rotation <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#x坐标旋转</span></code></pre><h1 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h1><p><code>import urllib.request</code><br>读取网站数据：</p><pre class=" language-python"><code class="language-python">file <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>data <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>js <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>‘utf8’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用utf8格式解码</span>file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>parse_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>js<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转换成json文件</span>ps <span class="token operator">=</span> parse_data<span class="token punctuation">[</span>‘表名’<span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">.</span>from_dict<span class="token punctuation">(</span>ps<span class="token punctuation">,</span> orient <span class="token operator">=</span> ‘index’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用index做每一行的名字，默认是每一行的键名</span></code></pre><h1 id="Scipy"><a href="#Scipy" class="headerlink" title="Scipy"></a>Scipy</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> minimize <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> …<span class="token comment" spellcheck="true">#x0是初始值， 可以是一个np.array</span>res <span class="token operator">=</span> minimize<span class="token punctuation">(</span>f<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> method <span class="token operator">=</span> ‘nelder<span class="token operator">-</span>mead’<span class="token punctuation">,</span> option<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;‘xtol’:1e-8, ‘disp’: True， ‘maxiter’: 1000 &amp;#125;)</span></code></pre><pre><code>import scipy.stats as sty = train[&#39;SalePrice&#39;]plt.figure(1); plt.title(&#39;Johnson SU&#39;)sns.distplot(y, kde=False, fit=st.johnsonsu)plt.figure(2); plt.title(&#39;Normal&#39;)sns.distplot(y, kde=False, fit=st.norm)plt.figure(3); plt.title(&#39;Log Normal&#39;)sns.distplot(y, kde=False, fit=st.lognorm)y = train[&#39;SalePrice&#39;].valuesdef johnson(y):    gamma, eta, epsilon, lbda = stats.johnsonsu.fit(y)    yt = gamma + eta*np.arcsinh((y-epsilon)/lbda)    return yt, gamma, eta, epsilon, lbdadef johnson_inverse(y, gamma, eta, epsilon, lbda):    return lbda*np.sinh((y-gamma)/eta) + epsilonyt, g, et, ep, l = johnson(y)yt2 = johnson_inverse(yt, g, et, ep, l)plt.figure(1)sns.distplot(yt)plt.figure(2)sns.distplot(yt2)</code></pre><h1 id="mpl-finance"><a href="#mpl-finance" class="headerlink" title="mpl_finance"></a>mpl_finance</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> mpl_finance <span class="token keyword">import</span> candlestick_ohlc  candlestick_ohlc<span class="token punctuation">(</span>ax<span class="token punctuation">,</span> quotes<span class="token punctuation">,</span> colorup<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> colordown<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 前两个参数必填。ax指的是Axes，即这一个小图的位置。Quotes填数据的必要信息。这里需要携程sequence of sequencies，使用date2num函数。</span>data<span class="token punctuation">[</span><span class="token string">'7d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> center<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 移动平均数，window是选取几天的平均数</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php</title>
      <link href="/Blog/2020/04/28/php/"/>
      <url>/Blog/2020/04/28/php/</url>
      
        <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>空格不计</li><li>以分号结尾</li><li>不区分大小写</li><li>使用&lt;?php phpinfo(); ?&gt;检测文件</li><li>在php.ini文件中打开错误提示：</li></ol><pre><code>display_errors = On  error_reporting = E_ALL</code></pre><p>或者在php代码中写入</p><pre><code>Ini_set(‘display_errors’, ‘On’);Error_reprting(E_ALL);</code></pre><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ol><li>&lt;?php php语句 ?&gt;  </li><li>&lt;br /&gt;换行  </li><li>echo ”Hello world”; 在页面端显示，相当于打印语句  </li><li>”Hello” . “ world”相当于”Hello world”, 句点可连接字符串  </li><li>单行注释可以使用//或者#, 多行注释使用/* */  </li><li>变量名以$打头，可以使用字母、下划线、数字、破折号，区分大小写  </li><li>字符串中引入变量可采用“{$var}Hello”的形式  </li><li>字符串允许使用.=进行赋值，相当于java的+=  </li><li>字符串方法<br>转换大小写：strtolower(), strtoupper(), ucfirst(), ucwords()等。最后一个方法会让句子中所有单词首字母都大写。在括号内放入需要进行转换的字符串<br>其他操作：strlen(), trim(),<br>strstr(strToBeOperated, toBeFound), 截取包含当前单词内的子字符串。<br>str_replace(toBeReplaced, replaceStr, strToBeOperated)<br>str_repeat(strToBeOperated, times)<br>substr(strToBeOperated, start, lens)<br>strops(strToBeOperated, “str”)， 寻找字符串，返回字符串首字母出现的位置<br>strchr(strToBeOperated, “char”)， 寻找字母, 返回包含该字母开始后的子字符串  </li><li>整数方法<br>abs(), pow(), sqrt(), fmod(), rand(), rand(min, max) 上下界均包含<br>is_int(), 正确返回1，错误不返回<br>is_numeric()<br>打印1 + “1”会出现2  </li><li>小数方法<br>round(floatToBeOperated, 1), 四舍五入到小数点后面几位<br>ceil(floatToBeOperated), floor(floatToBeOperated)<br>is_float()，is_numeric()  </li><li>数组方法<br>$arr = array(1, “fox”, array(“x”, “y”));或者$arr = [1, “fox”, array(“x”, “y”)];<br>不能使用echo $arr[2]将数组中的数组直接打印出来，应该使用echo print_r($arr).可以使用echo $arr[2][1]将x打印出来。<br>添加元素可以直接$arr[3] = “newItem”;<br>count(), max(), min(),<br>sort(), rsort()反序排列。排序过后无序数组已经不存在。<br>implode(“” * “, arr) 将每个元素用*隔开并形成一个字符串<br>explode(“ * “, arr) 将字符串转化成一个数组，将*当成不同元素箭的分隔符<br>in_array(19, arr) 查找19是否存在于数组中<br>current() 返回指针当前所指向的对象，可以使用prev(), next(), reset(), end()移动指针  </li><li>关联数组方法<br><code>$assoc = array(“first_name” =&gt; “Kevin”, “last_name” =&gt; “Steve”);</code><br>使用echo $assoc[“first_name”]将Kevin打印出来。</li><li>布林值方法<br>is_bool()</li><li>列表<br><code>list($var1, $var2, …)=</code></li><li>其他方法<br>is_null(),<br>isset() 是否赋值，null不算赋值<br>empty(), “0”返回true<br>__FILE__ 返回当前文件路径（不是一个方法）<br>dirname()表示当前文件所在文件夹的路径  </li><li>类型转换<br><code>getType(); </code><br><code>settype($var, “integer”);</code>直接转换了类型<br><code>$var2 = (string) $var;</code>并未直接转换该变量的类型  </li><li>常量<br>定义常量不能使用=，需要使用如下方法<br>define(“MAX-WIDTH”, 980);<br>在定义后不能重新定义 </li><li>比较<br>==检测值是否相等，===检测是否为同一对象  </li><li>循环<br><code>foreach($var1 as $var2)&amp;#123; &amp;#125; </code></li><li>方法  </li></ol><pre><code>function name()&#123;     return $var;&#125;</code></pre><p>e.g.<br><code>function paint($color = “red”)&amp;#123; &amp;#125; 表示如果调用该方法时没有传参数，则默认是red</code></p><ol start="22"><li>调试<br>var_dump($var); 显示变量类型和值，不需要echo<br>get_defined_vars(); 以数组形式显示开发人员和程序员自己已经定义的变量，需要使用print_r(get_defined_vars() );将它们打印出来;<br>debug_backtrace(); 在方法内调用var_dump(debug_backtrace() );会返回该方法的相关信息<br>可以使用Xdebug，DBG等第三方软件帮忙调试  </li></ol><h1 id="写码技巧："><a href="#写码技巧：" class="headerlink" title="写码技巧："></a>写码技巧：</h1><ol><li>将需要重复调用的语句写到一个php文件里面，然后可以通过</li></ol><pre><code>&lt;?php require_once (&#39;../initialize.php&#39;); ?&gt;&lt;?php require (&#39;../initialize.php&#39;); ?&gt;&lt;?php include (&#39;../initialize.php&#39;); ?&gt;&lt;?php include_once (&#39;../initialize.php&#39;); ?&gt;</code></pre><p>等方式调用。</p><ol start="2"><li>在超链接网址时使用&lt;a href=”xxxx=&lt;?php echo urlencode(‘’); ?&gt;”&gt;Link&lt;/a&gt;&lt;br /&gt;有助于解决特殊字符问题  </li><li>方法内调用全局变量的时候，在方法内写global加变量名  </li><li>可以采用<script>info()/alert()/warning();</script>等方式在网页上弹出消息  </li><li>http header如果想返回一个404错误可以这么写  </li></ol><pre><code>header($_SERVER[“SERVER_PROTOCOL”] . “ 404 Not Found”);exit();</code></pre><ol start="6"><li>Page redirects are sent in header. Headers are sent before page data. Header changes must be made before any HTML output.<br>可使用header(“Location: index.php”);  </li><li>启用output buffer<br>Turn output buffering on in php.ini<br>Use ob_start() when code may be ported to other servers.   </li><li>链接数据库  </li></ol><pre><code>$connection = mysqli_connect($host, $user, $password, $database);mysqli_close($connection);</code></pre><ol start="9"><li>查询数据库</li></ol><pre><code>mysqli_query($connection, $query);mysqli_free_result($result_set); //release returned datamysqli_fetch_row();mysqli_fetch_assoc(); //keys are column namemysqli_fetch_array();mysqli_num_rows($result); //return the number of rowsmysqli_connect_errno(); //return the number of errormysqli_connect_error(); //return strings that describe the errormysqli_insert_id(); //return the latest inserted id </code></pre><ol start="10"><li>Type juggling<br>String vs. null: converts null to “”<br>Number vs. other: converts other to number   </li><li>Sanitize data //一定程度上防止黑客用恶意请求的方式盗取数据  </li></ol><pre><code>addshlashes($str);mysqli_real_escape_string($conn, $str);  $sql = “SEELECT * subjects”; $sql .= “ WHERE id=” . (int) $($id);</code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab</title>
      <link href="/Blog/2020/04/25/matlab/"/>
      <url>/Blog/2020/04/25/matlab/</url>
      
        <content type="html"><![CDATA[<h1 id="普通语法："><a href="#普通语法：" class="headerlink" title="普通语法："></a>普通语法：</h1><ol><li>%单行注释</li><li>在行末加“;”会抑制自动打印功能</li><li>disp()相当于打印。disp(sprint(‘%0.2f’, var)控制小数打印位数。</li><li>help后直接加指令可以看该指令的指南</li><li>load后直接加文件名可以读取文件</li><li>save后直接加文件名可以保存文件</li><li>sum(), prod()取乘积, floor(), ceil()</li><li>循环</li></ol><pre><code>for i = 1 : 10,…;end;</code></pre><h1 id="矩阵："><a href="#矩阵：" class="headerlink" title="矩阵："></a>矩阵：</h1><ol><li>生成矩阵、向量可以使用如下指令：V = 开始点:步长:终止点</li><li>eye(n)返回一个n*n的单位矩阵，ones(m, n)返回一个m*n的全是1的矩阵。同理还有zeros(m, n)、rand(m, n)随机生成0-1的数、randn(m, n)。</li><li>magic(n)返回一个n*n的方阵，每一行、列、对角线数字之和相同。</li><li>A(2, :)返回第二行的所有元素</li><li>[r, c] = find(A&gt;=5)返回符合条件的元素的行、列索引</li><li>max(A,[],1)返回一个包含每列最大值的向量(1*n)，max(A,[],2)返回一个包含每行最大值的向量(m*1)。max(A)默认是前一种情况。可使用max(max(A))找出整个矩阵的最大值。</li><li>flipud(A)返回一个上下倒置的矩阵</li><li>A .*B表示对两尺寸相同的矩阵的进行对应元素之间的乘法</li><li>pinv()表示pseudoinverse，可以对奇异矩阵甚至非方阵求逆矩阵。inv()只能用来求非奇异方阵的逆矩阵。</li><li>X’表示X的转置阵</li><li>矩阵分行使用“;”，每行之间的元素可以用“,”隔开  </li></ol><h1 id="画图："><a href="#画图：" class="headerlink" title="画图："></a>画图：</h1><ol><li>hist(x, y, color)</li><li>使用hold on指令表示新曲线叠加在原来的图上</li><li>xlabel(), ylabel(), legend()图例, title()</li><li>cd ‘C:\Users”; print -dpng ‘myplot.png’将图以png形式保存</li><li>close将关掉已经画出来的图，clf清理图但是保存画图的界面</li><li>subplot(1,2,1)</li><li>imagesc(A), colorbar, colormap gray;用颜色深浅表示数字大小</li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go</title>
      <link href="/Blog/2020/04/24/go/"/>
      <url>/Blog/2020/04/24/go/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>compiled, statically typed; compiled executables OS specific.  </p><p>some OO features:  custom interface, types, structs  </p><p>not OO features:   no inheritance, no operator/method overloading, no structured exception handling, no implicit numeric conversion</p><h1 id="Cmd-Tool"><a href="#Cmd-Tool" class="headerlink" title="Cmd Tool"></a>Cmd Tool</h1><p>gofmt demo.go   // only format in the cmd line<br>gofmt -w demo.go  // format the original file<br>go run demo.go  // compile and run, but does not save the executable file<br>go build demo.go  // create new persistent executable file<br>go install  </p><p>code demo</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>“fmt”“strings”“bufio”“os”“strconv”<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>“Hello”<span class="token punctuation">)</span><span class="token punctuation">)</span>    str1 <span class="token operator">:=</span> “The”    str2 <span class="token operator">:=</span> “World”    <span class="token comment" spellcheck="true">// automatically add white space</span>    stringLength<span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span>      <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// no error</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>“<span class="token builtin">len</span> is”<span class="token punctuation">,</span> stringLength<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if err is not used, compile error (var not used)</span>    <span class="token comment" spellcheck="true">// solution: use _ to notify that var should not be addressed</span>    aNumber <span class="token operator">:=</span> <span class="token number">42</span>    isTrue <span class="token operator">:=</span> <span class="token boolean">true</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>“value is <span class="token operator">%</span>v<span class="token punctuation">,</span> and boolean is <span class="token operator">%</span>v\n”<span class="token punctuation">,</span> aNumber<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>“float value is <span class="token operator">%</span><span class="token punctuation">.</span>2f \n”<span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>aNumber<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>“Data types is <span class="token operator">%</span>T<span class="token punctuation">,</span> <span class="token operator">%</span>T<span class="token punctuation">,</span> <span class="token operator">%</span>T \n”<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> aNumber<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span>    myString <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>“Data types is <span class="token operator">%</span>T<span class="token punctuation">,</span> <span class="token operator">%</span>T<span class="token punctuation">,</span> <span class="token operator">%</span>T \n”<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> aNumber<span class="token punctuation">,</span> isTrue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// read from console</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// only one word</span>    <span class="token comment" spellcheck="true">// read a line</span>    reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>    str<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span>‘\n’<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// read a number </span>    str<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span>‘\n’<span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Variable-Declaration"><a href="#Variable-Declaration" class="headerlink" title="Variable Declaration"></a>Variable Declaration</h1><h3 id="explicitly-typed-declarations"><a href="#explicitly-typed-declarations" class="headerlink" title="explicitly typed declarations"></a>explicitly typed declarations</h3><p>var myvar int = 42 / const myvar int = 42</p><h3 id="implicitly-typed-declarations"><a href="#implicitly-typed-declarations" class="headerlink" title="implicitly typed declarations"></a>implicitly typed declarations</h3><p>myvar := 42 / const myvar = 42</p><h1 id="Function-Declaration"><a href="#Function-Declaration" class="headerlink" title="Function Declaration"></a>Function Declaration</h1><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>values <span class="token operator">...</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// receive a list of int</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">FullName</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> l <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// parenthesis 1: parameter; 2: return value</span>    full <span class="token operator">:=</span> f <span class="token operator">+</span> “ “ <span class="token operator">+</span> l    length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span>    <span class="token keyword">return</span> full<span class="token punctuation">,</span> length<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">FullName2</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> l <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>full <span class="token builtin">string</span><span class="token punctuation">,</span> length <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// specify return variable </span>    full <span class="token operator">=</span> f <span class="token operator">+</span> “ “ <span class="token operator">+</span> l  <span class="token comment" spellcheck="true">// declared in function declaration, no “:=”</span>    length <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">// do not specify again</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Common-Packages"><a href="#Common-Packages" class="headerlink" title="Common Packages"></a>Common Packages</h1><h2 id="strings-pkg"><a href="#strings-pkg" class="headerlink" title="strings pkg"></a>strings pkg</h2><pre><code>strings.EqualFold(a, b)  // ignore case comparison  strings.Contains(a, “ff”)  </code></pre><h2 id="math-pkg"><a href="#math-pkg" class="headerlink" title="math pkg"></a>math pkg</h2><p>numeric types do not implicitly convert, can’t add int to a float  </p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> “math<span class="token operator">/</span>big”  <span class="token keyword">var</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> bigSum big<span class="token punctuation">.</span>Float  b1<span class="token punctuation">.</span><span class="token function">SetFloat64</span><span class="token punctuation">(</span><span class="token number">23.5</span><span class="token punctuation">)</span>  b2<span class="token punctuation">.</span><span class="token function">SetFloat64</span><span class="token punctuation">(</span><span class="token number">63.5</span><span class="token punctuation">)</span>  b3<span class="token punctuation">.</span><span class="token function">SetFloat64</span><span class="token punctuation">(</span><span class="token number">53.5</span><span class="token punctuation">)</span> bigSum<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bigSum<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b3<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>“BigSum <span class="token operator">=</span> <span class="token operator">%</span><span class="token punctuation">.</span>10g\n”<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bigSum<span class="token punctuation">)</span>circleR <span class="token operator">:=</span> <span class="token number">15.5</span>cC <span class="token operator">:=</span> circleR <span class="token operator">*</span> math<span class="token punctuation">.</span>Pi</code></pre><h1 id="Memory-Allocation"><a href="#Memory-Allocation" class="headerlink" title="Memory Allocation"></a>Memory Allocation</h1><p>allocated automatically and deallocated automatically by garbage collector  </p><ul><li>new(): allocates but does not initialize mem, results in zeroed storage but returns a memory address  </li><li>make(): allocates and initializes memory, returns a memory address</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>m<span class="token punctuation">[</span>“key”<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">43</span>  <span class="token comment" spellcheck="true">// will result panic, assignment to entry in nil map </span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>m<span class="token punctuation">[</span>“key”<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">43</span>  <span class="token comment" spellcheck="true">// successfully assignment </span></code></pre><h1 id="Complex-Types-and-Collections"><a href="#Complex-Types-and-Collections" class="headerlink" title="Complex Types and Collections"></a>Complex Types and Collections</h1><h2 id="pointer"><a href="#pointer" class="headerlink" title="pointer"></a>pointer</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span><span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>“Value of <span class="token punctuation">.</span>p<span class="token punctuation">:</span>”<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>“p is <span class="token boolean">nil</span>”<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token builtin">int</span>  <span class="token operator">=</span> <span class="token number">42</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>v</code></pre><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> colors <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token builtin">string</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> “red”colors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> “2red”colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> “3red”<span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// assign when init</span></code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>“red”<span class="token punctuation">,</span> “green”<span class="token punctuation">,</span> “blue”<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>colors  <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>colors<span class="token punctuation">,</span> “gray”<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// return a new reference</span>colors <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// remove the first element</span>numbers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span> numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>numbers<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// capacity is now changed to 10</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span></code></pre><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><pre class=" language-go"><code class="language-go">states <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">string</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// this is unordered</span>states<span class="token punctuation">[</span>“wa”<span class="token punctuation">]</span> <span class="token operator">=</span> “Washington”states<span class="token punctuation">[</span>“wi”<span class="token punctuation">]</span> <span class="token operator">=</span> “Wisconsin”states<span class="token punctuation">[</span>“ca”<span class="token punctuation">]</span> <span class="token operator">=</span> “California”c_ <span class="token operator">:=</span> states<span class="token punctuation">[</span>“ca”<span class="token punctuation">]</span><span class="token function">delete</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> “wi”<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// delete a certain element</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> states <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>v<span class="token punctuation">:</span> <span class="token operator">%</span>v”<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>keys <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> states <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k    i<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>“\n sorted”<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span>states<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Breed <span class="token builtin">string</span>    Weight <span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>poodle <span class="token operator">:=</span> Dog <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>“poodle”<span class="token punctuation">,</span> <span class="token number">34</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span><span class="token operator">+</span>v\n”<span class="token punctuation">,</span> poodle<span class="token punctuation">)</span></code></pre><h1 id="Program-Flow"><a href="#Program-Flow" class="headerlink" title="Program Flow"></a>Program Flow</h1><pre class=" language-go"><code class="language-go"><span class="token keyword">defer</span> <span class="token function">println</span><span class="token punctuation">(</span>“fff”<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// wait till others are executed, in LIFO order!</span>no while loop in Go<span class="token keyword">goto</span> endofprogram  <span class="token comment" spellcheck="true">// jump to the label</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> myvar <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> myvar <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// can place the assignment before checking</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        …    <span class="token keyword">case</span> myvar <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// can do the checking like if </span>        …    <span class="token keyword">default</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// no need to add “break”; add “fallthrough” to behave the same as C</span>        …<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// no “implements” in Go, use function to infer</span>Sound <span class="token builtin">string</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">printSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>Sound<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> “arf”<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// no “implements” in Go, use function to infer</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Cat<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> “meow”<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>poodle <span class="token operator">:=</span> <span class="token function">Animal</span><span class="token punctuation">(</span>Dog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>“woof”<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// cast </span>poodle<span class="token punctuation">.</span><span class="token function">printSound</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// print out woof</span>animals <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Animal<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Dog<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>‘a’<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> Cat<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> animal <span class="token operator">:=</span> <span class="token keyword">range</span> animals <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="handle-error"><a href="#handle-error" class="headerlink" title="handle error"></a>handle error</h1><pre class=" language-go"><code class="language-go">f<span class="token punctuation">,</span> er <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>“file<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span><span class="token keyword">if</span> er <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>myError <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>“my <span class="token builtin">error</span>”<span class="token punctuation">)</span></code></pre><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">checkError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// write to file method 1</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>“<span class="token punctuation">.</span><span class="token operator">/</span>fromString<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span><span class="token function">checkError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>leng<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token function">checkError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span>“Finish with file of <span class="token operator">%</span>v chars”<span class="token punctuation">,</span> leng<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// write to file method 2</span>bytes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>“<span class="token punctuation">.</span><span class="token operator">/</span>fromBytes<span class="token punctuation">.</span>txt”<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// read from file </span>content<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// the first return value is []byte</span>result <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></code></pre><h1 id="Traverse-the-File-Path"><a href="#Traverse-the-File-Path" class="headerlink" title="Traverse the File Path"></a>Traverse the File Path</h1><pre class=" language-go"><code class="language-go"><span class="token function">processPath</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>  <span class="token builtin">error</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// parameter type is fixed</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> err <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> path <span class="token operator">!=</span> “<span class="token punctuation">.</span>” <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">println</span><span class="token punctuation">(</span>“directory<span class="token punctuation">:</span>”<span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">println</span><span class="token punctuation">(</span>“file<span class="token punctuation">:</span>”<span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>root<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>“<span class="token punctuation">.</span>”<span class="token punctuation">)</span>err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> processPath<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// walk from file path</span></code></pre><h1 id="Read-from-Web-Parse-from-json"><a href="#Read-from-Web-Parse-from-json" class="headerlink" title="Read from Web + Parse from json"></a>Read from Web + Parse from json</h1><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Tour <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// depends on the json file you receive</span>    Name<span class="token punctuation">,</span> Price <span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">tourFromJson</span><span class="token punctuation">(</span>content <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Tour <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tours <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Tour<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    decoder <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> decoder<span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">checkError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">var</span> tour Tour     <span class="token keyword">for</span> decoder<span class="token punctuation">.</span><span class="token function">More</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        err <span class="token operator">:=</span> decoder<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tour<span class="token punctuation">)</span>        <span class="token function">checkError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        tours <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tours<span class="token punctuation">,</span> tour<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> tours<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">contentFromServer</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">return</span>  <span class="token function">string</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>url <span class="token operator">:=</span> “http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>”content <span class="token operator">:=</span> <span class="token function">contentFromServer</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>tours <span class="token operator">:=</span> <span class="token function">toursFromJson</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></code></pre><h1 id="Create-a-Http-Server"><a href="#Create-a-Http-Server" class="headerlink" title="Create a Http Server"></a>Create a Http Server</h1><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Hello <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h Hello<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> “…”<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> h helloerr <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>“localhost<span class="token punctuation">:</span> <span class="token number">4000</span>”<span class="token punctuation">,</span> h<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp</title>
      <link href="/Blog/2020/04/22/cpp/"/>
      <url>/Blog/2020/04/22/cpp/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-Type-and-Structure"><a href="#Data-Type-and-Structure" class="headerlink" title="Data Type and Structure"></a>Data Type and Structure</h1><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>类似于Java的泛型<br>e.g.:</p><pre><code>template &lt;typename T&gt;T maxof (const T &amp;a, const T &amp;b)&amp;#123;    return (a &gt; b ? a : b);&amp;#125;</code></pre><p>使用maxof<int> (a, b)调用。// a和b均为int类型  </p><p>在link阶段，如果出现build failure，就把.cpp文件中的template的实现移动到.h文件中。<br>编译器会出现argument deduction的推断，有时候可以不指名template所需要的变量类型（红色标注）。</p><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>系统自动适应变量类型，程序员不需要花费时间去了解一个变量声明时的类型。</p><h2 id="Include-Guard"><a href="#Include-Guard" class="headerlink" title="Include Guard"></a>Include Guard</h2><p>a technique which uses a unique identifier that you #define at the top of the file<br>e.g.:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//x.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __X_H_INCLUDED__   </span><span class="token comment" spellcheck="true">// if x.h hasn't been included yet...</span><span class="token macro property">#<span class="token directive keyword">define</span> __X_H_INCLUDED__  </span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>the right way to include  </p><ul><li><strong>#include “b.h”</strong> if: B is a parent class of A; or, A contains a B object: B myb;</li><li><strong>forward declare B</strong> if: A contains a B pointer or reference: B* myb; or, at least one function has a B object/pointer/reference as a parementer, or as a return type: B MyFunction(B myb);</li></ul><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>Constructor:<br><code>vector&lt;int&gt; v4(v3);  // 把v3内容全部复制过来</code><br><code>vector&lt;int&gt; v5(std::move(v4));  // 把v4内容全部剪切过来</code>  </p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>Initiate：<br><code>list&lt;int&gt; l1 = &#123;1,2,3,4&#125;; </code><br>Modify:<br>.remove(T)直接清除list中的元素，而非位置<br>清除两个Iterator之间的元素</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> it2 <span class="token operator">=</span> it1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">++</span>it1 <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>it1 <span class="token operator">!=</span> l1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">++</span>it2 <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>it2 <span class="token operator">!=</span> l1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it1 <span class="token operator">!=</span> l1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> it2 <span class="token operator">!=</span> l1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    l1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> it2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Pair-amp-Tuple"><a href="#Pair-amp-Tuple" class="headerlink" title="Pair &amp; Tuple"></a>Pair &amp; Tuple</h2><p><code>pair&lt;int, string&gt; p1(1, “one”);</code><br>如果是大于三个元素，需要自己写print方法  </p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>Initiate：<br><code>array&lt;int, 5&gt; a1 = &#123;1,2,3,4,5&#125;;</code><br>Get:<br>    a1[1]相当于a1.at(1)<br>    .data()返回一个iterator（已声明数据类型的指针）  </p><h2 id="Deque-amp-Queue-amp-Stack"><a href="#Deque-amp-Queue-amp-Stack" class="headerlink" title="Deque &amp; Queue &amp; Stack"></a>Deque &amp; Queue &amp; Stack</h2><p>// deque和list非常像  </p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>提供hash key。multiset允许重复元素的出现。默认是根据alphabetical顺序排列，但是也有unordered_set。<br>删除元素：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>“ten”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it <span class="token operator">!=</span> set<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ”<span class="token operator">not</span> found\n”<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>.insert({ })方法括号中一定是一个大括号。该方法有三个返回值，第一个是插入元素(或阻止插入的元素)的迭代器，第二个是布林值指示插入操作是否成功。分别用.first和.second来取。<br>.find()方法返回指针。<br>multimap()可以有重复键，insert()方法不再检查，所以不会返回布林结果。   </p><h2 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h2><p>遍历</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> set<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token operator">--</span>it1 <span class="token operator">&lt;&lt;</span> “ ”<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it2 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// *it2是第6个元素</span><span class="token keyword">auto</span> it3 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// *it3是倒数第5个元素</span></code></pre><p>读取</p><pre class=" language-cpp"><code class="language-cpp">cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>istream_iterator<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> eos<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// default constructor is end-of-stream</span>istream_iterator<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">iit</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>iit <span class="token operator">==</span> eos<span class="token punctuation">)</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> “no values” <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>    d1 <span class="token operator">=</span> <span class="token operator">*</span>iit<span class="token operator">++</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre><code>ostream_iterator&lt;int&gt; output(cout, “ ”);for(int i : &amp;#123;1, 10, 100&amp;#125;) &amp;#123;    *output++ = i;&amp;#125; </code></pre><h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><pre><code>template&lt;typename T&gt;class accum&amp;#123;    T _acc = 0;    accum() &amp;#123;&amp;#125;public:    accum(T n)  :  _acc(n)&amp;#123;&amp;#125;    T operator() (T y) &amp;#123;  _acc += y; return _acc; &amp;#125;&amp;#125;accum&lt;int&gt; x(7); cout &lt;&lt; x(7) &lt;&lt; endl;  // 此时_acc=14vector&lt;int&gt; v1 = &amp;#123;1,2,3,4,5&amp;#125;;vector&lt;int&gt; v2(v1.size());transform(v1.begin(), v1.end(), v2.begin(), x);transform(v1.begin(), v1.end(), v2.begin(), [accum](int d) mutable -&gt; int &amp;#123;return accum += d; &amp;#125;);  // 效果与上同</code></pre><pre><code>template&lt;typename T&gt;class embiggen &amp;#123;    T _accum = 1;public:    T operator() (const T &amp; n1, const T &amp; n2) &amp;#123; return _accum = n1 * n2 * _accum;&amp;#125;&amp;#125;;vector&lt;long&gt; v1 = &amp;#123;1,2,3,4,5&amp;#125;vector&lt;long&gt; v2 = &amp;#123;5,10,15,20,25&amp;#125;vector&lt;long&gt; v3 = &amp;#123;v1.size(), 0&amp;#125;embiggen&lt;long&gt; fbig;transform(v1.begin(), v1.end(), v2.begin(), v3.begin(), fbig);  // 结果存放在第4个arg</code></pre><h2 id="Functors"><a href="#Functors" class="headerlink" title="Functors"></a>Functors</h2><p>#include &lt;functional&gt;<br>可以结合transform，sort使用</p><h3 id="Arithmetic-Functors"><a href="#Arithmetic-Functors" class="headerlink" title="Arithmetic Functors"></a>Arithmetic Functors</h3><p>plus/minus/multiply/divide/modulo/negate<T></p><h3 id="Relational-Functors"><a href="#Relational-Functors" class="headerlink" title="Relational Functors"></a>Relational Functors</h3><p>greater/less/greater_equal/less_equal/equal_to/not_equal_to<T><br>e.g.: </p><pre class=" language-cpp"><code class="language-cpp">greater<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> f<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 从大到小排序</span></code></pre><h3 id="Logical-Functors"><a href="#Logical-Functors" class="headerlink" title="Logical Functors"></a>Logical Functors</h3><p>logical_and/logical_or/logical_not<T></p><h1 id="STL-Algorithm"><a href="#STL-Algorithm" class="headerlink" title="STL Algorithm"></a>STL Algorithm</h1><p>#include &lt;algorithm&gt;</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>all_of/any_of/none_of(v.begin(), v.end(), function<T>)<br>find()  // return an iterator point to the element if found, otherwise point to end<br>find_if/find_if_not/search/count/count_if()<br>binary_search(v.begin(), v.end(), n)   记得先sort(v.begin(), v.end());  </p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>replace(v.begin(), v.end(), 47, 99)<br>replace_if/remove/remove_if/unique  </p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>copy(v1.begin(), v1.end(), v2.begin())<br>copy_n()  // 指定copy的个数<br>copy_backward(v1.begin(), v1.end(), v2.end())  // copy从后向前进行，不是顺序<br>reverse_copy()  // copy the elements in reverse order<br>reverse()  // reverse elements in place<br>fill/fill_n()  // in place<br>generate(v2.begin(), v2.end(), []()-&gt;int { return rand() % 100;})<br>random_shuffle(v1.begin(), v1.end())  // shuffle elements in place<br>shuffle(v1.begin(), v1.end(), g)  // require one more arg: random function  </p><h2 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h2><p>partition(v1.begin(), v1.end(), f)  // partition in place using predicate function f<br>stable_partition()  // 保留原来顺序<br>partition_copy(v1.begin(), v1.end(), v2.begin(), v3.begin(), f)  // partition and store in different places  </p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>sort/stable_sort()  </p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>merge()  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c</title>
      <link href="/Blog/2020/04/16/c/"/>
      <url>/Blog/2020/04/16/c/</url>
      
        <content type="html"><![CDATA[<h1 id="要点总结："><a href="#要点总结：" class="headerlink" title="要点总结："></a>要点总结：</h1><ol><li>GNU Compiler Collection也叫gcc，是最流行的C编译器之一。可以在很多操作系统中使用。在命令提示符中使用gcc cards.c -o cards进行编译。编译过后，一个cards.exe文件将出现（Windows系统）。在gcc之后跟一个-g表示让编译器记录编译代码的行号。</li><li>C语言没有内置数据结构，必须自己创建。</li><li>使用栈的时候不用担心清理其中的变量，因为这个过程是自动的。但是一旦申请堆上的空间，这块空间就不再被分配出去。存储器泄露是C程序中最常见的错误且难以追踪。</li><li>valgrind通过拦截malloc()和free()检查存储器泄露问题。在valgrind.org上查看最新发行版的详细信息。</li><li>指针是存储器中某条数据的地址。使用指针可以避免副本并且共享数据。使用“&amp;变量名”找出变量的存储器地址。*运算符与&amp;运算符正好相反，它接收一个地址，返回地址中保存的数据。也被描述成对指针进行解引用。*运算符还可以设置存储器地址中的内容。</li><li>对每种类型的数据，指针变量都有不同的类型。如果对char指针加1，指针会指向存储器中下一个地址，因为char只占1字节。如果对int指针加1，代码会对存储器地址加4，因为int占4字节。</li><li>C语言不支持现成的字符串。但有很多扩展库提供字符串。字符串以数组的形式储存，定义的时候长度为n+1，因为字符串末尾需要有一个结束字符‘\0’。计算机会为字符串的每一个字符以及结束字符在栈上分配空间，并把首字符的地址和变量关联起来。</li><li>一个数组变量就好比一个指针。所以在使用sizeof()运算符（不是一个函数，运算符在编译时就被分配了空间）的时候会返回奇怪的结果——只返回字符串指针的大小。我们定义一个数组d: d[0]与*d等价。</li><li>如果是普通的变量声明，char d[ ] = “dump”; 就是一个数组。但如果是以函数参数的形式声明，那么d就是一个char指针，例如void test(char d[ ])。</li><li>指向字符串字面值的指针变量不能用来修改字符串内容，例如char *d = “dump”; 不能用这个变量修改这个字符串。但如果用字符串字面值创建一个数组，例如char d[ ] = “dump”; 就可以修改。如果我们想把指针设成字符串字面值，必须确保使用了const关键字。若是编译器发现有代码试图修改字符串，就会提示编译错误。</li><li>但是数组变量与指针不完全相同。参考以下代码：</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> s\<span class="token punctuation">[</span> \<span class="token punctuation">]</span> <span class="token operator">=</span> “How big is it<span class="token operator">?</span>”<span class="token punctuation">;</span><span class="token keyword">char</span> \<span class="token operator">*</span>t <span class="token operator">=</span> s<span class="token punctuation">;</span></code></pre><p>sizeof(s)会返回15，sizeof(t)会返回4或者8（取决于操作系统）。<br>数组变量不能指向其他地方。当创建指针变量时，计算机会为他分配存储空间。计算机会为数组分配存储空间，但是不会为<strong>数组变量</strong>分配任何空间，编译器会在出现它的地方把它替换成数组的起始地址。如此例中，s=t会报编译错误。</p><ol start="12"><li>指针退化：把数组赋值给指针变量，指针变量只会包含数组的地址信息，不包含数组长度。只要把数组传递给函数，数组免不了退化为指针，所以需要记清楚代码中发生过数组退化的地方，以避免引发不易察觉的错误。</li><li>bus error（总线错误），意味着程序无法更新某一块存储器空间。</li><li>布尔值用数字表示，数字0代表假，其他均代表真。</li><li>使用break语句可以跳出循环语句和switch语句，但是不能跳出if语句。</li><li>main()函数返回类型是int，不要忘记return。main()中调用函数必须在main()之前出现。有两种main()函数，一种没有传参，另一种有传参(int argc, char *argv[ ])。</li><li>可以使用链式赋值如y=x=0。</li><li>程序运行时，操作系统创建三条数据流：标准输入、标准输出和标准错误。但我们可以用fopen()函数创建自己的数据流。</li><li>可以在数据类型前加关键词来改变数值的意义。用unsigned修饰的数值只能是非负数。用long修饰可以保存范围更广的数字。用extern修饰表示共享变量。</li><li>函数声明指告诉编译器函数会返回什么类型的语句。这是为了防止编译器假设函数的返回类型。</li><li>创建头文件的步骤：创建一个扩展名为.h的文件，然后在主代码中包含头文件。用引号把文件名括起来，让编译器在本地通过相对路径查找文件。<br>示例：#include “statement.h”</li><li>用结构创建结构化数据类型（把一批数据打包成一样东西）。struct是structured data type的缩写。可以按名访问结构字段（f1.name）。当把一个结构变量赋值给另一个时，只会复制结构的内容。<br>示例：</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> fish <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存不想修改的字符串</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>species<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">struct</span> fish f1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>“fish1”<span class="token punctuation">,</span> “big”<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ol start="23"><li>可以用typedef为结构命名。创建别名后可以不需要结构名。但是在递归结构中，需要包含一个相同类型的指针，因此必须为结构起一个名字。<br>示例：</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> fish <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存不想修改的字符串</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>species<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ff<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ff将成为struct fish的别名</span>ff f1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>“fish1”<span class="token punctuation">,</span> “big”<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ol start="24"><li>“指针-&gt;字段”相当于“(*指针).字段”。</li><li>C语言不支持二进制字面值，但是支持十六进制字面值。</li></ol><h1 id="命令行操作："><a href="#命令行操作：" class="headerlink" title="命令行操作："></a>命令行操作：</h1><ol><li>可以用&lt;重定向标准输入，用&gt;重定向标准输出，用2&gt;重定向标准错误。<br>示例：<br><code>program &lt; data.csv &gt; output.json</code></li><li>Windows的命令提示符中输入echo %ERRORLEVEL% 可以在重定向输出的同时显示错误消息。</li><li>两个独立的程序用管道连接以后就可以看成一个程序。<br>示例：<br><code>(program1 | program2) &lt; data.csv &gt; output.json</code></li><li>make编译的文件叫目标。对于每个目标，需要知道它的依赖项和生成方法（合在一起构成一条规则）。生成方法必须以tab开头。<br>示例：//将make规则保存在当前目录下一个叫Makefile的文本文件中</li></ol><pre class=" language-shell"><code class="language-shell">launch.o: launch.c launch.h thruster.h //依赖文件　　gcc -c launch.c //生成方法thruster.o: thruster.h thruster.c　　gcc -c thruster.claunch: launch.o thruster.o　　gcc launch.o thruster.o -o launch</code></pre><p>//在控制台输入以下指令</p><pre class=" language-shell"><code class="language-shell">> make launchgcc -c launch.cgcc -c thruster.cgcc launch.o thruster.o -o launch</code></pre><ol start="5"><li>在多个C项目中共享头文件的方法：把头文件保存在标准目录中（/usr/local/include）；在include语句中使用完整路径名；告诉编译器去哪里找头文件（gcc后跟-I选项）。</li><li>存档命令（ar）会在存档文件中保存一批目标文件。<br>示例：<br><code>&gt; ar -rcs libsecurity.a f1.o f2.o  </code><br>r表示如果.a文件存在就更新它，c表示不反馈信息，s告诉哦ar要在.a文件开头建立索引。后面是保存在存档中的文件。<br>所有.a文件名都是libXXX.a的形式。这是命名静态库的标准方式。</li><li>当存档安装在标准目录，可以使用-l编译代码。<br>示例：<code>gcc  test.c -lsecurity -o test</code><br>//security叫编译器去找libsecurity.a的存档<br>//可以设置多个-l选项来使用多个存档<br>当存档安装在其他目录，可以用-L编译代码。<br>示例：<code>gcc  test.c -L/myLib -lsecurity -o test</code><br>//存档放在了/myLib  </li><li>动态库在Windows中叫动态链接库(.dll)，在Linux和Unix上交共享目标文件(.so)，在Mac上叫动态库(.dylib)。一旦用某个名字编译了库，就不能修改文件名。重命名必须用新的名字重新编译一次。<br>创建方式示例：<code>gcc -shared test.o -o C:\libs\test.dll</code></li></ol><h1 id="标准库："><a href="#标准库：" class="headerlink" title="标准库："></a>标准库：</h1><p>在程序开头使用#include调用C标准库。标准库分了好几个部分，每个部分独有一个头文件，列出了该部分的所有函数。示例：#include &lt;stdio.h&gt;.</p><h2 id="lt-stdio-h-gt"><a href="#lt-stdio-h-gt" class="headerlink" title="&lt;stdio.h&gt;"></a>&lt;stdio.h&gt;</h2><ol><li>使用puts()或者printf()函数打印。%i格式化整型，%s格式化字符串，%p格式化地址。</li><li>使用fprintf()打印到数据流。<br>示例：fprintf(stderr, “message”);</li><li>使用scanf(“%ns”, var)从键盘读取n个字符（自动补全结束字符），存入var这个变量中。如果忘记限制scanf()读取字符串的长度，用户可以输入远超出程序空间的数据。多余的数据会写到尚未被分配好的存储器中。运气好的话，数据会被保存。但缓冲区溢出很可能导致程序出错，通常是segmentation fault（段错误）或者abort trap。不管出现什么错误消息，程序都会崩溃。<br>scanf()允许输入多个字段，允许输入结构化数据，可以指定两个字段之间以什么字符分割。但是遇到空格就会停止。</li><li>fgets()与scanf()函数类似，接受char指针，但是必须有最大长度这个参数。语法为fgets(var, sizeof(var), stdin); 最后一个参数表示数据来自键盘。<br>fgets()只允许想缓冲区输入一个字符串，不能是其他数据类型。但是fgets()不受空格的限制。</li><li>fopen()函数接受两个参数：文件名和模式。共有三种模式：w(写文件)，r(读文件)，a(在文件末尾追加数据)。<br>示例：</li></ol><pre><code>FILE *in_file = fopen(“input.txt, “r”);</code></pre><ol start="6"><li>fclose()函数关闭数据流。虽然所有的数据流在程序结束后会自动关闭，但是我们仍然应该自己关闭它们。</li></ol><h2 id="lt-string-h-gt"><a href="#lt-string-h-gt" class="headerlink" title="&lt;string.h&gt;"></a>&lt;string.h&gt;</h2><ol><li>strstr(a, b)函数会返回b字符串在a字符串中的位置。</li><li>strcpy()可以复制字符串。</li><li>strchr()用来在字符串中找某个字符的位置。</li><li>strcmp()比较字符串。</li><li>strlen()返回字符串的长度。</li><li>strcat()连接字符串。</li><li>strdup()计算出字符串的长度，然后调用malloc()在堆上分配相应空间，然后把所有自负复制到堆上的新空间。请记得使用free()释放空间。</li></ol><h2 id="lt-stdlib-h-gt"><a href="#lt-stdlib-h-gt" class="headerlink" title="&lt;stdlib.h&gt;"></a>&lt;stdlib.h&gt;</h2><ol><li>malloc()会要求操作系统在heap中分配空间，并返回一个指针指向这个空间。该函数接收一个参数：所需要的字节数。在不知道确切字节数的情况下，常与sizeof一起使用。<br>示例：<code>Person tmp = malloc(sizeof(Person));</code></li><li>free()函数可以释放存储器。<br>示例：<code>free(tmp);</code></li><li>qsort()是一个排序函数，判断两条数据的大小关系。<br><code>qsort(void *array, size_t length, size_t item_size, int (*compar) (const void *, const void *)); //void*指针可以指向任何数据。</code> </li></ol><p>在写comparator的时候，第一件事是从指针中提取值，因为值以指针的形式传给函数。<br>示例：第一个*拿到保存在地址中的值，第二个把void指针转换为整型指针<br><code>int a = *(int*) score_a;</code></p><h2 id="lt-stdarg-h-gt"><a href="#lt-stdarg-h-gt" class="headerlink" title="&lt;stdarg.h&gt;"></a>&lt;stdarg.h&gt;</h2><p>所有处理可变参数函数的代码都在这个库中。可变参数将保存在va_list中。可以用va_start()、va_arg()和va_end()控制va_list。可变参数函数至少需要一个普通参数。读取参数时不能超过给出的参数个数，且需要知道参数类型。</p><h1 id="非标准库："><a href="#非标准库：" class="headerlink" title="非标准库："></a>非标准库：</h1><p>不属于C标准库。</p><h2 id="lt-unistd-h-gt-POSIX库"><a href="#lt-unistd-h-gt-POSIX库" class="headerlink" title="&lt;unistd.h&gt;POSIX库"></a>&lt;unistd.h&gt;POSIX库</h2><ol><li>getopt(): 这个库函数每一次调用都会返回命令行中下一个参数。<br>程序需要两个选项，一个选项接受值，-e代表“引擎”；另一个选项代表开或关，-a代表“无敌模式”。<br>示例：<br>//最后一个参数表示选项a和e有效冒号表示e需要一个参数<br>//getopt()会用optarg变量指向这个参数<br><code>getopt(argc, argv, “ae:”)  </code><br>读完全部选项以后，应该用optind变量跳过它们。<br>示例：</li></ol><pre><code>argc -= optind;argv += optind;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>r</title>
      <link href="/Blog/2020/04/01/r/"/>
      <url>/Blog/2020/04/01/r/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>对数据集进行排序的时候，不打乱行之间的联系<br>#sort m by using the order and keep the connections.<br>#Don’t miss the comma after the order.<br>sort_df &lt;- m[order(m$attr), ] </p><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><h2 id="自定义坐标"><a href="#自定义坐标" class="headerlink" title="自定义坐标"></a>自定义坐标</h2><p>在plot()函数中可以直接使用at属性<br>在hist()函数中需要：</p><pre name="code" class="R">hist(变量, xlim = range(0,10), xaxt="n") #将x轴取消axis <- axis(1, at=seq(from, to, step)) #1代表横轴</pre><h2 id="将图片直接画到需要导出的pdf中"><a href="#将图片直接画到需要导出的pdf中" class="headerlink" title="将图片直接画到需要导出的pdf中"></a>将图片直接画到需要导出的pdf中</h2><pre name="code" class="R">pdf("test.pdf")plot()dev.off()</pre><h2 id="对数据集中所有数据画相关性散点图"><a href="#对数据集中所有数据画相关性散点图" class="headerlink" title="对数据集中所有数据画相关性散点图"></a>对数据集中所有数据画相关性散点图</h2><p><code>pairs(m)</code><br>如果想通过数字形式呈现<br><code>cor(m[ ,i:j])</code></p><h2 id="使用barplot-画图报错height必须为向量"><a href="#使用barplot-画图报错height必须为向量" class="headerlink" title="使用barplot()画图报错height必须为向量"></a>使用barplot()画图报错height必须为向量</h2><pre name="code" class="R">#将数据转换成table形式barplot(table(data))</pre><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><pre name="code" class="R">d = data.frame(var_name = c() )predict(m, newdata = d)</pre><h2 id="y-a-bx最小二乘直线"><a href="#y-a-bx最小二乘直线" class="headerlink" title="y=a+bx最小二乘直线"></a>y=a+bx最小二乘直线</h2><pre name="code" class="R">abline(a = y.intercept, b= slope)</pre><p>或者</p><pre name="code" class="R">m = lm(y~x)abline(reg = m)</pre><h2 id="检查误差（误差均值应该为0）"><a href="#检查误差（误差均值应该为0）" class="headerlink" title="检查误差（误差均值应该为0）"></a>检查误差（误差均值应该为0）</h2><pre name="code" class="R">plot(m$fitted.values, m$residuals) </pre><p>或者</p><pre name="code" class="R">qqnorm(m$residuals)</pre><p>或者</p><pre name="code" class="R">layout(matrix(data=1:4, nrow=2, ncol=2, byrow=T))plot(m)</pre><h2 id="检查数据是否为常态分布"><a href="#检查数据是否为常态分布" class="headerlink" title="检查数据是否为常态分布"></a>检查数据是否为常态分布</h2><pre name="code" class="R">qqnorm(m); qqline(m)</pre>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>type conversion</title>
      <link href="/Blog/2020/02/26/type-conversion/"/>
      <url>/Blog/2020/02/26/type-conversion/</url>
      
        <content type="html"><![CDATA[<h1 id="int-to-String"><a href="#int-to-String" class="headerlink" title="int to String"></a>int to String</h1><p>有三种方法，其中第二种第三种效率差不多，要比第一种更快。 </p><pre class=" language-java"><code class="language-java">a<span class="token operator">+</span><span class="token string">""</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><h1 id="String-to-int"><a href="#String-to-int" class="headerlink" title="String to int "></a>String to int </h1><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="int-to-char"><a href="#int-to-char" class="headerlink" title="int to char"></a>int to char</h1><p>最正确的方式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简便方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="char-to-int"><a href="#char-to-int" class="headerlink" title="char to int "></a>char to int </h1><p>最正确的方式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> ‘<span class="token number">5</span>’<span class="token punctuation">;</span>String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a  <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简便方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> charNum <span class="token operator">=</span> <span class="token string">'5'</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">char</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span></code></pre><h1 id="double-to-long"><a href="#double-to-long" class="headerlink" title="double to long"></a>double to long</h1><pre class=" language-java"><code class="language-java">Long l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="long-to-double"><a href="#long-to-double" class="headerlink" title="long to double"></a>long to double</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> 2L<span class="token punctuation">;</span>Double d <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>如果long或者double出现溢出，需要使用BigInteger和BigDecimal。引入import java.math.BigInteger（BigDecimal）。</p><p>使用方法如下： </p><p>BigInteger b = BigInteger.valueOf(a);<br>或者BigInteger b = new BigInteger(String.valueOf(str));</p><p>相加是b.add(a);</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/Blog/2020/02/16/sql/"/>
      <url>/Blog/2020/02/16/sql/</url>
      
        <content type="html"><![CDATA[<h1 id="General-Hints"><a href="#General-Hints" class="headerlink" title="General Hints"></a><strong>General Hints</strong></h1><ol><li><p>Case insensitive, except folders in Linux</p></li><li><p>Double quote and single quote does not matter, prefer single quote</p></li><li><p>White space can concatenate different string</p></li></ol><h1 id="Select-data-from-tables"><a href="#Select-data-from-tables" class="headerlink" title="Select data from tables"></a><strong>Select data from tables</strong></h1><ol><li><p>AS can be used to rename the chosen column, can be omitted</p></li><li><p>ORDER BY is used to sort the list, ORDER BY <em>column name</em> DESC means<br>in descending order</p><p>NULL&gt;空格&gt;数字&gt;大写字母&gt;小写字母</p><p>非字母字符出现在数字的前面或后面</p><p>Eg: SELECT school, COUNT(1) quantity from test GROUP BY school ORDER<br>BY quantity desc;</p><p>以学校分组统计数量，降序排列</p></li><li><p>Count(*) is used to count the row return</p></li><li><p>SELECT <em>column/*</em> FROM <em>table name</em> WHERE <em>condition</em> OR<br><em>condition</em> ORDER BY <em>column name</em>;</p><p>SELECT <em>*</em> FROM <em>table name</em> WHERE <em>column</em> in (SELECT…) subselect</p></li><li><p>Multi column is separated by comma</p></li><li><p>– is inline comment, /* */ is multiline comment</p></li><li><p>Condition: used = to judge if it is equal</p></li><li><p>BETWEEN 30 AND 60 means &gt;= 30 and &lt;= 60, and smaller number<br>should be the first</p></li><li><p>LIKE ‘%asdf%’ match 0 or more characters as long as it contains<br>‘asdf’, _ means there is only one character</p></li><li><p>IN is used to sub-select in certain columns</p></li><li><p>NOT should be immediately after WHERE unless it is NOT IN or NOT<br>NULL</p></li><li><p>WHERE <em>column name</em> REGEXP ‘^.[a-e].*$’ select all data that<br>the second character is a to e, [aeiou] means find aeiou in the<br>specified position, [:space:] means white space, ^ means the<br>starting and $ means the ending, . means any one character(just<br>like _), d+ means one or more d, c* means zero or more c, p? means<br>zero or one p</p><p>[^..]匹配不包含在[]之内的字符。a|b匹配a或者b.</p></li><li><p>WHERE <em>column name</em> IS (NOT) NULL works, but WHERE <em>column name</em> =<br>NULL does not</p></li><li><p>DESCRIBE <em>table name</em> we can use DESC for short</p></li><li><p>SHOW CREATE TABLE <em>table</em> returns the statement of creating this<br>table</p></li><li><p>SHOW COLUMNS FROM <em>table</em></p></li><li><p>SHOW TABLE STATUS (LIKE ’<em>table name</em>’);</p><p>括号内容无法在Navicat上编译，前半句将db中所有表的信息列出。</p></li><li><p>INNER/ LEFT/ RIGHT/ OUTER JOIN ON join two tables</p><p>Eg: SELECT * from wtest LEFT JOIN rtest ON wtest.id = rtest.id;</p><p>怎么JOIN就是看以那张表为基础，整合后的表只显示所有基础表的信息和符号搜索条件的另一张表的信息。</p><p>Navicat 不支持FULL OUTER JOIN.想达到此效果可使用一下语句：</p><p>SELECT * from wtest LEFT OUTER JOIN rtest ON wtest.id = rtest.id;</p><p>UNION ALL</p><p>SELECT * from wtest RIGHT OUTER JOIN rtest ON wtest.id = rtest.id;</p></li><li><p>VIEW create a new view which meets certain conditions of a table</p><p>Eg:</p><p>CREATE VIEW designers AS</p><p>SELECT …</p><p>以后可以用SELECT * FROM designers;来查看视图内容。</p><p>好处是讲复杂查询简化为一个命令，并且隐藏读者无需看到的东西。</p></li><li><p>LIMIT<br>一个参数表示选取多少个。两个参数时，第一个表示从哪一条记录开始（0-based），第二个表示选多少条记录。</p></li></ol><h1 id="Create-and-modify-tables"><a href="#Create-and-modify-tables" class="headerlink" title="Create and modify tables"></a><strong>Create and modify tables</strong></h1><ol><li><p>CREATE TABLE <em>table name</em>(<em>variable name TYPE</em>);<br>Eg: </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">table</span> test <span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> AUTO\_INCREMENT<span class="token punctuation">,</span>     name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     school <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> ‘na’<span class="token punctuation">,</span>     phone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span><span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> UTF8<span class="token punctuation">;</span></code></pre></li><li><p>INSERT INTO <em>table name</em> <em>(column name)</em> VALUES(<em>value of the<br>type</em>); column name is not necessary</p><p>注释：三种插入数据的方法。上面那种是最普通的，如果原来存在一条关键字相同的数据，<br>将会抛出异常。第二种是INSERT<br>IGNORE，若是原来存在一条关键字相同的数据，则新数据将不会被插入。第三种是REPLACE<br>INTO，无论如何将会用新数据替换掉老数据。</p></li><li><p>UPDATE <em>table name</em> SET <em>column name</em> = ‘<em>content’</em> WHERE<br><em>condition</em></p></li><li><p>DELETE FROM <em>table name</em> WHERE <em>condition</em></p></li><li><p>DROP TABLE (IF EXISTS) <em>table name</em> will delete the whole table from<br>database, if statement is not necessary but we will get an error if<br>there is no such table in the database</p></li><li><p>ALTER TABLE <em>table name</em> DROP/ADD COLUMN <em>column name</em><br>给表格删除/增添列，也可以对主键等进行操作。进行ADD操作时不需要COLUMN.</p></li><li><p>BEFORE <em>column</em> /AFTER <em>column</em> /FIRST/LAST 可用来确定新增列的位置</p></li><li><p>ALTER TABLE <em>table</em> RENAME TO (new)<em>table</em> 重新命名表名</p></li><li><p>ALTER TABLE <em>table</em> CHANGE COLUMN <em>column</em> (new)<em>column</em> (INT NOT<br>NULL)重新命名列名顺便修改数据类型</p></li><li><p>ALTER TABLE <em>table</em> MODIFY COLUMN <em>column</em> (new)<em>type</em>只修改数据类型</p></li><li><p>NOT NULL initiate variables another default value rather than null</p></li><li><p>DEFAULT used to give default value</p></li><li><p>UNIQUE define variable to be the only one to have that value</p></li><li><p>PRIMARY KEY<br>一条记录的唯一标识，主键可以是一个字段，或者多个字段联合。大概意<br>思是not null + unique</p></li><li><p>CHECK 约束限定允许插入某列的值，与where子句语法类似</p><p>Eg:</p><p>CREATE TABLE BANK(</p><p>id INT PRIMARY KEY,</p><p>coin CHAR(1) CHECK (coin IN (‘P’, ‘N’, ‘D’))</p><p>);</p><p>ALTER TABLE contacts</p><p>ADD CONSTRAINT CHECK gender IN (‘M’, ‘F’);</p></li><li><p>ALL, ANY, SOME</p></li><li><p>CREATE TEMPORARY TABLE <em>table</em>创建临时表</p></li></ol><h1 id="Create-and-modify-Databases"><a href="#Create-and-modify-Databases" class="headerlink" title="Create and modify Databases"></a><strong>Create and modify Databases</strong></h1><ol><li><p>CREATE DATABASE <em>database name</em>;</p></li><li><p>USE <em>database name</em>;</p></li><li><p>DROP DATABASE <em>database name</em>;</p></li><li><p>DEFAULT CHARSET utf8</p></li><li><p>PRIMARY KEY ensure the value is unique</p></li><li><p>SERIAL auto increment the number</p></li><li><p>LAST_INSERT_ID() return the last id we entered</p></li><li><p>FOREIGN KEY (<em>column name</em>) REFERENCES <em>column name</em></p></li></ol><h1 id="Variable-Type"><a href="#Variable-Type" class="headerlink" title="Variable Type"></a><strong>Variable Type</strong></h1><ol><li><p>DECIMAL(length, # of bits after decimal point)</p></li><li><p>FLOAT do not guarantee the precision</p></li><li><p>CHAR(#) is like array which always use # bytes, while VARCHAR(#)<br>is like linked list which use up to (#+1) bytes</p></li><li><p>TIMESTAMP auto display the latest updated time</p></li><li><p>ENUM use number to store a string</p></li><li><p>SET can have more than one element in the list, and number can stand<br>for a combination of elements</p></li></ol><h1 id="General-function"><a href="#General-function" class="headerlink" title="General function"></a><strong>General function</strong></h1><ol><li><p>GROUP BY <em>column name</em> put results in groups</p></li><li><p>DISTINCT <em>column name</em> does not count duplicate value</p></li><li><p>GROUP_CONCAT(<em>column name</em> SEPARATOR ‘<em>separation sign</em>’)</p></li><li><p>AVG(), MIN(), MAX(), STD(), SUM()</p></li><li><p>CASE WHEN <em>condition1</em> THEN ‘value1’</p><p>WHEN <em>condition2</em> THEN ‘value2’</p><p>ELSE ‘value*’</p><p>END;</p><p>Be aware that it will immediately execute the clause and then reach<br>the end when it finds the first true condition.</p></li><li><p>START TRANSACTION (at the beginning) + COMMIT (in the end) used when<br>there is a long list of updates or inserts</p></li></ol><p>ROLLBACK related performance will not be executed</p><p>在commit之前数据库不会发生任何改变。Rollback会将数据回滚到start<br>transaction 之前，以保证原子性。</p><p>存储引擎必须是BDB或者InnoDB（两种支持事务的引擎）。</p><p>改变引擎语法ALTER TABLE <em>table</em> TYPE = InnoDB;</p><ol><li><p>(CREATE TRIGGER <em>table name</em> AFTER INSERT ON <em>table name</em></p><p>FOR EACH ROW</p><p>BEGIN</p><p>UPDATE <em>table name</em> SET <em>operations</em> WHERE <em>conditions</em></p><p>END) begin, end block enables more than one statement can be<br>executed, trigger will update one table automatically if another is<br>updated</p></li><li><p>SIGNAL SQLSTATE’#’ SET MESSAGE_TEXT = ‘ERROR’ throw exceptions</p></li><li><p>functions of string</p></li><li><p>LEFT(<em>column name, length</em>), RIGHT (<em>column name, length</em>),<br>MID(<em>column name, starting index, length</em>) return according<br>substring</p></li><li><p>SUBSTR(<em>column name, start index, length</em>) 1-based, not end before<br>but end after</p></li><li><p>SELECT SUBSTRING_INDEX (<em>column</em>, ‘<em>str</em>’, 1) FROM <em>table</em>;</p><p>表示从该列取出指定str前所有内容。1表示寻找第一次出现的指定str</p></li><li><p>UPPER(<em>column name</em>) , LOWER(<em>column name</em>), REVERSE(<em>column name</em>)<br>transformation</p></li><li><p>CONCAT_WS(‘<em>separation sign</em>’, <em>column name</em>, <em>column name</em>)<br>concatenate string using separation sign</p></li><li><p>LPAD(<em>column name</em>, <em>fixed</em> <em>length</em>, <em>char</em>) left append a char if<br>length is not enough. If length is longer than fixed length,<br>truncate it to the fixed length.</p></li><li><p>LOCATE(‘<em>string</em>’, <em>column name</em>) find string in certain column,<br>return 1 or 0.</p></li><li><p>drop trigger first, and then drop associated table</p></li></ol><h1 id="Functions-of-numeric"><a href="#Functions-of-numeric" class="headerlink" title="**Functions of numeric **"></a>**Functions of numeric **</h1><ol><li><p>int/ int return float</p></li><li><p>int DIV int return int</p></li><li><p>SIGN(#) return 1 if positive, 0 if negative</p></li><li><p>CONV(# to be change, original base, new base) return # changed<br>into the new base</p></li><li><p>RAND(<em>seed</em>) return random number, seed can be omitted</p></li></ol><h1 id="Functions-of-numeric-1"><a href="#Functions-of-numeric-1" class="headerlink" title="**Functions of numeric **"></a>**Functions of numeric **</h1><ol><li><p>NOW() return local time</p></li><li><p>DAYOFMONTH(), MONTHNAME()</p></li><li><p>TIME_TO_SEC(), SEC_TO_TIME()</p></li><li><p>ADDTIME(), SUBTIME()</p></li><li><p>DATE_FORMAT(NOW(), ‘%Y-%m-%d %T’); standard time format</p></li></ol><h1 id="Connection-between-tables"><a href="#Connection-between-tables" class="headerlink" title="Connection between tables"></a><strong>Connection between tables</strong></h1><ol><li><p>CREATE TABLE interests (newID INT PRIMARY KEY,</p><p>Interest VARCHAR(20) NOT NULL,</p><p>iPhone VARCHAR(20) UNIQUE,</p><p>CONSTRAINT test_phone_fk //命名方式：来源表_键字段_fk（外键）</p><p>FOREIGN KEY (iPhone) //外键字段名</p><p>REFERENCES test (phone) //来源表（键字段）</p><p>) CHARSET = utf8;</p><p>外键不一定必须是父表的主键，<br>但必须有唯一性。创建外键需要注意四个问题。（1）关联字段的类型和长度要一致（2）关联的表编码要一致（3）删除时和更新时的设置要相同（4）某个表中是否已经有记录。</p></li><li><p>自引用外键是出于其他目的而用于同一张表的主键。</p></li><li><p>Junction table<br>存储两个要产生关联性的表的主键，解决多对多的关系问题。</p></li><li><p>关联子查询</p></li></ol><blockquote><p>需要先运行外部查询，后运行内部查询</p><p>SELECT mc.first_name firstname, mc.last_name, mc.email email</p><p>FROM my_contacts mc</p><p>WHERE NOT EXISTS<br>//从my_contacts表中选出未列入job_current表的人的姓名和邮箱</p><p>(SELECT * FROM job_current jc</p><p>WHERE mc.contact_id = jc.contact_id);</p></blockquote><ol><li>交叉连接：cross join</li></ol><blockquote><p>Cross join syntax:</p><p>SELECT b.boy, t.toy</p><p>FROM boys AS b</p><p>CROSS JOIN</p><p>toys AS t;</p><p>返回两张表的每一行相乘的结果</p></blockquote><ol><li>内连接：equijoin, non-equijoin, natural join</li></ol><blockquote><p>Equijoin syntax:</p><p>SELECT b.boy, t.toy</p><p>FROM boys AS b</p><p>INNER JOIN</p><p>toys AS t</p><p>ON boys.toy_id = toys.toy_id</p><p>ORDER BY boys.boy;</p><p>Natural join syntax:</p><p>SELECT boys.boy, toys.toy</p><p>FROM boys</p><p>NATURAL JOIN</p><p>toys</p><p>ORDER BY boys.boy;</p><p>//自然联接识别每个表中的相同名称并返回相符的记录(表中有同名列)</p><p>//使用内连接时，两张表的顺序并无影响</p></blockquote><ol><li>外联接: left outer join, right outer join, full outer<br>join（部分RDBMS不支持）</li></ol><blockquote><p>//外联接一定会提供数据行，如果没有找到相符的记录则在结果集中显示null</p></blockquote><ol><li>自联接：self-join</li></ol><blockquote><p>SELECT c1.name, c2.name AS boss</p><p>FROM clown_info c1</p><p>INNER JOIN clown_info c2</p><p>ON c1.boss_id = c2.id; //找出每个小丑的老板是谁</p><p>//自联接能把单一表当成两张具有完全相同的信息的表来进行查询。</p><p>//使用该表两次分别设定成不同的别名。</p></blockquote><ol><li>联合：Union</li></ol><blockquote><p>//把多张表的查询结果合并至一个表中。</p><p>//每个select语句必须返回数量相同的列，且列的类型相同或可以互相转换。</p><p>//默认清除重复值。 如果想看到重复值，使用UNION ALL</p><p>//可采用新建表的方式捕获联合后数据的类型</p><p>CREATE TABLE my-union AS</p><p>SELECT title FROM job-1 UNION SELECT title FROM job-2;</p></blockquote><ol><li>交集Intersect和差集Except</li></ol><blockquote><p>//使用方式同上。Except返回只出现在第一个查询而不在第二个查询中的列。</p><p>//MySQL中无法使用。</p></blockquote><h1 id="Stored-Routines"><a href="#Stored-Routines" class="headerlink" title="Stored Routines"></a><strong>Stored</strong> <strong>Routines</strong></h1><ol><li><p>CREATE FUNCTION <em>function name</em> (<em>variable name variable type</em>)</p><p>RETURNS <em>variable name variable type</em> // determine what to return</p><p>RETURN … // the real thing that is returned</p></li><li><p>DELIMITER <em>sign</em> reset the delimiter to the sign</p><p>BEGIN</p><p>…</p><p>END <em>sign</em></p></li></ol><h1 id="User-Authority"><a href="#User-Authority" class="headerlink" title="User Authority"></a><strong>User Authority</strong></h1><ol><li><p>设定根用户密码</p><p>SET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘<em>code</em>’);</p></li><li><p>新增用户</p><p>CREATE USER <em>username</em> IDENTIFIED BY ‘<em>code</em>’;</p></li><li><p>授予权限</p><p>GRANT <em>SELECT</em> ON <em>table</em> TO <em>username</em>;</p><p>SELECT可替换为ALL, INSERT, DELETE,<br>UPDATE等关键词。这些关键词与ON之间可插入括号，在括号内列举该表的某些列，表示用户只可对限定列进行操作。</p><p>在TO <em>username</em> 后面加上WITH GRANT OPTION表示该用户可授权给别人。</p><p>使用<em>database</em>.*可把权限运用到该数据库的每一张表上。</p></li><li><p>撤销权限</p><p>REVOKE SELECT ON <em>table</em> FROM <em>username</em>;<br>副作用是同时撤销该用户授权用户的权限</p><p>REVOKE SELECT OPTION ON <em>table</em> FROM <em>username</em>;<br>只撤销授予他人这一权限</p><p>REVOKE SELECT ON <em>table</em> FROM <em>username</em> CASCADE;<br>cascade表示权限的撤销具有连锁反应,通常情况下为默认值</p><p>REVOKE SELECT ON <em>table</em> FROM <em>username</em><br>RESTRICT;若有其他用户受到影响，返回错误信息，且不执行撤销权限操作</p></li><li><p>角色功能（Mysql中暂未纳入）</p><p>CREATE ROLE <em>role</em>;创建角色</p><p>GRANT SELECT, INSERT ON <em>table</em> TO <em>role</em>;赋予角色一些功能</p><p>GRANT <em>role</em> TO <em>user</em>;用户将拥有角色拥有的功能</p><p>WITH ADMIN OPTION允许用户把角色授予其他人</p></li></ol><h1 id="Navicat-for-Mysql-快捷键"><a href="#Navicat-for-Mysql-快捷键" class="headerlink" title="Navicat for Mysql 快捷键"></a><strong>Navicat for Mysql 快捷键</strong></h1><p>Ctrl+q 打开查询窗口</p><p>Ctrl+/ 注释语句</p><p>Ctrl+shift+/ 取消注释</p><p>Ctrl+r 运行语句</p><p>Ctrl+shift+r 运行选中语句</p><p>F6 打开一个命令行窗口</p><p>Ctrl+l 删除一行</p><p>Ctrl+n 打开一个新的查询窗口</p><p>Ctrl+w 关闭一个查询窗口</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
